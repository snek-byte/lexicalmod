{
  "version": 3,
  "sources": ["../../prismjs/prism.js", "../../prismjs/components/prism-clike.js", "../../prismjs/components/prism-javascript.js", "../../prismjs/components/prism-markup.js", "../../prismjs/components/prism-markdown.js", "../../prismjs/components/prism-c.js", "../../prismjs/components/prism-css.js", "../../prismjs/components/prism-objectivec.js", "../../prismjs/components/prism-sql.js", "../../prismjs/components/prism-python.js", "../../prismjs/components/prism-rust.js", "../../prismjs/components/prism-swift.js", "../../prismjs/components/prism-typescript.js", "../../prismjs/components/prism-java.js", "../../prismjs/components/prism-cpp.js", "../../@lexical/code/LexicalCode.dev.js", "../../@lexical/code/LexicalCode.js"],
  "sourcesContent": ["\r\n/* **********************************************\r\n     Begin prism-core.js\r\n********************************************** */\r\n\r\n/// <reference lib=\"WebWorker\"/>\r\n\r\nvar _self = (typeof window !== 'undefined')\r\n\t? window   // if in browser\r\n\t: (\r\n\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)\r\n\t\t\t? self // if in worker\r\n\t\t\t: {}   // if in node js\r\n\t);\r\n\r\n/**\r\n * Prism: Lightweight, robust, elegant syntax highlighting\r\n *\r\n * @license MIT <https://opensource.org/licenses/MIT>\r\n * @author Lea Verou <https://lea.verou.me>\r\n * @namespace\r\n * @public\r\n */\r\nvar Prism = (function (_self) {\r\n\r\n\t// Private helper vars\r\n\tvar lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\r\n\tvar uniqueId = 0;\r\n\r\n\t// The grammar object for plaintext\r\n\tvar plainTextGrammar = {};\r\n\r\n\r\n\tvar _ = {\r\n\t\t/**\r\n\t\t * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\r\n\t\t * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\r\n\t\t * additional languages or plugins yourself.\r\n\t\t *\r\n\t\t * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\r\n\t\t *\r\n\t\t * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\r\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\r\n\t\t *\r\n\t\t * ```js\r\n\t\t * window.Prism = window.Prism || {};\r\n\t\t * Prism.manual = true;\r\n\t\t * // add a new <script> to load Prism's script\r\n\t\t * ```\r\n\t\t *\r\n\t\t * @default false\r\n\t\t * @type {boolean}\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\tmanual: _self.Prism && _self.Prism.manual,\r\n\t\t/**\r\n\t\t * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses\r\n\t\t * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your\r\n\t\t * own worker, you don't want it to do this.\r\n\t\t *\r\n\t\t * By setting this value to `true`, Prism will not add its own listeners to the worker.\r\n\t\t *\r\n\t\t * You obviously have to change this value before Prism executes. To do this, you can add an\r\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\r\n\t\t *\r\n\t\t * ```js\r\n\t\t * window.Prism = window.Prism || {};\r\n\t\t * Prism.disableWorkerMessageHandler = true;\r\n\t\t * // Load Prism's script\r\n\t\t * ```\r\n\t\t *\r\n\t\t * @default false\r\n\t\t * @type {boolean}\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\r\n\r\n\t\t/**\r\n\t\t * A namespace for utility methods.\r\n\t\t *\r\n\t\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\r\n\t\t * change or disappear at any time.\r\n\t\t *\r\n\t\t * @namespace\r\n\t\t * @memberof Prism\r\n\t\t */\r\n\t\tutil: {\r\n\t\t\tencode: function encode(tokens) {\r\n\t\t\t\tif (tokens instanceof Token) {\r\n\t\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);\r\n\t\t\t\t} else if (Array.isArray(tokens)) {\r\n\t\t\t\t\treturn tokens.map(encode);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns the name of the type of the given value.\r\n\t\t\t *\r\n\t\t\t * @param {any} o\r\n\t\t\t * @returns {string}\r\n\t\t\t * @example\r\n\t\t\t * type(null)      === 'Null'\r\n\t\t\t * type(undefined) === 'Undefined'\r\n\t\t\t * type(123)       === 'Number'\r\n\t\t\t * type('foo')     === 'String'\r\n\t\t\t * type(true)      === 'Boolean'\r\n\t\t\t * type([1, 2])    === 'Array'\r\n\t\t\t * type({})        === 'Object'\r\n\t\t\t * type(String)    === 'Function'\r\n\t\t\t * type(/abc+/)    === 'RegExp'\r\n\t\t\t */\r\n\t\t\ttype: function (o) {\r\n\t\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns a unique number for the given object. Later calls will still return the same number.\r\n\t\t\t *\r\n\t\t\t * @param {Object} obj\r\n\t\t\t * @returns {number}\r\n\t\t\t */\r\n\t\t\tobjId: function (obj) {\r\n\t\t\t\tif (!obj['__id']) {\r\n\t\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\r\n\t\t\t\t}\r\n\t\t\t\treturn obj['__id'];\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Creates a deep clone of the given object.\r\n\t\t\t *\r\n\t\t\t * The main intended use of this function is to clone language definitions.\r\n\t\t\t *\r\n\t\t\t * @param {T} o\r\n\t\t\t * @param {Record<number, any>} [visited]\r\n\t\t\t * @returns {T}\r\n\t\t\t * @template T\r\n\t\t\t */\r\n\t\t\tclone: function deepClone(o, visited) {\r\n\t\t\t\tvisited = visited || {};\r\n\r\n\t\t\t\tvar clone; var id;\r\n\t\t\t\tswitch (_.util.type(o)) {\r\n\t\t\t\t\tcase 'Object':\r\n\t\t\t\t\t\tid = _.util.objId(o);\r\n\t\t\t\t\t\tif (visited[id]) {\r\n\t\t\t\t\t\t\treturn visited[id];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});\r\n\t\t\t\t\t\tvisited[id] = clone;\r\n\r\n\t\t\t\t\t\tfor (var key in o) {\r\n\t\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\r\n\t\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\r\n\r\n\t\t\t\t\tcase 'Array':\r\n\t\t\t\t\t\tid = _.util.objId(o);\r\n\t\t\t\t\t\tif (visited[id]) {\r\n\t\t\t\t\t\t\treturn visited[id];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tclone = [];\r\n\t\t\t\t\t\tvisited[id] = clone;\r\n\r\n\t\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {\r\n\t\t\t\t\t\t\tclone[i] = deepClone(v, visited);\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn o;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\r\n\t\t\t *\r\n\t\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\r\n\t\t\t *\r\n\t\t\t * @param {Element} element\r\n\t\t\t * @returns {string}\r\n\t\t\t */\r\n\t\t\tgetLanguage: function (element) {\r\n\t\t\t\twhile (element) {\r\n\t\t\t\t\tvar m = lang.exec(element.className);\r\n\t\t\t\t\tif (m) {\r\n\t\t\t\t\t\treturn m[1].toLowerCase();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telement = element.parentElement;\r\n\t\t\t\t}\r\n\t\t\t\treturn 'none';\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Sets the Prism `language-xxxx` class of the given element.\r\n\t\t\t *\r\n\t\t\t * @param {Element} element\r\n\t\t\t * @param {string} language\r\n\t\t\t * @returns {void}\r\n\t\t\t */\r\n\t\t\tsetLanguage: function (element, language) {\r\n\t\t\t\t// remove all `language-xxxx` classes\r\n\t\t\t\t// (this might leave behind a leading space)\r\n\t\t\t\telement.className = element.className.replace(RegExp(lang, 'gi'), '');\r\n\r\n\t\t\t\t// add the new `language-xxxx` class\r\n\t\t\t\t// (using `classList` will automatically clean up spaces for us)\r\n\t\t\t\telement.classList.add('language-' + language);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns the script element that is currently executing.\r\n\t\t\t *\r\n\t\t\t * This does __not__ work for line script element.\r\n\t\t\t *\r\n\t\t\t * @returns {HTMLScriptElement | null}\r\n\t\t\t */\r\n\t\t\tcurrentScript: function () {\r\n\t\t\t\tif (typeof document === 'undefined') {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\tif (document.currentScript && document.currentScript.tagName === 'SCRIPT' && 1 < 2 /* hack to trip TS' flow analysis */) {\r\n\t\t\t\t\treturn /** @type {any} */ (document.currentScript);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// IE11 workaround\r\n\t\t\t\t// we'll get the src of the current script by parsing IE11's error stack trace\r\n\t\t\t\t// this will not work for inline scripts\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tthrow new Error();\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\t// Get file src url from stack. Specifically works with the format of stack traces in IE.\r\n\t\t\t\t\t// A stack will look like this:\r\n\t\t\t\t\t//\r\n\t\t\t\t\t// Error\r\n\t\t\t\t\t//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\r\n\t\t\t\t\t//    at Global code (http://localhost/components/prism-core.js:606:1)\r\n\r\n\t\t\t\t\tvar src = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(err.stack) || [])[1];\r\n\t\t\t\t\tif (src) {\r\n\t\t\t\t\t\tvar scripts = document.getElementsByTagName('script');\r\n\t\t\t\t\t\tfor (var i in scripts) {\r\n\t\t\t\t\t\t\tif (scripts[i].src == src) {\r\n\t\t\t\t\t\t\t\treturn scripts[i];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns whether a given class is active for `element`.\r\n\t\t\t *\r\n\t\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\r\n\t\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\r\n\t\t\t * given class is just the given class with a `no-` prefix.\r\n\t\t\t *\r\n\t\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\r\n\t\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\r\n\t\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\r\n\t\t\t *\r\n\t\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\r\n\t\t\t * version of it, the class is considered active.\r\n\t\t\t *\r\n\t\t\t * @param {Element} element\r\n\t\t\t * @param {string} className\r\n\t\t\t * @param {boolean} [defaultActivation=false]\r\n\t\t\t * @returns {boolean}\r\n\t\t\t */\r\n\t\t\tisActive: function (element, className, defaultActivation) {\r\n\t\t\t\tvar no = 'no-' + className;\r\n\r\n\t\t\t\twhile (element) {\r\n\t\t\t\t\tvar classList = element.classList;\r\n\t\t\t\t\tif (classList.contains(className)) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (classList.contains(no)) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telement = element.parentElement;\r\n\t\t\t\t}\r\n\t\t\t\treturn !!defaultActivation;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\r\n\t\t *\r\n\t\t * @namespace\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\tlanguages: {\r\n\t\t\t/**\r\n\t\t\t * The grammar for plain, unformatted text.\r\n\t\t\t */\r\n\t\t\tplain: plainTextGrammar,\r\n\t\t\tplaintext: plainTextGrammar,\r\n\t\t\ttext: plainTextGrammar,\r\n\t\t\ttxt: plainTextGrammar,\r\n\r\n\t\t\t/**\r\n\t\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\r\n\t\t\t *\r\n\t\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\r\n\t\t\t * will be overwritten at its original position.\r\n\t\t\t *\r\n\t\t\t * ## Best practices\r\n\t\t\t *\r\n\t\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\r\n\t\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\r\n\t\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\r\n\t\t\t *\r\n\t\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\r\n\t\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\r\n\t\t\t *\r\n\t\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\r\n\t\t\t * @param {Grammar} redef The new tokens to append.\r\n\t\t\t * @returns {Grammar} The new language created.\r\n\t\t\t * @public\r\n\t\t\t * @example\r\n\t\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\r\n\t\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\r\n\t\t\t *     // at its original position\r\n\t\t\t *     'comment': { ... },\r\n\t\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\r\n\t\t\t *     'color': /\\b(?:red|green|blue)\\b/\r\n\t\t\t * });\r\n\t\t\t */\r\n\t\t\textend: function (id, redef) {\r\n\t\t\t\tvar lang = _.util.clone(_.languages[id]);\r\n\r\n\t\t\t\tfor (var key in redef) {\r\n\t\t\t\t\tlang[key] = redef[key];\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn lang;\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\r\n\t\t\t *\r\n\t\t\t * ## Usage\r\n\t\t\t *\r\n\t\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\r\n\t\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\r\n\t\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\r\n\t\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\r\n\t\t\t * this:\r\n\t\t\t *\r\n\t\t\t * ```js\r\n\t\t\t * Prism.languages.markup.style = {\r\n\t\t\t *     // token\r\n\t\t\t * };\r\n\t\t\t * ```\r\n\t\t\t *\r\n\t\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\r\n\t\t\t * before existing tokens. For the CSS example above, you would use it like this:\r\n\t\t\t *\r\n\t\t\t * ```js\r\n\t\t\t * Prism.languages.insertBefore('markup', 'cdata', {\r\n\t\t\t *     'style': {\r\n\t\t\t *         // token\r\n\t\t\t *     }\r\n\t\t\t * });\r\n\t\t\t * ```\r\n\t\t\t *\r\n\t\t\t * ## Special cases\r\n\t\t\t *\r\n\t\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\r\n\t\t\t * will be ignored.\r\n\t\t\t *\r\n\t\t\t * This behavior can be used to insert tokens after `before`:\r\n\t\t\t *\r\n\t\t\t * ```js\r\n\t\t\t * Prism.languages.insertBefore('markup', 'comment', {\r\n\t\t\t *     'comment': Prism.languages.markup.comment,\r\n\t\t\t *     // tokens after 'comment'\r\n\t\t\t * });\r\n\t\t\t * ```\r\n\t\t\t *\r\n\t\t\t * ## Limitations\r\n\t\t\t *\r\n\t\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\r\n\t\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\r\n\t\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\r\n\t\t\t * deleting properties which is necessary to insert at arbitrary positions.\r\n\t\t\t *\r\n\t\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\r\n\t\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\r\n\t\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\r\n\t\t\t *\r\n\t\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\r\n\t\t\t * you hold the target object in a variable, then the value of the variable will not change.\r\n\t\t\t *\r\n\t\t\t * ```js\r\n\t\t\t * var oldMarkup = Prism.languages.markup;\r\n\t\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\r\n\t\t\t *\r\n\t\t\t * assert(oldMarkup !== Prism.languages.markup);\r\n\t\t\t * assert(newMarkup === Prism.languages.markup);\r\n\t\t\t * ```\r\n\t\t\t *\r\n\t\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\r\n\t\t\t * object to be modified.\r\n\t\t\t * @param {string} before The key to insert before.\r\n\t\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\r\n\t\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\r\n\t\t\t * object to be modified.\r\n\t\t\t *\r\n\t\t\t * Defaults to `Prism.languages`.\r\n\t\t\t * @returns {Grammar} The new grammar object.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tinsertBefore: function (inside, before, insert, root) {\r\n\t\t\t\troot = root || /** @type {any} */ (_.languages);\r\n\t\t\t\tvar grammar = root[inside];\r\n\t\t\t\t/** @type {Grammar} */\r\n\t\t\t\tvar ret = {};\r\n\r\n\t\t\t\tfor (var token in grammar) {\r\n\t\t\t\t\tif (grammar.hasOwnProperty(token)) {\r\n\r\n\t\t\t\t\t\tif (token == before) {\r\n\t\t\t\t\t\t\tfor (var newToken in insert) {\r\n\t\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\r\n\t\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Do not insert token which also occur in insert. See #1525\r\n\t\t\t\t\t\tif (!insert.hasOwnProperty(token)) {\r\n\t\t\t\t\t\t\tret[token] = grammar[token];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar old = root[inside];\r\n\t\t\t\troot[inside] = ret;\r\n\r\n\t\t\t\t// Update references in other language definitions\r\n\t\t\t\t_.languages.DFS(_.languages, function (key, value) {\r\n\t\t\t\t\tif (value === old && key != inside) {\r\n\t\t\t\t\t\tthis[key] = ret;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn ret;\r\n\t\t\t},\r\n\r\n\t\t\t// Traverse a language definition with Depth First Search\r\n\t\t\tDFS: function DFS(o, callback, type, visited) {\r\n\t\t\t\tvisited = visited || {};\r\n\r\n\t\t\t\tvar objId = _.util.objId;\r\n\r\n\t\t\t\tfor (var i in o) {\r\n\t\t\t\t\tif (o.hasOwnProperty(i)) {\r\n\t\t\t\t\t\tcallback.call(o, i, o[i], type || i);\r\n\r\n\t\t\t\t\t\tvar property = o[i];\r\n\t\t\t\t\t\tvar propertyType = _.util.type(property);\r\n\r\n\t\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {\r\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\r\n\t\t\t\t\t\t\tDFS(property, callback, null, visited);\r\n\t\t\t\t\t\t} else if (propertyType === 'Array' && !visited[objId(property)]) {\r\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\r\n\t\t\t\t\t\t\tDFS(property, callback, i, visited);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tplugins: {},\r\n\r\n\t\t/**\r\n\t\t * This is the most high-level function in Prism’s API.\r\n\t\t * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\r\n\t\t * each one of them.\r\n\t\t *\r\n\t\t * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\r\n\t\t *\r\n\t\t * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\r\n\t\t * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\thighlightAll: function (async, callback) {\r\n\t\t\t_.highlightAllUnder(document, async, callback);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\r\n\t\t * {@link Prism.highlightElement} on each one of them.\r\n\t\t *\r\n\t\t * The following hooks will be run:\r\n\t\t * 1. `before-highlightall`\r\n\t\t * 2. `before-all-elements-highlight`\r\n\t\t * 3. All hooks of {@link Prism.highlightElement} for each element.\r\n\t\t *\r\n\t\t * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\r\n\t\t * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\r\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\thighlightAllUnder: function (container, async, callback) {\r\n\t\t\tvar env = {\r\n\t\t\t\tcallback: callback,\r\n\t\t\t\tcontainer: container,\r\n\t\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\r\n\t\t\t};\r\n\r\n\t\t\t_.hooks.run('before-highlightall', env);\r\n\r\n\t\t\tenv.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\r\n\r\n\t\t\t_.hooks.run('before-all-elements-highlight', env);\r\n\r\n\t\t\tfor (var i = 0, element; (element = env.elements[i++]);) {\r\n\t\t\t\t_.highlightElement(element, async === true, env.callback);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Highlights the code inside a single element.\r\n\t\t *\r\n\t\t * The following hooks will be run:\r\n\t\t * 1. `before-sanity-check`\r\n\t\t * 2. `before-highlight`\r\n\t\t * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\r\n\t\t * 4. `before-insert`\r\n\t\t * 5. `after-highlight`\r\n\t\t * 6. `complete`\r\n\t\t *\r\n\t\t * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\r\n\t\t * the element's language.\r\n\t\t *\r\n\t\t * @param {Element} element The element containing the code.\r\n\t\t * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\r\n\t\t * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\r\n\t\t * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\r\n\t\t * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\r\n\t\t *\r\n\t\t * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\r\n\t\t * asynchronous highlighting to work. You can build your own bundle on the\r\n\t\t * [Download page](https://prismjs.com/download.html).\r\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\r\n\t\t * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\thighlightElement: function (element, async, callback) {\r\n\t\t\t// Find language\r\n\t\t\tvar language = _.util.getLanguage(element);\r\n\t\t\tvar grammar = _.languages[language];\r\n\r\n\t\t\t// Set language on the element, if not present\r\n\t\t\t_.util.setLanguage(element, language);\r\n\r\n\t\t\t// Set language on the parent, for styling\r\n\t\t\tvar parent = element.parentElement;\r\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre') {\r\n\t\t\t\t_.util.setLanguage(parent, language);\r\n\t\t\t}\r\n\r\n\t\t\tvar code = element.textContent;\r\n\r\n\t\t\tvar env = {\r\n\t\t\t\telement: element,\r\n\t\t\t\tlanguage: language,\r\n\t\t\t\tgrammar: grammar,\r\n\t\t\t\tcode: code\r\n\t\t\t};\r\n\r\n\t\t\tfunction insertHighlightedCode(highlightedCode) {\r\n\t\t\t\tenv.highlightedCode = highlightedCode;\r\n\r\n\t\t\t\t_.hooks.run('before-insert', env);\r\n\r\n\t\t\t\tenv.element.innerHTML = env.highlightedCode;\r\n\r\n\t\t\t\t_.hooks.run('after-highlight', env);\r\n\t\t\t\t_.hooks.run('complete', env);\r\n\t\t\t\tcallback && callback.call(env.element);\r\n\t\t\t}\r\n\r\n\t\t\t_.hooks.run('before-sanity-check', env);\r\n\r\n\t\t\t// plugins may change/add the parent/element\r\n\t\t\tparent = env.element.parentElement;\r\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {\r\n\t\t\t\tparent.setAttribute('tabindex', '0');\r\n\t\t\t}\r\n\r\n\t\t\tif (!env.code) {\r\n\t\t\t\t_.hooks.run('complete', env);\r\n\t\t\t\tcallback && callback.call(env.element);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t_.hooks.run('before-highlight', env);\r\n\r\n\t\t\tif (!env.grammar) {\r\n\t\t\t\tinsertHighlightedCode(_.util.encode(env.code));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (async && _self.Worker) {\r\n\t\t\t\tvar worker = new Worker(_.filename);\r\n\r\n\t\t\t\tworker.onmessage = function (evt) {\r\n\t\t\t\t\tinsertHighlightedCode(evt.data);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tworker.postMessage(JSON.stringify({\r\n\t\t\t\t\tlanguage: env.language,\r\n\t\t\t\t\tcode: env.code,\r\n\t\t\t\t\timmediateClose: true\r\n\t\t\t\t}));\r\n\t\t\t} else {\r\n\t\t\t\tinsertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\r\n\t\t * and the language definitions to use, and returns a string with the HTML produced.\r\n\t\t *\r\n\t\t * The following hooks will be run:\r\n\t\t * 1. `before-tokenize`\r\n\t\t * 2. `after-tokenize`\r\n\t\t * 3. `wrap`: On each {@link Token}.\r\n\t\t *\r\n\t\t * @param {string} text A string with the code to be highlighted.\r\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\r\n\t\t *\r\n\t\t * Usually a language definition like `Prism.languages.markup`.\r\n\t\t * @param {string} language The name of the language definition passed to `grammar`.\r\n\t\t * @returns {string} The highlighted HTML.\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t * @example\r\n\t\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\r\n\t\t */\r\n\t\thighlight: function (text, grammar, language) {\r\n\t\t\tvar env = {\r\n\t\t\t\tcode: text,\r\n\t\t\t\tgrammar: grammar,\r\n\t\t\t\tlanguage: language\r\n\t\t\t};\r\n\t\t\t_.hooks.run('before-tokenize', env);\r\n\t\t\tif (!env.grammar) {\r\n\t\t\t\tthrow new Error('The language \"' + env.language + '\" has no grammar.');\r\n\t\t\t}\r\n\t\t\tenv.tokens = _.tokenize(env.code, env.grammar);\r\n\t\t\t_.hooks.run('after-tokenize', env);\r\n\t\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\r\n\t\t * and the language definitions to use, and returns an array with the tokenized code.\r\n\t\t *\r\n\t\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\r\n\t\t *\r\n\t\t * This method could be useful in other contexts as well, as a very crude parser.\r\n\t\t *\r\n\t\t * @param {string} text A string with the code to be highlighted.\r\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\r\n\t\t *\r\n\t\t * Usually a language definition like `Prism.languages.markup`.\r\n\t\t * @returns {TokenStream} An array of strings and tokens, a token stream.\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t * @example\r\n\t\t * let code = `var foo = 0;`;\r\n\t\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\r\n\t\t * tokens.forEach(token => {\r\n\t\t *     if (token instanceof Prism.Token && token.type === 'number') {\r\n\t\t *         console.log(`Found numeric literal: ${token.content}`);\r\n\t\t *     }\r\n\t\t * });\r\n\t\t */\r\n\t\ttokenize: function (text, grammar) {\r\n\t\t\tvar rest = grammar.rest;\r\n\t\t\tif (rest) {\r\n\t\t\t\tfor (var token in rest) {\r\n\t\t\t\t\tgrammar[token] = rest[token];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdelete grammar.rest;\r\n\t\t\t}\r\n\r\n\t\t\tvar tokenList = new LinkedList();\r\n\t\t\taddAfter(tokenList, tokenList.head, text);\r\n\r\n\t\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);\r\n\r\n\t\t\treturn toArray(tokenList);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * @namespace\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\thooks: {\r\n\t\t\tall: {},\r\n\r\n\t\t\t/**\r\n\t\t\t * Adds the given callback to the list of callbacks for the given hook.\r\n\t\t\t *\r\n\t\t\t * The callback will be invoked when the hook it is registered for is run.\r\n\t\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\r\n\t\t\t *\r\n\t\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\r\n\t\t\t *\r\n\t\t\t * @param {string} name The name of the hook.\r\n\t\t\t * @param {HookCallback} callback The callback function which is given environment variables.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tadd: function (name, callback) {\r\n\t\t\t\tvar hooks = _.hooks.all;\r\n\r\n\t\t\t\thooks[name] = hooks[name] || [];\r\n\r\n\t\t\t\thooks[name].push(callback);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\r\n\t\t\t *\r\n\t\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\r\n\t\t\t *\r\n\t\t\t * @param {string} name The name of the hook.\r\n\t\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\trun: function (name, env) {\r\n\t\t\t\tvar callbacks = _.hooks.all[name];\r\n\r\n\t\t\t\tif (!callbacks || !callbacks.length) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (var i = 0, callback; (callback = callbacks[i++]);) {\r\n\t\t\t\t\tcallback(env);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tToken: Token\r\n\t};\r\n\t_self.Prism = _;\r\n\r\n\r\n\t// Typescript note:\r\n\t// The following can be used to import the Token type in JSDoc:\r\n\t//\r\n\t//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\r\n\r\n\t/**\r\n\t * Creates a new token.\r\n\t *\r\n\t * @param {string} type See {@link Token#type type}\r\n\t * @param {string | TokenStream} content See {@link Token#content content}\r\n\t * @param {string|string[]} [alias] The alias(es) of the token.\r\n\t * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\r\n\t * @class\r\n\t * @global\r\n\t * @public\r\n\t */\r\n\tfunction Token(type, content, alias, matchedStr) {\r\n\t\t/**\r\n\t\t * The type of the token.\r\n\t\t *\r\n\t\t * This is usually the key of a pattern in a {@link Grammar}.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @see GrammarToken\r\n\t\t * @public\r\n\t\t */\r\n\t\tthis.type = type;\r\n\t\t/**\r\n\t\t * The strings or tokens contained by this token.\r\n\t\t *\r\n\t\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\r\n\t\t *\r\n\t\t * @type {string | TokenStream}\r\n\t\t * @public\r\n\t\t */\r\n\t\tthis.content = content;\r\n\t\t/**\r\n\t\t * The alias(es) of the token.\r\n\t\t *\r\n\t\t * @type {string|string[]}\r\n\t\t * @see GrammarToken\r\n\t\t * @public\r\n\t\t */\r\n\t\tthis.alias = alias;\r\n\t\t// Copy of the full string this token was created from\r\n\t\tthis.length = (matchedStr || '').length | 0;\r\n\t}\r\n\r\n\t/**\r\n\t * A token stream is an array of strings and {@link Token Token} objects.\r\n\t *\r\n\t * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\r\n\t * them.\r\n\t *\r\n\t * 1. No adjacent strings.\r\n\t * 2. No empty strings.\r\n\t *\r\n\t *    The only exception here is the token stream that only contains the empty string and nothing else.\r\n\t *\r\n\t * @typedef {Array<string | Token>} TokenStream\r\n\t * @global\r\n\t * @public\r\n\t */\r\n\r\n\t/**\r\n\t * Converts the given token or token stream to an HTML representation.\r\n\t *\r\n\t * The following hooks will be run:\r\n\t * 1. `wrap`: On each {@link Token}.\r\n\t *\r\n\t * @param {string | Token | TokenStream} o The token or token stream to be converted.\r\n\t * @param {string} language The name of current language.\r\n\t * @returns {string} The HTML representation of the token or token stream.\r\n\t * @memberof Token\r\n\t * @static\r\n\t */\r\n\tToken.stringify = function stringify(o, language) {\r\n\t\tif (typeof o == 'string') {\r\n\t\t\treturn o;\r\n\t\t}\r\n\t\tif (Array.isArray(o)) {\r\n\t\t\tvar s = '';\r\n\t\t\to.forEach(function (e) {\r\n\t\t\t\ts += stringify(e, language);\r\n\t\t\t});\r\n\t\t\treturn s;\r\n\t\t}\r\n\r\n\t\tvar env = {\r\n\t\t\ttype: o.type,\r\n\t\t\tcontent: stringify(o.content, language),\r\n\t\t\ttag: 'span',\r\n\t\t\tclasses: ['token', o.type],\r\n\t\t\tattributes: {},\r\n\t\t\tlanguage: language\r\n\t\t};\r\n\r\n\t\tvar aliases = o.alias;\r\n\t\tif (aliases) {\r\n\t\t\tif (Array.isArray(aliases)) {\r\n\t\t\t\tArray.prototype.push.apply(env.classes, aliases);\r\n\t\t\t} else {\r\n\t\t\t\tenv.classes.push(aliases);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_.hooks.run('wrap', env);\r\n\r\n\t\tvar attributes = '';\r\n\t\tfor (var name in env.attributes) {\r\n\t\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\r\n\t\t}\r\n\r\n\t\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\r\n\t};\r\n\r\n\t/**\r\n\t * @param {RegExp} pattern\r\n\t * @param {number} pos\r\n\t * @param {string} text\r\n\t * @param {boolean} lookbehind\r\n\t * @returns {RegExpExecArray | null}\r\n\t */\r\n\tfunction matchPattern(pattern, pos, text, lookbehind) {\r\n\t\tpattern.lastIndex = pos;\r\n\t\tvar match = pattern.exec(text);\r\n\t\tif (match && lookbehind && match[1]) {\r\n\t\t\t// change the match to remove the text matched by the Prism lookbehind group\r\n\t\t\tvar lookbehindLength = match[1].length;\r\n\t\t\tmatch.index += lookbehindLength;\r\n\t\t\tmatch[0] = match[0].slice(lookbehindLength);\r\n\t\t}\r\n\t\treturn match;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} text\r\n\t * @param {LinkedList<string | Token>} tokenList\r\n\t * @param {any} grammar\r\n\t * @param {LinkedListNode<string | Token>} startNode\r\n\t * @param {number} startPos\r\n\t * @param {RematchOptions} [rematch]\r\n\t * @returns {void}\r\n\t * @private\r\n\t *\r\n\t * @typedef RematchOptions\r\n\t * @property {string} cause\r\n\t * @property {number} reach\r\n\t */\r\n\tfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\r\n\t\tfor (var token in grammar) {\r\n\t\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tvar patterns = grammar[token];\r\n\t\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];\r\n\r\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\r\n\t\t\t\tif (rematch && rematch.cause == token + ',' + j) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar patternObj = patterns[j];\r\n\t\t\t\tvar inside = patternObj.inside;\r\n\t\t\t\tvar lookbehind = !!patternObj.lookbehind;\r\n\t\t\t\tvar greedy = !!patternObj.greedy;\r\n\t\t\t\tvar alias = patternObj.alias;\r\n\r\n\t\t\t\tif (greedy && !patternObj.pattern.global) {\r\n\t\t\t\t\t// Without the global flag, lastIndex won't work\r\n\t\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\r\n\t\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/** @type {RegExp} */\r\n\t\t\t\tvar pattern = patternObj.pattern || patternObj;\r\n\r\n\t\t\t\tfor ( // iterate the token list and keep track of the current token/string position\r\n\t\t\t\t\tvar currentNode = startNode.next, pos = startPos;\r\n\t\t\t\t\tcurrentNode !== tokenList.tail;\r\n\t\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next\r\n\t\t\t\t) {\r\n\r\n\t\t\t\t\tif (rematch && pos >= rematch.reach) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar str = currentNode.value;\r\n\r\n\t\t\t\t\tif (tokenList.length > text.length) {\r\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (str instanceof Token) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween\r\n\t\t\t\t\tvar match;\r\n\r\n\t\t\t\t\tif (greedy) {\r\n\t\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);\r\n\t\t\t\t\t\tif (!match || match.index >= text.length) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar from = match.index;\r\n\t\t\t\t\t\tvar to = match.index + match[0].length;\r\n\t\t\t\t\t\tvar p = pos;\r\n\r\n\t\t\t\t\t\t// find the node that contains the match\r\n\t\t\t\t\t\tp += currentNode.value.length;\r\n\t\t\t\t\t\twhile (from >= p) {\r\n\t\t\t\t\t\t\tcurrentNode = currentNode.next;\r\n\t\t\t\t\t\t\tp += currentNode.value.length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// adjust pos (and p)\r\n\t\t\t\t\t\tp -= currentNode.value.length;\r\n\t\t\t\t\t\tpos = p;\r\n\r\n\t\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\r\n\t\t\t\t\t\tif (currentNode.value instanceof Token) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// find the last node which is affected by this match\r\n\t\t\t\t\t\tfor (\r\n\t\t\t\t\t\t\tvar k = currentNode;\r\n\t\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');\r\n\t\t\t\t\t\t\tk = k.next\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tremoveCount++;\r\n\t\t\t\t\t\t\tp += k.value.length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tremoveCount--;\r\n\r\n\t\t\t\t\t\t// replace with the new match\r\n\t\t\t\t\t\tstr = text.slice(pos, p);\r\n\t\t\t\t\t\tmatch.index -= pos;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);\r\n\t\t\t\t\t\tif (!match) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// eslint-disable-next-line no-redeclare\r\n\t\t\t\t\tvar from = match.index;\r\n\t\t\t\t\tvar matchStr = match[0];\r\n\t\t\t\t\tvar before = str.slice(0, from);\r\n\t\t\t\t\tvar after = str.slice(from + matchStr.length);\r\n\r\n\t\t\t\t\tvar reach = pos + str.length;\r\n\t\t\t\t\tif (rematch && reach > rematch.reach) {\r\n\t\t\t\t\t\trematch.reach = reach;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar removeFrom = currentNode.prev;\r\n\r\n\t\t\t\t\tif (before) {\r\n\t\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);\r\n\t\t\t\t\t\tpos += before.length;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);\r\n\r\n\t\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\r\n\t\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);\r\n\r\n\t\t\t\t\tif (after) {\r\n\t\t\t\t\t\taddAfter(tokenList, currentNode, after);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (removeCount > 1) {\r\n\t\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\r\n\t\t\t\t\t\t// this can only happen if the current pattern is greedy\r\n\r\n\t\t\t\t\t\t/** @type {RematchOptions} */\r\n\t\t\t\t\t\tvar nestedRematch = {\r\n\t\t\t\t\t\t\tcause: token + ',' + j,\r\n\t\t\t\t\t\t\treach: reach\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\r\n\r\n\t\t\t\t\t\t// the reach might have been extended because of the rematching\r\n\t\t\t\t\t\tif (rematch && nestedRematch.reach > rematch.reach) {\r\n\t\t\t\t\t\t\trematch.reach = nestedRematch.reach;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @typedef LinkedListNode\r\n\t * @property {T} value\r\n\t * @property {LinkedListNode<T> | null} prev The previous node.\r\n\t * @property {LinkedListNode<T> | null} next The next node.\r\n\t * @template T\r\n\t * @private\r\n\t */\r\n\r\n\t/**\r\n\t * @template T\r\n\t * @private\r\n\t */\r\n\tfunction LinkedList() {\r\n\t\t/** @type {LinkedListNode<T>} */\r\n\t\tvar head = { value: null, prev: null, next: null };\r\n\t\t/** @type {LinkedListNode<T>} */\r\n\t\tvar tail = { value: null, prev: head, next: null };\r\n\t\thead.next = tail;\r\n\r\n\t\t/** @type {LinkedListNode<T>} */\r\n\t\tthis.head = head;\r\n\t\t/** @type {LinkedListNode<T>} */\r\n\t\tthis.tail = tail;\r\n\t\tthis.length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a new node with the given value to the list.\r\n\t *\r\n\t * @param {LinkedList<T>} list\r\n\t * @param {LinkedListNode<T>} node\r\n\t * @param {T} value\r\n\t * @returns {LinkedListNode<T>} The added node.\r\n\t * @template T\r\n\t */\r\n\tfunction addAfter(list, node, value) {\r\n\t\t// assumes that node != list.tail && values.length >= 0\r\n\t\tvar next = node.next;\r\n\r\n\t\tvar newNode = { value: value, prev: node, next: next };\r\n\t\tnode.next = newNode;\r\n\t\tnext.prev = newNode;\r\n\t\tlist.length++;\r\n\r\n\t\treturn newNode;\r\n\t}\r\n\t/**\r\n\t * Removes `count` nodes after the given node. The given node will not be removed.\r\n\t *\r\n\t * @param {LinkedList<T>} list\r\n\t * @param {LinkedListNode<T>} node\r\n\t * @param {number} count\r\n\t * @template T\r\n\t */\r\n\tfunction removeRange(list, node, count) {\r\n\t\tvar next = node.next;\r\n\t\tfor (var i = 0; i < count && next !== list.tail; i++) {\r\n\t\t\tnext = next.next;\r\n\t\t}\r\n\t\tnode.next = next;\r\n\t\tnext.prev = node;\r\n\t\tlist.length -= i;\r\n\t}\r\n\t/**\r\n\t * @param {LinkedList<T>} list\r\n\t * @returns {T[]}\r\n\t * @template T\r\n\t */\r\n\tfunction toArray(list) {\r\n\t\tvar array = [];\r\n\t\tvar node = list.head.next;\r\n\t\twhile (node !== list.tail) {\r\n\t\t\tarray.push(node.value);\r\n\t\t\tnode = node.next;\r\n\t\t}\r\n\t\treturn array;\r\n\t}\r\n\r\n\r\n\tif (!_self.document) {\r\n\t\tif (!_self.addEventListener) {\r\n\t\t\t// in Node.js\r\n\t\t\treturn _;\r\n\t\t}\r\n\r\n\t\tif (!_.disableWorkerMessageHandler) {\r\n\t\t\t// In worker\r\n\t\t\t_self.addEventListener('message', function (evt) {\r\n\t\t\t\tvar message = JSON.parse(evt.data);\r\n\t\t\t\tvar lang = message.language;\r\n\t\t\t\tvar code = message.code;\r\n\t\t\t\tvar immediateClose = message.immediateClose;\r\n\r\n\t\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));\r\n\t\t\t\tif (immediateClose) {\r\n\t\t\t\t\t_self.close();\r\n\t\t\t\t}\r\n\t\t\t}, false);\r\n\t\t}\r\n\r\n\t\treturn _;\r\n\t}\r\n\r\n\t// Get current script and highlight\r\n\tvar script = _.util.currentScript();\r\n\r\n\tif (script) {\r\n\t\t_.filename = script.src;\r\n\r\n\t\tif (script.hasAttribute('data-manual')) {\r\n\t\t\t_.manual = true;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction highlightAutomaticallyCallback() {\r\n\t\tif (!_.manual) {\r\n\t\t\t_.highlightAll();\r\n\t\t}\r\n\t}\r\n\r\n\tif (!_.manual) {\r\n\t\t// If the document state is \"loading\", then we'll use DOMContentLoaded.\r\n\t\t// If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\r\n\t\t// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\r\n\t\t// might take longer one animation frame to execute which can create a race condition where only some plugins have\r\n\t\t// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\r\n\t\t// See https://github.com/PrismJS/prism/issues/2102\r\n\t\tvar readyState = document.readyState;\r\n\t\tif (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\r\n\t\t\tdocument.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\r\n\t\t} else {\r\n\t\t\tif (window.requestAnimationFrame) {\r\n\t\t\t\twindow.requestAnimationFrame(highlightAutomaticallyCallback);\r\n\t\t\t} else {\r\n\t\t\t\twindow.setTimeout(highlightAutomaticallyCallback, 16);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn _;\r\n\r\n}(_self));\r\n\r\nif (typeof module !== 'undefined' && module.exports) {\r\n\tmodule.exports = Prism;\r\n}\r\n\r\n// hack for components to work correctly in node.js\r\nif (typeof global !== 'undefined') {\r\n\tglobal.Prism = Prism;\r\n}\r\n\r\n// some additional documentation/types\r\n\r\n/**\r\n * The expansion of a simple `RegExp` literal to support additional properties.\r\n *\r\n * @typedef GrammarToken\r\n * @property {RegExp} pattern The regular expression of the token.\r\n * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\r\n * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\r\n * @property {boolean} [greedy=false] Whether the token is greedy.\r\n * @property {string|string[]} [alias] An optional alias or list of aliases.\r\n * @property {Grammar} [inside] The nested grammar of this token.\r\n *\r\n * The `inside` grammar will be used to tokenize the text value of each token of this kind.\r\n *\r\n * This can be used to make nested and even recursive language definitions.\r\n *\r\n * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\r\n * each another.\r\n * @global\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef Grammar\r\n * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\r\n * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\r\n * @global\r\n * @public\r\n */\r\n\r\n/**\r\n * A function which will invoked after an element was successfully highlighted.\r\n *\r\n * @callback HighlightCallback\r\n * @param {Element} element The element successfully highlighted.\r\n * @returns {void}\r\n * @global\r\n * @public\r\n */\r\n\r\n/**\r\n * @callback HookCallback\r\n * @param {Object<string, any>} env The environment variables of the hook.\r\n * @returns {void}\r\n * @global\r\n * @public\r\n */\r\n\r\n\r\n/* **********************************************\r\n     Begin prism-markup.js\r\n********************************************** */\r\n\r\nPrism.languages.markup = {\r\n\t'comment': {\r\n\t\tpattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\r\n\t\tgreedy: true\r\n\t},\r\n\t'prolog': {\r\n\t\tpattern: /<\\?[\\s\\S]+?\\?>/,\r\n\t\tgreedy: true\r\n\t},\r\n\t'doctype': {\r\n\t\t// https://www.w3.org/TR/xml/#NT-doctypedecl\r\n\t\tpattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\r\n\t\tgreedy: true,\r\n\t\tinside: {\r\n\t\t\t'internal-subset': {\r\n\t\t\t\tpattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tgreedy: true,\r\n\t\t\t\tinside: null // see below\r\n\t\t\t},\r\n\t\t\t'string': {\r\n\t\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,\r\n\t\t\t\tgreedy: true\r\n\t\t\t},\r\n\t\t\t'punctuation': /^<!|>$|[[\\]]/,\r\n\t\t\t'doctype-tag': /^DOCTYPE/i,\r\n\t\t\t'name': /[^\\s<>'\"]+/\r\n\t\t}\r\n\t},\r\n\t'cdata': {\r\n\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\r\n\t\tgreedy: true\r\n\t},\r\n\t'tag': {\r\n\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\r\n\t\tgreedy: true,\r\n\t\tinside: {\r\n\t\t\t'tag': {\r\n\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'punctuation': /^<\\/?/,\r\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'special-attr': [],\r\n\t\t\t'attr-value': {\r\n\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'punctuation': [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpattern: /^=/,\r\n\t\t\t\t\t\t\talias: 'attr-equals'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpattern: /^(\\s*)[\"']|[\"']$/,\r\n\t\t\t\t\t\t\tlookbehind: true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'punctuation': /\\/?>/,\r\n\t\t\t'attr-name': {\r\n\t\t\t\tpattern: /[^\\s>\\/]+/,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t},\r\n\t'entity': [\r\n\t\t{\r\n\t\t\tpattern: /&[\\da-z]{1,8};/i,\r\n\t\t\talias: 'named-entity'\r\n\t\t},\r\n\t\t/&#x?[\\da-f]{1,8};/i\r\n\t]\r\n};\r\n\r\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\r\n\tPrism.languages.markup['entity'];\r\nPrism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;\r\n\r\n// Plugin to make entity title show the real entity, idea by Roman Komarov\r\nPrism.hooks.add('wrap', function (env) {\r\n\r\n\tif (env.type === 'entity') {\r\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\r\n\t}\r\n});\r\n\r\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\r\n\t/**\r\n\t * Adds an inlined language to markup.\r\n\t *\r\n\t * An example of an inlined language is CSS with `<style>` tags.\r\n\t *\r\n\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\r\n\t * case insensitive.\r\n\t * @param {string} lang The language key.\r\n\t * @example\r\n\t * addInlined('style', 'css');\r\n\t */\r\n\tvalue: function addInlined(tagName, lang) {\r\n\t\tvar includedCdataInside = {};\r\n\t\tincludedCdataInside['language-' + lang] = {\r\n\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: Prism.languages[lang]\r\n\t\t};\r\n\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\r\n\r\n\t\tvar inside = {\r\n\t\t\t'included-cdata': {\r\n\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\r\n\t\t\t\tinside: includedCdataInside\r\n\t\t\t}\r\n\t\t};\r\n\t\tinside['language-' + lang] = {\r\n\t\t\tpattern: /[\\s\\S]+/,\r\n\t\t\tinside: Prism.languages[lang]\r\n\t\t};\r\n\r\n\t\tvar def = {};\r\n\t\tdef[tagName] = {\r\n\t\t\tpattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: inside\r\n\t\t};\r\n\r\n\t\tPrism.languages.insertBefore('markup', 'cdata', def);\r\n\t}\r\n});\r\nObject.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\r\n\t/**\r\n\t * Adds an pattern to highlight languages embedded in HTML attributes.\r\n\t *\r\n\t * An example of an inlined language is CSS with `style` attributes.\r\n\t *\r\n\t * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\r\n\t * case insensitive.\r\n\t * @param {string} lang The language key.\r\n\t * @example\r\n\t * addAttribute('style', 'css');\r\n\t */\r\n\tvalue: function (attrName, lang) {\r\n\t\tPrism.languages.markup.tag.inside['special-attr'].push({\r\n\t\t\tpattern: RegExp(\r\n\t\t\t\t/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,\r\n\t\t\t\t'i'\r\n\t\t\t),\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'attr-name': /^[^\\s=]+/,\r\n\t\t\t\t'attr-value': {\r\n\t\t\t\t\tpattern: /=[\\s\\S]+/,\r\n\t\t\t\t\tinside: {\r\n\t\t\t\t\t\t'value': {\r\n\t\t\t\t\t\t\tpattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\r\n\t\t\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\t\t\talias: [lang, 'language-' + lang],\r\n\t\t\t\t\t\t\tinside: Prism.languages[lang]\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t'punctuation': [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpattern: /^=/,\r\n\t\t\t\t\t\t\t\talias: 'attr-equals'\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t/\"|'/\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n});\r\n\r\nPrism.languages.html = Prism.languages.markup;\r\nPrism.languages.mathml = Prism.languages.markup;\r\nPrism.languages.svg = Prism.languages.markup;\r\n\r\nPrism.languages.xml = Prism.languages.extend('markup', {});\r\nPrism.languages.ssml = Prism.languages.xml;\r\nPrism.languages.atom = Prism.languages.xml;\r\nPrism.languages.rss = Prism.languages.xml;\r\n\r\n\r\n/* **********************************************\r\n     Begin prism-css.js\r\n********************************************** */\r\n\r\n(function (Prism) {\r\n\r\n\tvar string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\r\n\r\n\tPrism.languages.css = {\r\n\t\t'comment': /\\/\\*[\\s\\S]*?\\*\\//,\r\n\t\t'atrule': {\r\n\t\t\tpattern: RegExp('@[\\\\w-](?:' + /[^;{\\s\"']|\\s+(?!\\s)/.source + '|' + string.source + ')*?' + /(?:;|(?=\\s*\\{))/.source),\r\n\t\t\tinside: {\r\n\t\t\t\t'rule': /^@[\\w-]+/,\r\n\t\t\t\t'selector-function-argument': {\r\n\t\t\t\t\tpattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\r\n\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\talias: 'selector'\r\n\t\t\t\t},\r\n\t\t\t\t'keyword': {\r\n\t\t\t\t\tpattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\r\n\t\t\t\t\tlookbehind: true\r\n\t\t\t\t}\r\n\t\t\t\t// See rest below\r\n\t\t\t}\r\n\t\t},\r\n\t\t'url': {\r\n\t\t\t// https://drafts.csswg.org/css-values-3/#urls\r\n\t\t\tpattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'function': /^url/i,\r\n\t\t\t\t'punctuation': /^\\(|\\)$/,\r\n\t\t\t\t'string': {\r\n\t\t\t\t\tpattern: RegExp('^' + string.source + '$'),\r\n\t\t\t\t\talias: 'url'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t'selector': {\r\n\t\t\tpattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t'string': {\r\n\t\t\tpattern: string,\r\n\t\t\tgreedy: true\r\n\t\t},\r\n\t\t'property': {\r\n\t\t\tpattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t'important': /!important\\b/i,\r\n\t\t'function': {\r\n\t\t\tpattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t'punctuation': /[(){};:,]/\r\n\t};\r\n\r\n\tPrism.languages.css['atrule'].inside.rest = Prism.languages.css;\r\n\r\n\tvar markup = Prism.languages.markup;\r\n\tif (markup) {\r\n\t\tmarkup.tag.addInlined('style', 'css');\r\n\t\tmarkup.tag.addAttribute('style', 'css');\r\n\t}\r\n\r\n}(Prism));\r\n\r\n\r\n/* **********************************************\r\n     Begin prism-clike.js\r\n********************************************** */\r\n\r\nPrism.languages.clike = {\r\n\t'comment': [\r\n\t\t{\r\n\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true\r\n\t\t},\r\n\t\t{\r\n\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true\r\n\t\t}\r\n\t],\r\n\t'string': {\r\n\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\r\n\t\tgreedy: true\r\n\t},\r\n\t'class-name': {\r\n\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\r\n\t\tlookbehind: true,\r\n\t\tinside: {\r\n\t\t\t'punctuation': /[.\\\\]/\r\n\t\t}\r\n\t},\r\n\t'keyword': /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\r\n\t'boolean': /\\b(?:false|true)\\b/,\r\n\t'function': /\\b\\w+(?=\\()/,\r\n\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\r\n\t'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\r\n\t'punctuation': /[{}[\\];(),.:]/\r\n};\r\n\r\n\r\n/* **********************************************\r\n     Begin prism-javascript.js\r\n********************************************** */\r\n\r\nPrism.languages.javascript = Prism.languages.extend('clike', {\r\n\t'class-name': [\r\n\t\tPrism.languages.clike['class-name'],\r\n\t\t{\r\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\r\n\t\t\tlookbehind: true\r\n\t\t}\r\n\t],\r\n\t'keyword': [\r\n\t\t{\r\n\t\t\tpattern: /((?:^|\\})\\s*)catch\\b/,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t{\r\n\t\t\tpattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t],\r\n\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\r\n\t'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\r\n\t'number': {\r\n\t\tpattern: RegExp(\r\n\t\t\t/(^|[^\\w$])/.source +\r\n\t\t\t'(?:' +\r\n\t\t\t(\r\n\t\t\t\t// constant\r\n\t\t\t\t/NaN|Infinity/.source +\r\n\t\t\t\t'|' +\r\n\t\t\t\t// binary integer\r\n\t\t\t\t/0[bB][01]+(?:_[01]+)*n?/.source +\r\n\t\t\t\t'|' +\r\n\t\t\t\t// octal integer\r\n\t\t\t\t/0[oO][0-7]+(?:_[0-7]+)*n?/.source +\r\n\t\t\t\t'|' +\r\n\t\t\t\t// hexadecimal integer\r\n\t\t\t\t/0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source +\r\n\t\t\t\t'|' +\r\n\t\t\t\t// decimal bigint\r\n\t\t\t\t/\\d+(?:_\\d+)*n/.source +\r\n\t\t\t\t'|' +\r\n\t\t\t\t// decimal number (integer or float) but no bigint\r\n\t\t\t\t/(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source\r\n\t\t\t) +\r\n\t\t\t')' +\r\n\t\t\t/(?![\\w$])/.source\r\n\t\t),\r\n\t\tlookbehind: true\r\n\t},\r\n\t'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\r\n});\r\n\r\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\r\n\r\nPrism.languages.insertBefore('javascript', 'keyword', {\r\n\t'regex': {\r\n\t\tpattern: RegExp(\r\n\t\t\t// lookbehind\r\n\t\t\t// eslint-disable-next-line regexp/no-dupe-characters-character-class\r\n\t\t\t/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)/.source +\r\n\t\t\t// Regex pattern:\r\n\t\t\t// There are 2 regex patterns here. The RegExp set notation proposal added support for nested character\r\n\t\t\t// classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible\r\n\t\t\t// with the only syntax, so we have to define 2 different regex patterns.\r\n\t\t\t/\\//.source +\r\n\t\t\t'(?:' +\r\n\t\t\t/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}/.source +\r\n\t\t\t'|' +\r\n\t\t\t// `v` flag syntax. This supports 3 levels of nested character classes.\r\n\t\t\t/(?:\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.)*\\])*\\])*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source +\r\n\t\t\t')' +\r\n\t\t\t// lookahead\r\n\t\t\t/(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/.source\r\n\t\t),\r\n\t\tlookbehind: true,\r\n\t\tgreedy: true,\r\n\t\tinside: {\r\n\t\t\t'regex-source': {\r\n\t\t\t\tpattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\talias: 'language-regex',\r\n\t\t\t\tinside: Prism.languages.regex\r\n\t\t\t},\r\n\t\t\t'regex-delimiter': /^\\/|\\/$/,\r\n\t\t\t'regex-flags': /^[a-z]+$/,\r\n\t\t}\r\n\t},\r\n\t// This must be declared before keyword because we use \"function\" inside the look-forward\r\n\t'function-variable': {\r\n\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\r\n\t\talias: 'function'\r\n\t},\r\n\t'parameter': [\r\n\t\t{\r\n\t\t\tpattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: Prism.languages.javascript\r\n\t\t},\r\n\t\t{\r\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: Prism.languages.javascript\r\n\t\t},\r\n\t\t{\r\n\t\t\tpattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: Prism.languages.javascript\r\n\t\t},\r\n\t\t{\r\n\t\t\tpattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: Prism.languages.javascript\r\n\t\t}\r\n\t],\r\n\t'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\r\n});\r\n\r\nPrism.languages.insertBefore('javascript', 'string', {\r\n\t'hashbang': {\r\n\t\tpattern: /^#!.*/,\r\n\t\tgreedy: true,\r\n\t\talias: 'comment'\r\n\t},\r\n\t'template-string': {\r\n\t\tpattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\r\n\t\tgreedy: true,\r\n\t\tinside: {\r\n\t\t\t'template-punctuation': {\r\n\t\t\t\tpattern: /^`|`$/,\r\n\t\t\t\talias: 'string'\r\n\t\t\t},\r\n\t\t\t'interpolation': {\r\n\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'interpolation-punctuation': {\r\n\t\t\t\t\t\tpattern: /^\\$\\{|\\}$/,\r\n\t\t\t\t\t\talias: 'punctuation'\r\n\t\t\t\t\t},\r\n\t\t\t\t\trest: Prism.languages.javascript\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'string': /[\\s\\S]+/\r\n\t\t}\r\n\t},\r\n\t'string-property': {\r\n\t\tpattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\r\n\t\tlookbehind: true,\r\n\t\tgreedy: true,\r\n\t\talias: 'property'\r\n\t}\r\n});\r\n\r\nPrism.languages.insertBefore('javascript', 'operator', {\r\n\t'literal-property': {\r\n\t\tpattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\r\n\t\tlookbehind: true,\r\n\t\talias: 'property'\r\n\t},\r\n});\r\n\r\nif (Prism.languages.markup) {\r\n\tPrism.languages.markup.tag.addInlined('script', 'javascript');\r\n\r\n\t// add attribute support for all DOM events.\r\n\t// https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\r\n\tPrism.languages.markup.tag.addAttribute(\r\n\t\t/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,\r\n\t\t'javascript'\r\n\t);\r\n}\r\n\r\nPrism.languages.js = Prism.languages.javascript;\r\n\r\n\r\n/* **********************************************\r\n     Begin prism-file-highlight.js\r\n********************************************** */\r\n\r\n(function () {\r\n\r\n\tif (typeof Prism === 'undefined' || typeof document === 'undefined') {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\r\n\tif (!Element.prototype.matches) {\r\n\t\tElement.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\r\n\t}\r\n\r\n\tvar LOADING_MESSAGE = 'Loading…';\r\n\tvar FAILURE_MESSAGE = function (status, message) {\r\n\t\treturn '✖ Error ' + status + ' while fetching file: ' + message;\r\n\t};\r\n\tvar FAILURE_EMPTY_MESSAGE = '✖ Error: File does not exist or is empty';\r\n\r\n\tvar EXTENSIONS = {\r\n\t\t'js': 'javascript',\r\n\t\t'py': 'python',\r\n\t\t'rb': 'ruby',\r\n\t\t'ps1': 'powershell',\r\n\t\t'psm1': 'powershell',\r\n\t\t'sh': 'bash',\r\n\t\t'bat': 'batch',\r\n\t\t'h': 'c',\r\n\t\t'tex': 'latex'\r\n\t};\r\n\r\n\tvar STATUS_ATTR = 'data-src-status';\r\n\tvar STATUS_LOADING = 'loading';\r\n\tvar STATUS_LOADED = 'loaded';\r\n\tvar STATUS_FAILED = 'failed';\r\n\r\n\tvar SELECTOR = 'pre[data-src]:not([' + STATUS_ATTR + '=\"' + STATUS_LOADED + '\"])'\r\n\t\t+ ':not([' + STATUS_ATTR + '=\"' + STATUS_LOADING + '\"])';\r\n\r\n\t/**\r\n\t * Loads the given file.\r\n\t *\r\n\t * @param {string} src The URL or path of the source file to load.\r\n\t * @param {(result: string) => void} success\r\n\t * @param {(reason: string) => void} error\r\n\t */\r\n\tfunction loadFile(src, success, error) {\r\n\t\tvar xhr = new XMLHttpRequest();\r\n\t\txhr.open('GET', src, true);\r\n\t\txhr.onreadystatechange = function () {\r\n\t\t\tif (xhr.readyState == 4) {\r\n\t\t\t\tif (xhr.status < 400 && xhr.responseText) {\r\n\t\t\t\t\tsuccess(xhr.responseText);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (xhr.status >= 400) {\r\n\t\t\t\t\t\terror(FAILURE_MESSAGE(xhr.status, xhr.statusText));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\terror(FAILURE_EMPTY_MESSAGE);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\txhr.send(null);\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the given range.\r\n\t *\r\n\t * This returns a range with inclusive ends.\r\n\t *\r\n\t * @param {string | null | undefined} range\r\n\t * @returns {[number, number | undefined] | undefined}\r\n\t */\r\n\tfunction parseRange(range) {\r\n\t\tvar m = /^\\s*(\\d+)\\s*(?:(,)\\s*(?:(\\d+)\\s*)?)?$/.exec(range || '');\r\n\t\tif (m) {\r\n\t\t\tvar start = Number(m[1]);\r\n\t\t\tvar comma = m[2];\r\n\t\t\tvar end = m[3];\r\n\r\n\t\t\tif (!comma) {\r\n\t\t\t\treturn [start, start];\r\n\t\t\t}\r\n\t\t\tif (!end) {\r\n\t\t\t\treturn [start, undefined];\r\n\t\t\t}\r\n\t\t\treturn [start, Number(end)];\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tPrism.hooks.add('before-highlightall', function (env) {\r\n\t\tenv.selector += ', ' + SELECTOR;\r\n\t});\r\n\r\n\tPrism.hooks.add('before-sanity-check', function (env) {\r\n\t\tvar pre = /** @type {HTMLPreElement} */ (env.element);\r\n\t\tif (pre.matches(SELECTOR)) {\r\n\t\t\tenv.code = ''; // fast-path the whole thing and go to complete\r\n\r\n\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADING); // mark as loading\r\n\r\n\t\t\t// add code element with loading message\r\n\t\t\tvar code = pre.appendChild(document.createElement('CODE'));\r\n\t\t\tcode.textContent = LOADING_MESSAGE;\r\n\r\n\t\t\tvar src = pre.getAttribute('data-src');\r\n\r\n\t\t\tvar language = env.language;\r\n\t\t\tif (language === 'none') {\r\n\t\t\t\t// the language might be 'none' because there is no language set;\r\n\t\t\t\t// in this case, we want to use the extension as the language\r\n\t\t\t\tvar extension = (/\\.(\\w+)$/.exec(src) || [, 'none'])[1];\r\n\t\t\t\tlanguage = EXTENSIONS[extension] || extension;\r\n\t\t\t}\r\n\r\n\t\t\t// set language classes\r\n\t\t\tPrism.util.setLanguage(code, language);\r\n\t\t\tPrism.util.setLanguage(pre, language);\r\n\r\n\t\t\t// preload the language\r\n\t\t\tvar autoloader = Prism.plugins.autoloader;\r\n\t\t\tif (autoloader) {\r\n\t\t\t\tautoloader.loadLanguages(language);\r\n\t\t\t}\r\n\r\n\t\t\t// load file\r\n\t\t\tloadFile(\r\n\t\t\t\tsrc,\r\n\t\t\t\tfunction (text) {\r\n\t\t\t\t\t// mark as loaded\r\n\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADED);\r\n\r\n\t\t\t\t\t// handle data-range\r\n\t\t\t\t\tvar range = parseRange(pre.getAttribute('data-range'));\r\n\t\t\t\t\tif (range) {\r\n\t\t\t\t\t\tvar lines = text.split(/\\r\\n?|\\n/g);\r\n\r\n\t\t\t\t\t\t// the range is one-based and inclusive on both ends\r\n\t\t\t\t\t\tvar start = range[0];\r\n\t\t\t\t\t\tvar end = range[1] == null ? lines.length : range[1];\r\n\r\n\t\t\t\t\t\tif (start < 0) { start += lines.length; }\r\n\t\t\t\t\t\tstart = Math.max(0, Math.min(start - 1, lines.length));\r\n\t\t\t\t\t\tif (end < 0) { end += lines.length; }\r\n\t\t\t\t\t\tend = Math.max(0, Math.min(end, lines.length));\r\n\r\n\t\t\t\t\t\ttext = lines.slice(start, end).join('\\n');\r\n\r\n\t\t\t\t\t\t// add data-start for line numbers\r\n\t\t\t\t\t\tif (!pre.hasAttribute('data-start')) {\r\n\t\t\t\t\t\t\tpre.setAttribute('data-start', String(start + 1));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// highlight code\r\n\t\t\t\t\tcode.textContent = text;\r\n\t\t\t\t\tPrism.highlightElement(code);\r\n\t\t\t\t},\r\n\t\t\t\tfunction (error) {\r\n\t\t\t\t\t// mark as failed\r\n\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_FAILED);\r\n\r\n\t\t\t\t\tcode.textContent = error;\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\t});\r\n\r\n\tPrism.plugins.fileHighlight = {\r\n\t\t/**\r\n\t\t * Executes the File Highlight plugin for all matching `pre` elements under the given container.\r\n\t\t *\r\n\t\t * Note: Elements which are already loaded or currently loading will not be touched by this method.\r\n\t\t *\r\n\t\t * @param {ParentNode} [container=document]\r\n\t\t */\r\n\t\thighlight: function highlight(container) {\r\n\t\t\tvar elements = (container || document).querySelectorAll(SELECTOR);\r\n\r\n\t\t\tfor (var i = 0, element; (element = elements[i++]);) {\r\n\t\t\t\tPrism.highlightElement(element);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tvar logged = false;\r\n\t/** @deprecated Use `Prism.plugins.fileHighlight.highlight` instead. */\r\n\tPrism.fileHighlight = function () {\r\n\t\tif (!logged) {\r\n\t\t\tconsole.warn('Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.');\r\n\t\t\tlogged = true;\r\n\t\t}\r\n\t\tPrism.plugins.fileHighlight.highlight.apply(this, arguments);\r\n\t};\r\n\r\n}());\r\n", "Prism.languages.clike = {\r\n\t'comment': [\r\n\t\t{\r\n\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true\r\n\t\t},\r\n\t\t{\r\n\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true\r\n\t\t}\r\n\t],\r\n\t'string': {\r\n\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\r\n\t\tgreedy: true\r\n\t},\r\n\t'class-name': {\r\n\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\r\n\t\tlookbehind: true,\r\n\t\tinside: {\r\n\t\t\t'punctuation': /[.\\\\]/\r\n\t\t}\r\n\t},\r\n\t'keyword': /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\r\n\t'boolean': /\\b(?:false|true)\\b/,\r\n\t'function': /\\b\\w+(?=\\()/,\r\n\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\r\n\t'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\r\n\t'punctuation': /[{}[\\];(),.:]/\r\n};\r\n", "Prism.languages.javascript = Prism.languages.extend('clike', {\r\n\t'class-name': [\r\n\t\tPrism.languages.clike['class-name'],\r\n\t\t{\r\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\r\n\t\t\tlookbehind: true\r\n\t\t}\r\n\t],\r\n\t'keyword': [\r\n\t\t{\r\n\t\t\tpattern: /((?:^|\\})\\s*)catch\\b/,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t{\r\n\t\t\tpattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t],\r\n\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\r\n\t'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\r\n\t'number': {\r\n\t\tpattern: RegExp(\r\n\t\t\t/(^|[^\\w$])/.source +\r\n\t\t\t'(?:' +\r\n\t\t\t(\r\n\t\t\t\t// constant\r\n\t\t\t\t/NaN|Infinity/.source +\r\n\t\t\t\t'|' +\r\n\t\t\t\t// binary integer\r\n\t\t\t\t/0[bB][01]+(?:_[01]+)*n?/.source +\r\n\t\t\t\t'|' +\r\n\t\t\t\t// octal integer\r\n\t\t\t\t/0[oO][0-7]+(?:_[0-7]+)*n?/.source +\r\n\t\t\t\t'|' +\r\n\t\t\t\t// hexadecimal integer\r\n\t\t\t\t/0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source +\r\n\t\t\t\t'|' +\r\n\t\t\t\t// decimal bigint\r\n\t\t\t\t/\\d+(?:_\\d+)*n/.source +\r\n\t\t\t\t'|' +\r\n\t\t\t\t// decimal number (integer or float) but no bigint\r\n\t\t\t\t/(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source\r\n\t\t\t) +\r\n\t\t\t')' +\r\n\t\t\t/(?![\\w$])/.source\r\n\t\t),\r\n\t\tlookbehind: true\r\n\t},\r\n\t'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\r\n});\r\n\r\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\r\n\r\nPrism.languages.insertBefore('javascript', 'keyword', {\r\n\t'regex': {\r\n\t\tpattern: RegExp(\r\n\t\t\t// lookbehind\r\n\t\t\t// eslint-disable-next-line regexp/no-dupe-characters-character-class\r\n\t\t\t/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)/.source +\r\n\t\t\t// Regex pattern:\r\n\t\t\t// There are 2 regex patterns here. The RegExp set notation proposal added support for nested character\r\n\t\t\t// classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible\r\n\t\t\t// with the only syntax, so we have to define 2 different regex patterns.\r\n\t\t\t/\\//.source +\r\n\t\t\t'(?:' +\r\n\t\t\t/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}/.source +\r\n\t\t\t'|' +\r\n\t\t\t// `v` flag syntax. This supports 3 levels of nested character classes.\r\n\t\t\t/(?:\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.)*\\])*\\])*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source +\r\n\t\t\t')' +\r\n\t\t\t// lookahead\r\n\t\t\t/(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/.source\r\n\t\t),\r\n\t\tlookbehind: true,\r\n\t\tgreedy: true,\r\n\t\tinside: {\r\n\t\t\t'regex-source': {\r\n\t\t\t\tpattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\talias: 'language-regex',\r\n\t\t\t\tinside: Prism.languages.regex\r\n\t\t\t},\r\n\t\t\t'regex-delimiter': /^\\/|\\/$/,\r\n\t\t\t'regex-flags': /^[a-z]+$/,\r\n\t\t}\r\n\t},\r\n\t// This must be declared before keyword because we use \"function\" inside the look-forward\r\n\t'function-variable': {\r\n\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\r\n\t\talias: 'function'\r\n\t},\r\n\t'parameter': [\r\n\t\t{\r\n\t\t\tpattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: Prism.languages.javascript\r\n\t\t},\r\n\t\t{\r\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: Prism.languages.javascript\r\n\t\t},\r\n\t\t{\r\n\t\t\tpattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: Prism.languages.javascript\r\n\t\t},\r\n\t\t{\r\n\t\t\tpattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: Prism.languages.javascript\r\n\t\t}\r\n\t],\r\n\t'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\r\n});\r\n\r\nPrism.languages.insertBefore('javascript', 'string', {\r\n\t'hashbang': {\r\n\t\tpattern: /^#!.*/,\r\n\t\tgreedy: true,\r\n\t\talias: 'comment'\r\n\t},\r\n\t'template-string': {\r\n\t\tpattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\r\n\t\tgreedy: true,\r\n\t\tinside: {\r\n\t\t\t'template-punctuation': {\r\n\t\t\t\tpattern: /^`|`$/,\r\n\t\t\t\talias: 'string'\r\n\t\t\t},\r\n\t\t\t'interpolation': {\r\n\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'interpolation-punctuation': {\r\n\t\t\t\t\t\tpattern: /^\\$\\{|\\}$/,\r\n\t\t\t\t\t\talias: 'punctuation'\r\n\t\t\t\t\t},\r\n\t\t\t\t\trest: Prism.languages.javascript\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'string': /[\\s\\S]+/\r\n\t\t}\r\n\t},\r\n\t'string-property': {\r\n\t\tpattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\r\n\t\tlookbehind: true,\r\n\t\tgreedy: true,\r\n\t\talias: 'property'\r\n\t}\r\n});\r\n\r\nPrism.languages.insertBefore('javascript', 'operator', {\r\n\t'literal-property': {\r\n\t\tpattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\r\n\t\tlookbehind: true,\r\n\t\talias: 'property'\r\n\t},\r\n});\r\n\r\nif (Prism.languages.markup) {\r\n\tPrism.languages.markup.tag.addInlined('script', 'javascript');\r\n\r\n\t// add attribute support for all DOM events.\r\n\t// https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\r\n\tPrism.languages.markup.tag.addAttribute(\r\n\t\t/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,\r\n\t\t'javascript'\r\n\t);\r\n}\r\n\r\nPrism.languages.js = Prism.languages.javascript;\r\n", "Prism.languages.markup = {\r\n\t'comment': {\r\n\t\tpattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\r\n\t\tgreedy: true\r\n\t},\r\n\t'prolog': {\r\n\t\tpattern: /<\\?[\\s\\S]+?\\?>/,\r\n\t\tgreedy: true\r\n\t},\r\n\t'doctype': {\r\n\t\t// https://www.w3.org/TR/xml/#NT-doctypedecl\r\n\t\tpattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\r\n\t\tgreedy: true,\r\n\t\tinside: {\r\n\t\t\t'internal-subset': {\r\n\t\t\t\tpattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tgreedy: true,\r\n\t\t\t\tinside: null // see below\r\n\t\t\t},\r\n\t\t\t'string': {\r\n\t\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,\r\n\t\t\t\tgreedy: true\r\n\t\t\t},\r\n\t\t\t'punctuation': /^<!|>$|[[\\]]/,\r\n\t\t\t'doctype-tag': /^DOCTYPE/i,\r\n\t\t\t'name': /[^\\s<>'\"]+/\r\n\t\t}\r\n\t},\r\n\t'cdata': {\r\n\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\r\n\t\tgreedy: true\r\n\t},\r\n\t'tag': {\r\n\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\r\n\t\tgreedy: true,\r\n\t\tinside: {\r\n\t\t\t'tag': {\r\n\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'punctuation': /^<\\/?/,\r\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'special-attr': [],\r\n\t\t\t'attr-value': {\r\n\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'punctuation': [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpattern: /^=/,\r\n\t\t\t\t\t\t\talias: 'attr-equals'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpattern: /^(\\s*)[\"']|[\"']$/,\r\n\t\t\t\t\t\t\tlookbehind: true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'punctuation': /\\/?>/,\r\n\t\t\t'attr-name': {\r\n\t\t\t\tpattern: /[^\\s>\\/]+/,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t},\r\n\t'entity': [\r\n\t\t{\r\n\t\t\tpattern: /&[\\da-z]{1,8};/i,\r\n\t\t\talias: 'named-entity'\r\n\t\t},\r\n\t\t/&#x?[\\da-f]{1,8};/i\r\n\t]\r\n};\r\n\r\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\r\n\tPrism.languages.markup['entity'];\r\nPrism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;\r\n\r\n// Plugin to make entity title show the real entity, idea by Roman Komarov\r\nPrism.hooks.add('wrap', function (env) {\r\n\r\n\tif (env.type === 'entity') {\r\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\r\n\t}\r\n});\r\n\r\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\r\n\t/**\r\n\t * Adds an inlined language to markup.\r\n\t *\r\n\t * An example of an inlined language is CSS with `<style>` tags.\r\n\t *\r\n\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\r\n\t * case insensitive.\r\n\t * @param {string} lang The language key.\r\n\t * @example\r\n\t * addInlined('style', 'css');\r\n\t */\r\n\tvalue: function addInlined(tagName, lang) {\r\n\t\tvar includedCdataInside = {};\r\n\t\tincludedCdataInside['language-' + lang] = {\r\n\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: Prism.languages[lang]\r\n\t\t};\r\n\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\r\n\r\n\t\tvar inside = {\r\n\t\t\t'included-cdata': {\r\n\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\r\n\t\t\t\tinside: includedCdataInside\r\n\t\t\t}\r\n\t\t};\r\n\t\tinside['language-' + lang] = {\r\n\t\t\tpattern: /[\\s\\S]+/,\r\n\t\t\tinside: Prism.languages[lang]\r\n\t\t};\r\n\r\n\t\tvar def = {};\r\n\t\tdef[tagName] = {\r\n\t\t\tpattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: inside\r\n\t\t};\r\n\r\n\t\tPrism.languages.insertBefore('markup', 'cdata', def);\r\n\t}\r\n});\r\nObject.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\r\n\t/**\r\n\t * Adds an pattern to highlight languages embedded in HTML attributes.\r\n\t *\r\n\t * An example of an inlined language is CSS with `style` attributes.\r\n\t *\r\n\t * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\r\n\t * case insensitive.\r\n\t * @param {string} lang The language key.\r\n\t * @example\r\n\t * addAttribute('style', 'css');\r\n\t */\r\n\tvalue: function (attrName, lang) {\r\n\t\tPrism.languages.markup.tag.inside['special-attr'].push({\r\n\t\t\tpattern: RegExp(\r\n\t\t\t\t/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,\r\n\t\t\t\t'i'\r\n\t\t\t),\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'attr-name': /^[^\\s=]+/,\r\n\t\t\t\t'attr-value': {\r\n\t\t\t\t\tpattern: /=[\\s\\S]+/,\r\n\t\t\t\t\tinside: {\r\n\t\t\t\t\t\t'value': {\r\n\t\t\t\t\t\t\tpattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\r\n\t\t\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\t\t\talias: [lang, 'language-' + lang],\r\n\t\t\t\t\t\t\tinside: Prism.languages[lang]\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t'punctuation': [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpattern: /^=/,\r\n\t\t\t\t\t\t\t\talias: 'attr-equals'\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t/\"|'/\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n});\r\n\r\nPrism.languages.html = Prism.languages.markup;\r\nPrism.languages.mathml = Prism.languages.markup;\r\nPrism.languages.svg = Prism.languages.markup;\r\n\r\nPrism.languages.xml = Prism.languages.extend('markup', {});\r\nPrism.languages.ssml = Prism.languages.xml;\r\nPrism.languages.atom = Prism.languages.xml;\r\nPrism.languages.rss = Prism.languages.xml;\r\n", "(function (Prism) {\r\n\r\n\t// Allow only one line break\r\n\tvar inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source;\r\n\r\n\t/**\r\n\t * This function is intended for the creation of the bold or italic pattern.\r\n\t *\r\n\t * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\r\n\t *\r\n\t * _Note:_ Keep in mind that this adds a capturing group.\r\n\t *\r\n\t * @param {string} pattern\r\n\t * @returns {RegExp}\r\n\t */\r\n\tfunction createInline(pattern) {\r\n\t\tpattern = pattern.replace(/<inner>/g, function () { return inner; });\r\n\t\treturn RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\r\n\t}\r\n\r\n\r\n\tvar tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\r\n\tvar tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () { return tableCell; });\r\n\tvar tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\r\n\r\n\r\n\tPrism.languages.markdown = Prism.languages.extend('markup', {});\r\n\tPrism.languages.insertBefore('markdown', 'prolog', {\r\n\t\t'front-matter-block': {\r\n\t\t\tpattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'punctuation': /^---|---$/,\r\n\t\t\t\t'front-matter': {\r\n\t\t\t\t\tpattern: /\\S+(?:\\s+\\S+)*/,\r\n\t\t\t\t\talias: ['yaml', 'language-yaml'],\r\n\t\t\t\t\tinside: Prism.languages.yaml\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t'blockquote': {\r\n\t\t\t// > ...\r\n\t\t\tpattern: /^>(?:[\\t ]*>)*/m,\r\n\t\t\talias: 'punctuation'\r\n\t\t},\r\n\t\t'table': {\r\n\t\t\tpattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\r\n\t\t\tinside: {\r\n\t\t\t\t'table-data-rows': {\r\n\t\t\t\t\tpattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\r\n\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\tinside: {\r\n\t\t\t\t\t\t'table-data': {\r\n\t\t\t\t\t\t\tpattern: RegExp(tableCell),\r\n\t\t\t\t\t\t\tinside: Prism.languages.markdown\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t'punctuation': /\\|/\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t'table-line': {\r\n\t\t\t\t\tpattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\r\n\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\tinside: {\r\n\t\t\t\t\t\t'punctuation': /\\||:?-{3,}:?/\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t'table-header-row': {\r\n\t\t\t\t\tpattern: RegExp('^' + tableRow + '$'),\r\n\t\t\t\t\tinside: {\r\n\t\t\t\t\t\t'table-header': {\r\n\t\t\t\t\t\t\tpattern: RegExp(tableCell),\r\n\t\t\t\t\t\t\talias: 'important',\r\n\t\t\t\t\t\t\tinside: Prism.languages.markdown\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t'punctuation': /\\|/\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t'code': [\r\n\t\t\t{\r\n\t\t\t\t// Prefixed by 4 spaces or 1 tab and preceded by an empty line\r\n\t\t\t\tpattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\talias: 'keyword'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t// ```optional language\r\n\t\t\t\t// code block\r\n\t\t\t\t// ```\r\n\t\t\t\tpattern: /^```[\\s\\S]*?^```$/m,\r\n\t\t\t\tgreedy: true,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'code-block': {\r\n\t\t\t\t\t\tpattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\r\n\t\t\t\t\t\tlookbehind: true\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'code-language': {\r\n\t\t\t\t\t\tpattern: /^(```).+/,\r\n\t\t\t\t\t\tlookbehind: true\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'punctuation': /```/\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t'title': [\r\n\t\t\t{\r\n\t\t\t\t// title 1\r\n\t\t\t\t// =======\r\n\r\n\t\t\t\t// title 2\r\n\t\t\t\t// -------\r\n\t\t\t\tpattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\r\n\t\t\t\talias: 'important',\r\n\t\t\t\tinside: {\r\n\t\t\t\t\tpunctuation: /==+$|--+$/\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t// # title 1\r\n\t\t\t\t// ###### title 6\r\n\t\t\t\tpattern: /(^\\s*)#.+/m,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\talias: 'important',\r\n\t\t\t\tinside: {\r\n\t\t\t\t\tpunctuation: /^#+|#+$/\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t'hr': {\r\n\t\t\t// ***\r\n\t\t\t// ---\r\n\t\t\t// * * *\r\n\t\t\t// -----------\r\n\t\t\tpattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\r\n\t\t\tlookbehind: true,\r\n\t\t\talias: 'punctuation'\r\n\t\t},\r\n\t\t'list': {\r\n\t\t\t// * item\r\n\t\t\t// + item\r\n\t\t\t// - item\r\n\t\t\t// 1. item\r\n\t\t\tpattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\r\n\t\t\tlookbehind: true,\r\n\t\t\talias: 'punctuation'\r\n\t\t},\r\n\t\t'url-reference': {\r\n\t\t\t// [id]: http://example.com \"Optional title\"\r\n\t\t\t// [id]: http://example.com 'Optional title'\r\n\t\t\t// [id]: http://example.com (Optional title)\r\n\t\t\t// [id]: <http://example.com> \"Optional title\"\r\n\t\t\tpattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\r\n\t\t\tinside: {\r\n\t\t\t\t'variable': {\r\n\t\t\t\t\tpattern: /^(!?\\[)[^\\]]+/,\r\n\t\t\t\t\tlookbehind: true\r\n\t\t\t\t},\r\n\t\t\t\t'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\r\n\t\t\t\t'punctuation': /^[\\[\\]!:]|[<>]/\r\n\t\t\t},\r\n\t\t\talias: 'url'\r\n\t\t},\r\n\t\t'bold': {\r\n\t\t\t// **strong**\r\n\t\t\t// __strong__\r\n\r\n\t\t\t// allow one nested instance of italic text using the same delimiter\r\n\t\t\tpattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'content': {\r\n\t\t\t\t\tpattern: /(^..)[\\s\\S]+(?=..$)/,\r\n\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\tinside: {} // see below\r\n\t\t\t\t},\r\n\t\t\t\t'punctuation': /\\*\\*|__/\r\n\t\t\t}\r\n\t\t},\r\n\t\t'italic': {\r\n\t\t\t// *em*\r\n\t\t\t// _em_\r\n\r\n\t\t\t// allow one nested instance of bold text using the same delimiter\r\n\t\t\tpattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'content': {\r\n\t\t\t\t\tpattern: /(^.)[\\s\\S]+(?=.$)/,\r\n\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\tinside: {} // see below\r\n\t\t\t\t},\r\n\t\t\t\t'punctuation': /[*_]/\r\n\t\t\t}\r\n\t\t},\r\n\t\t'strike': {\r\n\t\t\t// ~~strike through~~\r\n\t\t\t// ~strike~\r\n\t\t\t// eslint-disable-next-line regexp/strict\r\n\t\t\tpattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'content': {\r\n\t\t\t\t\tpattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\r\n\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\tinside: {} // see below\r\n\t\t\t\t},\r\n\t\t\t\t'punctuation': /~~?/\r\n\t\t\t}\r\n\t\t},\r\n\t\t'code-snippet': {\r\n\t\t\t// `code`\r\n\t\t\t// ``code``\r\n\t\t\tpattern: /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true,\r\n\t\t\talias: ['code', 'keyword']\r\n\t\t},\r\n\t\t'url': {\r\n\t\t\t// [example](http://example.com \"Optional title\")\r\n\t\t\t// [example][id]\r\n\t\t\t// [example] [id]\r\n\t\t\tpattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'operator': /^!/,\r\n\t\t\t\t'content': {\r\n\t\t\t\t\tpattern: /(^\\[)[^\\]]+(?=\\])/,\r\n\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\tinside: {} // see below\r\n\t\t\t\t},\r\n\t\t\t\t'variable': {\r\n\t\t\t\t\tpattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\r\n\t\t\t\t\tlookbehind: true\r\n\t\t\t\t},\r\n\t\t\t\t'url': {\r\n\t\t\t\t\tpattern: /(^\\]\\()[^\\s)]+/,\r\n\t\t\t\t\tlookbehind: true\r\n\t\t\t\t},\r\n\t\t\t\t'string': {\r\n\t\t\t\t\tpattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\r\n\t\t\t\t\tlookbehind: true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\t['url', 'bold', 'italic', 'strike'].forEach(function (token) {\r\n\t\t['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {\r\n\t\t\tif (token !== inside) {\r\n\t\t\t\tPrism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\r\n\tPrism.hooks.add('after-tokenize', function (env) {\r\n\t\tif (env.language !== 'markdown' && env.language !== 'md') {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tfunction walkTokens(tokens) {\r\n\t\t\tif (!tokens || typeof tokens === 'string') {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tfor (var i = 0, l = tokens.length; i < l; i++) {\r\n\t\t\t\tvar token = tokens[i];\r\n\r\n\t\t\t\tif (token.type !== 'code') {\r\n\t\t\t\t\twalkTokens(token.content);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\r\n\t\t\t\t * is optional. But the grammar is defined so that there is only one case we have to handle:\r\n\t\t\t\t *\r\n\t\t\t\t * token.content = [\r\n\t\t\t\t *     <span class=\"punctuation\">```</span>,\r\n\t\t\t\t *     <span class=\"code-language\">xxxx</span>,\r\n\t\t\t\t *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\r\n\t\t\t\t *     <span class=\"code-block\">...</span>,\r\n\t\t\t\t *     '\\n', // exactly one new lines again\r\n\t\t\t\t *     <span class=\"punctuation\">```</span>\r\n\t\t\t\t * ];\r\n\t\t\t\t */\r\n\r\n\t\t\t\tvar codeLang = token.content[1];\r\n\t\t\t\tvar codeBlock = token.content[3];\r\n\r\n\t\t\t\tif (codeLang && codeBlock &&\r\n\t\t\t\t\tcodeLang.type === 'code-language' && codeBlock.type === 'code-block' &&\r\n\t\t\t\t\ttypeof codeLang.content === 'string') {\r\n\r\n\t\t\t\t\t// this might be a language that Prism does not support\r\n\r\n\t\t\t\t\t// do some replacements to support C++, C#, and F#\r\n\t\t\t\t\tvar lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp');\r\n\t\t\t\t\t// only use the first word\r\n\t\t\t\t\tlang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\r\n\t\t\t\t\tvar alias = 'language-' + lang;\r\n\r\n\t\t\t\t\t// add alias\r\n\t\t\t\t\tif (!codeBlock.alias) {\r\n\t\t\t\t\t\tcodeBlock.alias = [alias];\r\n\t\t\t\t\t} else if (typeof codeBlock.alias === 'string') {\r\n\t\t\t\t\t\tcodeBlock.alias = [codeBlock.alias, alias];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcodeBlock.alias.push(alias);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twalkTokens(env.tokens);\r\n\t});\r\n\r\n\tPrism.hooks.add('wrap', function (env) {\r\n\t\tif (env.type !== 'code-block') {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar codeLang = '';\r\n\t\tfor (var i = 0, l = env.classes.length; i < l; i++) {\r\n\t\t\tvar cls = env.classes[i];\r\n\t\t\tvar match = /language-(.+)/.exec(cls);\r\n\t\t\tif (match) {\r\n\t\t\t\tcodeLang = match[1];\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar grammar = Prism.languages[codeLang];\r\n\r\n\t\tif (!grammar) {\r\n\t\t\tif (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\r\n\t\t\t\tvar id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\r\n\t\t\t\tenv.attributes['id'] = id;\r\n\r\n\t\t\t\tPrism.plugins.autoloader.loadLanguages(codeLang, function () {\r\n\t\t\t\t\tvar ele = document.getElementById(id);\r\n\t\t\t\t\tif (ele) {\r\n\t\t\t\t\t\tele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tenv.content = Prism.highlight(textContent(env.content), grammar, codeLang);\r\n\t\t}\r\n\t});\r\n\r\n\tvar tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');\r\n\r\n\t/**\r\n\t * A list of known entity names.\r\n\t *\r\n\t * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\r\n\t *\r\n\t * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\r\n\t */\r\n\tvar KNOWN_ENTITY_NAMES = {\r\n\t\t'amp': '&',\r\n\t\t'lt': '<',\r\n\t\t'gt': '>',\r\n\t\t'quot': '\"',\r\n\t};\r\n\r\n\t// IE 11 doesn't support `String.fromCodePoint`\r\n\tvar fromCodePoint = String.fromCodePoint || String.fromCharCode;\r\n\r\n\t/**\r\n\t * Returns the text content of a given HTML source code string.\r\n\t *\r\n\t * @param {string} html\r\n\t * @returns {string}\r\n\t */\r\n\tfunction textContent(html) {\r\n\t\t// remove all tags\r\n\t\tvar text = html.replace(tagPattern, '');\r\n\r\n\t\t// decode known entities\r\n\t\ttext = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function (m, code) {\r\n\t\t\tcode = code.toLowerCase();\r\n\r\n\t\t\tif (code[0] === '#') {\r\n\t\t\t\tvar value;\r\n\t\t\t\tif (code[1] === 'x') {\r\n\t\t\t\t\tvalue = parseInt(code.slice(2), 16);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvalue = Number(code.slice(1));\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn fromCodePoint(value);\r\n\t\t\t} else {\r\n\t\t\t\tvar known = KNOWN_ENTITY_NAMES[code];\r\n\t\t\t\tif (known) {\r\n\t\t\t\t\treturn known;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// unable to decode\r\n\t\t\t\treturn m;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn text;\r\n\t}\r\n\r\n\tPrism.languages.md = Prism.languages.markdown;\r\n\r\n}(Prism));\r\n", "Prism.languages.c = Prism.languages.extend('clike', {\r\n\t'comment': {\r\n\t\tpattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\r\n\t\tgreedy: true\r\n\t},\r\n\t'string': {\r\n\t\t// https://en.cppreference.com/w/c/language/string_literal\r\n\t\tpattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\r\n\t\tgreedy: true\r\n\t},\r\n\t'class-name': {\r\n\t\tpattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\r\n\t\tlookbehind: true\r\n\t},\r\n\t'keyword': /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\r\n\t'function': /\\b[a-z_]\\w*(?=\\s*\\()/i,\r\n\t'number': /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\r\n\t'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\r\n});\r\n\r\nPrism.languages.insertBefore('c', 'string', {\r\n\t'char': {\r\n\t\t// https://en.cppreference.com/w/c/language/character_constant\r\n\t\tpattern: /'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,\r\n\t\tgreedy: true\r\n\t}\r\n});\r\n\r\nPrism.languages.insertBefore('c', 'string', {\r\n\t'macro': {\r\n\t\t// allow for multiline macro definitions\r\n\t\t// spaces after the # character compile fine with gcc\r\n\t\tpattern: /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\r\n\t\tlookbehind: true,\r\n\t\tgreedy: true,\r\n\t\talias: 'property',\r\n\t\tinside: {\r\n\t\t\t'string': [\r\n\t\t\t\t{\r\n\t\t\t\t\t// highlight the path of the include statement as a string\r\n\t\t\t\t\tpattern: /^(#\\s*include\\s*)<[^>]+>/,\r\n\t\t\t\t\tlookbehind: true\r\n\t\t\t\t},\r\n\t\t\t\tPrism.languages.c['string']\r\n\t\t\t],\r\n\t\t\t'char': Prism.languages.c['char'],\r\n\t\t\t'comment': Prism.languages.c['comment'],\r\n\t\t\t'macro-name': [\r\n\t\t\t\t{\r\n\t\t\t\t\tpattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\r\n\t\t\t\t\tlookbehind: true\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tpattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\r\n\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\talias: 'function'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t// highlight macro directives as keywords\r\n\t\t\t'directive': {\r\n\t\t\t\tpattern: /^(#\\s*)[a-z]+/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\talias: 'keyword'\r\n\t\t\t},\r\n\t\t\t'directive-hash': /^#/,\r\n\t\t\t'punctuation': /##|\\\\(?=[\\r\\n])/,\r\n\t\t\t'expression': {\r\n\t\t\t\tpattern: /\\S[\\s\\S]*/,\r\n\t\t\t\tinside: Prism.languages.c\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n});\r\n\r\nPrism.languages.insertBefore('c', 'function', {\r\n\t// highlight predefined macros as constants\r\n\t'constant': /\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/\r\n});\r\n\r\ndelete Prism.languages.c['boolean'];\r\n", "(function (Prism) {\r\n\r\n\tvar string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\r\n\r\n\tPrism.languages.css = {\r\n\t\t'comment': /\\/\\*[\\s\\S]*?\\*\\//,\r\n\t\t'atrule': {\r\n\t\t\tpattern: RegExp('@[\\\\w-](?:' + /[^;{\\s\"']|\\s+(?!\\s)/.source + '|' + string.source + ')*?' + /(?:;|(?=\\s*\\{))/.source),\r\n\t\t\tinside: {\r\n\t\t\t\t'rule': /^@[\\w-]+/,\r\n\t\t\t\t'selector-function-argument': {\r\n\t\t\t\t\tpattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\r\n\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\talias: 'selector'\r\n\t\t\t\t},\r\n\t\t\t\t'keyword': {\r\n\t\t\t\t\tpattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\r\n\t\t\t\t\tlookbehind: true\r\n\t\t\t\t}\r\n\t\t\t\t// See rest below\r\n\t\t\t}\r\n\t\t},\r\n\t\t'url': {\r\n\t\t\t// https://drafts.csswg.org/css-values-3/#urls\r\n\t\t\tpattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'function': /^url/i,\r\n\t\t\t\t'punctuation': /^\\(|\\)$/,\r\n\t\t\t\t'string': {\r\n\t\t\t\t\tpattern: RegExp('^' + string.source + '$'),\r\n\t\t\t\t\talias: 'url'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t'selector': {\r\n\t\t\tpattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t'string': {\r\n\t\t\tpattern: string,\r\n\t\t\tgreedy: true\r\n\t\t},\r\n\t\t'property': {\r\n\t\t\tpattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t'important': /!important\\b/i,\r\n\t\t'function': {\r\n\t\t\tpattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t'punctuation': /[(){};:,]/\r\n\t};\r\n\r\n\tPrism.languages.css['atrule'].inside.rest = Prism.languages.css;\r\n\r\n\tvar markup = Prism.languages.markup;\r\n\tif (markup) {\r\n\t\tmarkup.tag.addInlined('style', 'css');\r\n\t\tmarkup.tag.addAttribute('style', 'css');\r\n\t}\r\n\r\n}(Prism));\r\n", "Prism.languages.objectivec = Prism.languages.extend('c', {\r\n\t'string': {\r\n\t\tpattern: /@?\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\r\n\t\tgreedy: true\r\n\t},\r\n\t'keyword': /\\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\r\n\t'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\r\n});\r\n\r\ndelete Prism.languages.objectivec['class-name'];\r\n\r\nPrism.languages.objc = Prism.languages.objectivec;\r\n", "Prism.languages.sql = {\r\n\t'comment': {\r\n\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\r\n\t\tlookbehind: true\r\n\t},\r\n\t'variable': [\r\n\t\t{\r\n\t\t\tpattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\r\n\t\t\tgreedy: true\r\n\t\t},\r\n\t\t/@[\\w.$]+/\r\n\t],\r\n\t'string': {\r\n\t\tpattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\r\n\t\tgreedy: true,\r\n\t\tlookbehind: true\r\n\t},\r\n\t'identifier': {\r\n\t\tpattern: /(^|[^@\\\\])`(?:\\\\[\\s\\S]|[^`\\\\]|``)*`/,\r\n\t\tgreedy: true,\r\n\t\tlookbehind: true,\r\n\t\tinside: {\r\n\t\t\t'punctuation': /^`|`$/\r\n\t\t}\r\n\t},\r\n\t'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i, // Should we highlight user defined functions too?\r\n\t'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\r\n\t'boolean': /\\b(?:FALSE|NULL|TRUE)\\b/i,\r\n\t'number': /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\r\n\t'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\r\n\t'punctuation': /[;[\\]()`,.]/\r\n};\r\n", "Prism.languages.python = {\r\n\t'comment': {\r\n\t\tpattern: /(^|[^\\\\])#.*/,\r\n\t\tlookbehind: true,\r\n\t\tgreedy: true\r\n\t},\r\n\t'string-interpolation': {\r\n\t\tpattern: /(?:f|fr|rf)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\r\n\t\tgreedy: true,\r\n\t\tinside: {\r\n\t\t\t'interpolation': {\r\n\t\t\t\t// \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\r\n\t\t\t\tpattern: /((?:^|[^{])(?:\\{\\{)*)\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}])+\\})+\\})+\\}/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'format-spec': {\r\n\t\t\t\t\t\tpattern: /(:)[^:(){}]+(?=\\}$)/,\r\n\t\t\t\t\t\tlookbehind: true\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'conversion-option': {\r\n\t\t\t\t\t\tpattern: /![sra](?=[:}]$)/,\r\n\t\t\t\t\t\talias: 'punctuation'\r\n\t\t\t\t\t},\r\n\t\t\t\t\trest: null\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'string': /[\\s\\S]+/\r\n\t\t}\r\n\t},\r\n\t'triple-quoted-string': {\r\n\t\tpattern: /(?:[rub]|br|rb)?(\"\"\"|''')[\\s\\S]*?\\1/i,\r\n\t\tgreedy: true,\r\n\t\talias: 'string'\r\n\t},\r\n\t'string': {\r\n\t\tpattern: /(?:[rub]|br|rb)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\r\n\t\tgreedy: true\r\n\t},\r\n\t'function': {\r\n\t\tpattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\r\n\t\tlookbehind: true\r\n\t},\r\n\t'class-name': {\r\n\t\tpattern: /(\\bclass\\s+)\\w+/i,\r\n\t\tlookbehind: true\r\n\t},\r\n\t'decorator': {\r\n\t\tpattern: /(^[\\t ]*)@\\w+(?:\\.\\w+)*/m,\r\n\t\tlookbehind: true,\r\n\t\talias: ['annotation', 'punctuation'],\r\n\t\tinside: {\r\n\t\t\t'punctuation': /\\./\r\n\t\t}\r\n\t},\r\n\t'keyword': /\\b(?:_(?=\\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\r\n\t'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\r\n\t'boolean': /\\b(?:False|None|True)\\b/,\r\n\t'number': /\\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\\b|(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:e[+-]?\\d+(?:_\\d+)*)?j?(?!\\w)/i,\r\n\t'operator': /[-+%=]=?|!=|:=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\r\n\t'punctuation': /[{}[\\];(),.:]/\r\n};\r\n\r\nPrism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;\r\n\r\nPrism.languages.py = Prism.languages.python;\r\n", "(function (Prism) {\r\n\r\n\tvar multilineComment = /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\//.source;\r\n\tfor (var i = 0; i < 2; i++) {\r\n\t\t// support 4 levels of nested comments\r\n\t\tmultilineComment = multilineComment.replace(/<self>/g, function () { return multilineComment; });\r\n\t}\r\n\tmultilineComment = multilineComment.replace(/<self>/g, function () { return /[^\\s\\S]/.source; });\r\n\r\n\r\n\tPrism.languages.rust = {\r\n\t\t'comment': [\r\n\t\t\t{\r\n\t\t\t\tpattern: RegExp(/(^|[^\\\\])/.source + multilineComment),\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tgreedy: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tgreedy: true\r\n\t\t\t}\r\n\t\t],\r\n\t\t'string': {\r\n\t\t\tpattern: /b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/,\r\n\t\t\tgreedy: true\r\n\t\t},\r\n\t\t'char': {\r\n\t\t\tpattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u\\{(?:[\\da-fA-F]_*){1,6}\\}|.)|[^\\\\\\r\\n\\t'])'/,\r\n\t\t\tgreedy: true\r\n\t\t},\r\n\t\t'attribute': {\r\n\t\t\tpattern: /#!?\\[(?:[^\\[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/,\r\n\t\t\tgreedy: true,\r\n\t\t\talias: 'attr-name',\r\n\t\t\tinside: {\r\n\t\t\t\t'string': null // see below\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// Closure params should not be confused with bitwise OR |\r\n\t\t'closure-params': {\r\n\t\t\tpattern: /([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'closure-punctuation': {\r\n\t\t\t\t\tpattern: /^\\||\\|$/,\r\n\t\t\t\t\talias: 'punctuation'\r\n\t\t\t\t},\r\n\t\t\t\trest: null // see below\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t'lifetime-annotation': {\r\n\t\t\tpattern: /'\\w+/,\r\n\t\t\talias: 'symbol'\r\n\t\t},\r\n\r\n\t\t'fragment-specifier': {\r\n\t\t\tpattern: /(\\$\\w+:)[a-z]+/,\r\n\t\t\tlookbehind: true,\r\n\t\t\talias: 'punctuation'\r\n\t\t},\r\n\t\t'variable': /\\$\\w+/,\r\n\r\n\t\t'function-definition': {\r\n\t\t\tpattern: /(\\bfn\\s+)\\w+/,\r\n\t\t\tlookbehind: true,\r\n\t\t\talias: 'function'\r\n\t\t},\r\n\t\t'type-definition': {\r\n\t\t\tpattern: /(\\b(?:enum|struct|trait|type|union)\\s+)\\w+/,\r\n\t\t\tlookbehind: true,\r\n\t\t\talias: 'class-name'\r\n\t\t},\r\n\t\t'module-declaration': [\r\n\t\t\t{\r\n\t\t\t\tpattern: /(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\talias: 'namespace'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpattern: /(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\talias: 'namespace',\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'punctuation': /::/\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t'keyword': [\r\n\t\t\t// https://github.com/rust-lang/reference/blob/master/src/keywords.md\r\n\t\t\t/\\b(?:Self|abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,\r\n\t\t\t// primitives and str\r\n\t\t\t// https://doc.rust-lang.org/stable/rust-by-example/primitives.html\r\n\t\t\t/\\b(?:bool|char|f(?:32|64)|[ui](?:8|16|32|64|128|size)|str)\\b/\r\n\t\t],\r\n\r\n\t\t// functions can technically start with an upper-case letter, but this will introduce a lot of false positives\r\n\t\t// and Rust's naming conventions recommend snake_case anyway.\r\n\t\t// https://doc.rust-lang.org/1.0.0/style/style/naming/README.html\r\n\t\t'function': /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,\r\n\t\t'macro': {\r\n\t\t\tpattern: /\\b\\w+!/,\r\n\t\t\talias: 'property'\r\n\t\t},\r\n\t\t'constant': /\\b[A-Z_][A-Z_\\d]+\\b/,\r\n\t\t'class-name': /\\b[A-Z]\\w*\\b/,\r\n\r\n\t\t'namespace': {\r\n\t\t\tpattern: /(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,\r\n\t\t\tinside: {\r\n\t\t\t\t'punctuation': /::/\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// Hex, oct, bin, dec numbers with visual separators and type suffix\r\n\t\t'number': /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:f32|f64|[iu](?:8|16|32|64|size)?))?\\b/,\r\n\t\t'boolean': /\\b(?:false|true)\\b/,\r\n\t\t'punctuation': /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\r\n\t\t'operator': /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\r\n\t};\r\n\r\n\tPrism.languages.rust['closure-params'].inside.rest = Prism.languages.rust;\r\n\tPrism.languages.rust['attribute'].inside['string'] = Prism.languages.rust['string'];\r\n\r\n}(Prism));\r\n", "Prism.languages.swift = {\r\n\t'comment': {\r\n\t\t// Nested comments are supported up to 2 levels\r\n\t\tpattern: /(^|[^\\\\:])(?:\\/\\/.*|\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\/)/,\r\n\t\tlookbehind: true,\r\n\t\tgreedy: true\r\n\t},\r\n\t'string-literal': [\r\n\t\t// https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html\r\n\t\t{\r\n\t\t\tpattern: RegExp(\r\n\t\t\t\t/(^|[^\"#])/.source\r\n\t\t\t\t+ '(?:'\r\n\t\t\t\t// single-line string\r\n\t\t\t\t+ /\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^(])|[^\\\\\\r\\n\"])*\"/.source\r\n\t\t\t\t+ '|'\r\n\t\t\t\t// multi-line string\r\n\t\t\t\t+ /\"\"\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|[^(])|[^\\\\\"]|\"(?!\"\"))*\"\"\"/.source\r\n\t\t\t\t+ ')'\r\n\t\t\t\t+ /(?![\"#])/.source\r\n\t\t\t),\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'interpolation': {\r\n\t\t\t\t\tpattern: /(\\\\\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\r\n\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\tinside: null // see below\r\n\t\t\t\t},\r\n\t\t\t\t'interpolation-punctuation': {\r\n\t\t\t\t\tpattern: /^\\)|\\\\\\($/,\r\n\t\t\t\t\talias: 'punctuation'\r\n\t\t\t\t},\r\n\t\t\t\t'punctuation': /\\\\(?=[\\r\\n])/,\r\n\t\t\t\t'string': /[\\s\\S]+/\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tpattern: RegExp(\r\n\t\t\t\t/(^|[^\"#])(#+)/.source\r\n\t\t\t\t+ '(?:'\r\n\t\t\t\t// single-line string\r\n\t\t\t\t+ /\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^#])|[^\\\\\\r\\n])*?\"/.source\r\n\t\t\t\t+ '|'\r\n\t\t\t\t// multi-line string\r\n\t\t\t\t+ /\"\"\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|[^#])|[^\\\\])*?\"\"\"/.source\r\n\t\t\t\t+ ')'\r\n\t\t\t\t+ '\\\\2'\r\n\t\t\t),\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'interpolation': {\r\n\t\t\t\t\tpattern: /(\\\\#+\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\r\n\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\tinside: null // see below\r\n\t\t\t\t},\r\n\t\t\t\t'interpolation-punctuation': {\r\n\t\t\t\t\tpattern: /^\\)|\\\\#+\\($/,\r\n\t\t\t\t\talias: 'punctuation'\r\n\t\t\t\t},\r\n\t\t\t\t'string': /[\\s\\S]+/\r\n\t\t\t}\r\n\t\t},\r\n\t],\r\n\r\n\t'directive': {\r\n\t\t// directives with conditions\r\n\t\tpattern: RegExp(\r\n\t\t\t/#/.source\r\n\t\t\t+ '(?:'\r\n\t\t\t+ (\r\n\t\t\t\t/(?:elseif|if)\\b/.source\r\n\t\t\t\t+ '(?:[ \\t]*'\r\n\t\t\t\t// This regex is a little complex. It's equivalent to this:\r\n\t\t\t\t//   (?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*<round>)?|<round>)(?:[ \\t]*(?:&&|\\|\\|))?\r\n\t\t\t\t// where <round> is a general parentheses expression.\r\n\t\t\t\t+ /(?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*\\((?:[^()]|\\([^()]*\\))*\\))?|\\((?:[^()]|\\([^()]*\\))*\\))(?:[ \\t]*(?:&&|\\|\\|))?/.source\r\n\t\t\t\t+ ')+'\r\n\t\t\t)\r\n\t\t\t+ '|'\r\n\t\t\t+ /(?:else|endif)\\b/.source\r\n\t\t\t+ ')'\r\n\t\t),\r\n\t\talias: 'property',\r\n\t\tinside: {\r\n\t\t\t'directive-name': /^#\\w+/,\r\n\t\t\t'boolean': /\\b(?:false|true)\\b/,\r\n\t\t\t'number': /\\b\\d+(?:\\.\\d+)*\\b/,\r\n\t\t\t'operator': /!|&&|\\|\\||[<>]=?/,\r\n\t\t\t'punctuation': /[(),]/\r\n\t\t}\r\n\t},\r\n\t'literal': {\r\n\t\tpattern: /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\\b/,\r\n\t\talias: 'constant'\r\n\t},\r\n\t'other-directive': {\r\n\t\tpattern: /#\\w+\\b/,\r\n\t\talias: 'property'\r\n\t},\r\n\r\n\t'attribute': {\r\n\t\tpattern: /@\\w+/,\r\n\t\talias: 'atrule'\r\n\t},\r\n\r\n\t'function-definition': {\r\n\t\tpattern: /(\\bfunc\\s+)\\w+/,\r\n\t\tlookbehind: true,\r\n\t\talias: 'function'\r\n\t},\r\n\t'label': {\r\n\t\t// https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141\r\n\t\tpattern: /\\b(break|continue)\\s+\\w+|\\b[a-zA-Z_]\\w*(?=\\s*:\\s*(?:for|repeat|while)\\b)/,\r\n\t\tlookbehind: true,\r\n\t\talias: 'important'\r\n\t},\r\n\r\n\t'keyword': /\\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\\b/,\r\n\t'boolean': /\\b(?:false|true)\\b/,\r\n\t'nil': {\r\n\t\tpattern: /\\bnil\\b/,\r\n\t\talias: 'constant'\r\n\t},\r\n\r\n\t'short-argument': /\\$\\d+\\b/,\r\n\t'omit': {\r\n\t\tpattern: /\\b_\\b/,\r\n\t\talias: 'keyword'\r\n\t},\r\n\t'number': /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\r\n\r\n\t// A class name must start with an upper-case letter and be either 1 letter long or contain a lower-case letter.\r\n\t'class-name': /\\b[A-Z](?:[A-Z_\\d]*[a-z]\\w*)?\\b/,\r\n\t'function': /\\b[a-z_]\\w*(?=\\s*\\()/i,\r\n\t'constant': /\\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,\r\n\r\n\t// Operators are generic in Swift. Developers can even create new operators (e.g. +++).\r\n\t// https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html#ID481\r\n\t// This regex only supports ASCII operators.\r\n\t'operator': /[-+*/%=!<>&|^~?]+|\\.[.\\-+*/%=!<>&|^~?]+/,\r\n\t'punctuation': /[{}[\\]();,.:\\\\]/\r\n};\r\n\r\nPrism.languages.swift['string-literal'].forEach(function (rule) {\r\n\trule.inside['interpolation'].inside = Prism.languages.swift;\r\n});\r\n", "(function (Prism) {\r\n\r\n\tPrism.languages.typescript = Prism.languages.extend('javascript', {\r\n\t\t'class-name': {\r\n\t\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: null // see below\r\n\t\t},\r\n\t\t'builtin': /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/,\r\n\t});\r\n\r\n\t// The keywords TypeScript adds to JavaScript\r\n\tPrism.languages.typescript.keyword.push(\r\n\t\t/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/,\r\n\t\t// keywords that have to be followed by an identifier\r\n\t\t/\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/,\r\n\t\t// This is for `import type *, {}`\r\n\t\t/\\btype\\b(?=\\s*(?:[\\{*]|$))/\r\n\t);\r\n\r\n\t// doesn't work with TS because TS is too complex\r\n\tdelete Prism.languages.typescript['parameter'];\r\n\tdelete Prism.languages.typescript['literal-property'];\r\n\r\n\t// a version of typescript specifically for highlighting types\r\n\tvar typeInside = Prism.languages.extend('typescript', {});\r\n\tdelete typeInside['class-name'];\r\n\r\n\tPrism.languages.typescript['class-name'].inside = typeInside;\r\n\r\n\tPrism.languages.insertBefore('typescript', 'function', {\r\n\t\t'decorator': {\r\n\t\t\tpattern: /@[$\\w\\xA0-\\uFFFF]+/,\r\n\t\t\tinside: {\r\n\t\t\t\t'at': {\r\n\t\t\t\t\tpattern: /^@/,\r\n\t\t\t\t\talias: 'operator'\r\n\t\t\t\t},\r\n\t\t\t\t'function': /^[\\s\\S]+/\r\n\t\t\t}\r\n\t\t},\r\n\t\t'generic-function': {\r\n\t\t\t// e.g. foo<T extends \"bar\" | \"baz\">( ...\r\n\t\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\r\n\t\t\t\t'generic': {\r\n\t\t\t\t\tpattern: /<[\\s\\S]+/, // everything after the first <\r\n\t\t\t\t\talias: 'class-name',\r\n\t\t\t\t\tinside: typeInside\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\tPrism.languages.ts = Prism.languages.typescript;\r\n\r\n}(Prism));\r\n", "(function (Prism) {\r\n\r\n\tvar keywords = /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record(?!\\s*[(){}[\\]<>=%~.:,;?+\\-*/&|^])|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/;\r\n\r\n\t// full package (optional) + parent classes (optional)\r\n\tvar classNamePrefix = /(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source;\r\n\r\n\t// based on the java naming conventions\r\n\tvar className = {\r\n\t\tpattern: RegExp(/(^|[^\\w.])/.source + classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\r\n\t\tlookbehind: true,\r\n\t\tinside: {\r\n\t\t\t'namespace': {\r\n\t\t\t\tpattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'punctuation': /\\./\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'punctuation': /\\./\r\n\t\t}\r\n\t};\r\n\r\n\tPrism.languages.java = Prism.languages.extend('clike', {\r\n\t\t'string': {\r\n\t\t\tpattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true\r\n\t\t},\r\n\t\t'class-name': [\r\n\t\t\tclassName,\r\n\t\t\t{\r\n\t\t\t\t// variables, parameters, and constructor references\r\n\t\t\t\t// this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\r\n\t\t\t\tpattern: RegExp(/(^|[^\\w.])/.source + classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()]|\\s*(?:\\[[\\s,]*\\]\\s*)?::\\s*new\\b)/.source),\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tinside: className.inside\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t// class names based on keyword\r\n\t\t\t\t// this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\r\n\t\t\t\tpattern: RegExp(/(\\b(?:class|enum|extends|implements|instanceof|interface|new|record|throws)\\s+)/.source + classNamePrefix + /[A-Z]\\w*\\b/.source),\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tinside: className.inside\r\n\t\t\t}\r\n\t\t],\r\n\t\t'keyword': keywords,\r\n\t\t'function': [\r\n\t\t\tPrism.languages.clike.function,\r\n\t\t\t{\r\n\t\t\t\tpattern: /(::\\s*)[a-z_]\\w*/,\r\n\t\t\t\tlookbehind: true\r\n\t\t\t}\r\n\t\t],\r\n\t\t'number': /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\r\n\t\t'operator': {\r\n\t\t\tpattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t'constant': /\\b[A-Z][A-Z_\\d]+\\b/\r\n\t});\r\n\r\n\tPrism.languages.insertBefore('java', 'string', {\r\n\t\t'triple-quoted-string': {\r\n\t\t\t// http://openjdk.java.net/jeps/355#Description\r\n\t\t\tpattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\r\n\t\t\tgreedy: true,\r\n\t\t\talias: 'string'\r\n\t\t},\r\n\t\t'char': {\r\n\t\t\tpattern: /'(?:\\\\.|[^'\\\\\\r\\n]){1,6}'/,\r\n\t\t\tgreedy: true\r\n\t\t}\r\n\t});\r\n\r\n\tPrism.languages.insertBefore('java', 'class-name', {\r\n\t\t'annotation': {\r\n\t\t\tpattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\r\n\t\t\tlookbehind: true,\r\n\t\t\talias: 'punctuation'\r\n\t\t},\r\n\t\t'generics': {\r\n\t\t\tpattern: /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,\r\n\t\t\tinside: {\r\n\t\t\t\t'class-name': className,\r\n\t\t\t\t'keyword': keywords,\r\n\t\t\t\t'punctuation': /[<>(),.:]/,\r\n\t\t\t\t'operator': /[?&|]/\r\n\t\t\t}\r\n\t\t},\r\n\t\t'import': [\r\n\t\t\t{\r\n\t\t\t\tpattern: RegExp(/(\\bimport\\s+)/.source + classNamePrefix + /(?:[A-Z]\\w*|\\*)(?=\\s*;)/.source),\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'namespace': className.inside.namespace,\r\n\t\t\t\t\t'punctuation': /\\./,\r\n\t\t\t\t\t'operator': /\\*/,\r\n\t\t\t\t\t'class-name': /\\w+/\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tpattern: RegExp(/(\\bimport\\s+static\\s+)/.source + classNamePrefix + /(?:\\w+|\\*)(?=\\s*;)/.source),\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\talias: 'static',\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'namespace': className.inside.namespace,\r\n\t\t\t\t\t'static': /\\b\\w+$/,\r\n\t\t\t\t\t'punctuation': /\\./,\r\n\t\t\t\t\t'operator': /\\*/,\r\n\t\t\t\t\t'class-name': /\\w+/\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t'namespace': {\r\n\t\t\tpattern: RegExp(\r\n\t\t\t\t/(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/\r\n\t\t\t\t\t.source.replace(/<keyword>/g, function () { return keywords.source; })),\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'punctuation': /\\./,\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n}(Prism));\r\n", "(function (Prism) {\r\n\r\n\tvar keyword = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;\r\n\tvar modName = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(/<keyword>/g, function () { return keyword.source; });\r\n\r\n\tPrism.languages.cpp = Prism.languages.extend('c', {\r\n\t\t'class-name': [\r\n\t\t\t{\r\n\t\t\t\tpattern: RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source\r\n\t\t\t\t\t.replace(/<keyword>/g, function () { return keyword.source; })),\r\n\t\t\t\tlookbehind: true\r\n\t\t\t},\r\n\t\t\t// This is intended to capture the class name of method implementations like:\r\n\t\t\t//   void foo::bar() const {}\r\n\t\t\t// However! The `foo` in the above example could also be a namespace, so we only capture the class name if\r\n\t\t\t// it starts with an uppercase letter. This approximation should give decent results.\r\n\t\t\t/\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/,\r\n\t\t\t// This will capture the class name before destructors like:\r\n\t\t\t//   Foo::~Foo() {}\r\n\t\t\t/\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i,\r\n\t\t\t// This also intends to capture the class name of method implementations but here the class has template\r\n\t\t\t// parameters, so it can't be a namespace (until C++ adds generic namespaces).\r\n\t\t\t/\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/\r\n\t\t],\r\n\t\t'keyword': keyword,\r\n\t\t'number': {\r\n\t\t\tpattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\r\n\t\t\tgreedy: true\r\n\t\t},\r\n\t\t'operator': />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\r\n\t\t'boolean': /\\b(?:false|true)\\b/\r\n\t});\r\n\r\n\tPrism.languages.insertBefore('cpp', 'string', {\r\n\t\t'module': {\r\n\t\t\t// https://en.cppreference.com/w/cpp/language/modules\r\n\t\t\tpattern: RegExp(\r\n\t\t\t\t/(\\b(?:import|module)\\s+)/.source +\r\n\t\t\t\t'(?:' +\r\n\t\t\t\t// header-name\r\n\t\t\t\t/\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source +\r\n\t\t\t\t'|' +\r\n\t\t\t\t// module name or partition or both\r\n\t\t\t\t/<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(/<mod-name>/g, function () { return modName; }) +\r\n\t\t\t\t')'\r\n\t\t\t),\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'string': /^[<\"][\\s\\S]+/,\r\n\t\t\t\t'operator': /:/,\r\n\t\t\t\t'punctuation': /\\./\r\n\t\t\t}\r\n\t\t},\r\n\t\t'raw-string': {\r\n\t\t\tpattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\r\n\t\t\talias: 'string',\r\n\t\t\tgreedy: true\r\n\t\t}\r\n\t});\r\n\r\n\tPrism.languages.insertBefore('cpp', 'keyword', {\r\n\t\t'generic-function': {\r\n\t\t\tpattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\r\n\t\t\tinside: {\r\n\t\t\t\t'function': /^\\w+/,\r\n\t\t\t\t'generic': {\r\n\t\t\t\t\tpattern: /<[\\s\\S]+/,\r\n\t\t\t\t\talias: 'class-name',\r\n\t\t\t\t\tinside: Prism.languages.cpp\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\tPrism.languages.insertBefore('cpp', 'operator', {\r\n\t\t'double-colon': {\r\n\t\t\tpattern: /::/,\r\n\t\t\talias: 'punctuation'\r\n\t\t}\r\n\t});\r\n\r\n\tPrism.languages.insertBefore('cpp', 'class-name', {\r\n\t\t// the base clause is an optional list of parent classes\r\n\t\t// https://en.cppreference.com/w/cpp/language/class\r\n\t\t'base-clause': {\r\n\t\t\tpattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: Prism.languages.extend('cpp', {})\r\n\t\t}\r\n\t});\r\n\r\n\tPrism.languages.insertBefore('inside', 'double-colon', {\r\n\t\t// All untokenized words that are not namespaces should be class names\r\n\t\t'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\r\n\t}, Prism.languages.cpp['base-clause']);\r\n\r\n}(Prism));\r\n", "/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n'use strict';\r\n\r\nvar Prism = require('prismjs');\r\nrequire('prismjs/components/prism-clike');\r\nrequire('prismjs/components/prism-javascript');\r\nrequire('prismjs/components/prism-markup');\r\nrequire('prismjs/components/prism-markdown');\r\nrequire('prismjs/components/prism-c');\r\nrequire('prismjs/components/prism-css');\r\nrequire('prismjs/components/prism-objectivec');\r\nrequire('prismjs/components/prism-sql');\r\nrequire('prismjs/components/prism-python');\r\nrequire('prismjs/components/prism-rust');\r\nrequire('prismjs/components/prism-swift');\r\nrequire('prismjs/components/prism-typescript');\r\nrequire('prismjs/components/prism-java');\r\nrequire('prismjs/components/prism-cpp');\r\nvar utils = require('@lexical/utils');\r\nvar lexical = require('lexical');\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nconst mapToPrismLanguage = language => {\r\n  // eslint-disable-next-line no-prototype-builtins\r\n  return language != null && Prism.languages.hasOwnProperty(language) ? language : undefined;\r\n};\r\nfunction hasChildDOMNodeTag(node, tagName) {\r\n  for (const child of node.childNodes) {\r\n    if (utils.isHTMLElement(child) && child.tagName === tagName) {\r\n      return true;\r\n    }\r\n    hasChildDOMNodeTag(child, tagName);\r\n  }\r\n  return false;\r\n}\r\nconst LANGUAGE_DATA_ATTRIBUTE = 'data-highlight-language';\r\n\r\n/** @noInheritDoc */\r\nclass CodeNode extends lexical.ElementNode {\r\n  /** @internal */\r\n\r\n  static getType() {\r\n    return 'code';\r\n  }\r\n  static clone(node) {\r\n    return new CodeNode(node.__language, node.__key);\r\n  }\r\n  constructor(language, key) {\r\n    super(key);\r\n    this.__language = mapToPrismLanguage(language);\r\n  }\r\n\r\n  // View\r\n  createDOM(config) {\r\n    const element = document.createElement('code');\r\n    utils.addClassNamesToElement(element, config.theme.code);\r\n    element.setAttribute('spellcheck', 'false');\r\n    const language = this.getLanguage();\r\n    if (language) {\r\n      element.setAttribute(LANGUAGE_DATA_ATTRIBUTE, language);\r\n    }\r\n    return element;\r\n  }\r\n  updateDOM(prevNode, dom, config) {\r\n    const language = this.__language;\r\n    const prevLanguage = prevNode.__language;\r\n    if (language) {\r\n      if (language !== prevLanguage) {\r\n        dom.setAttribute(LANGUAGE_DATA_ATTRIBUTE, language);\r\n      }\r\n    } else if (prevLanguage) {\r\n      dom.removeAttribute(LANGUAGE_DATA_ATTRIBUTE);\r\n    }\r\n    return false;\r\n  }\r\n  exportDOM() {\r\n    const element = document.createElement('pre');\r\n    element.setAttribute('spellcheck', 'false');\r\n    const language = this.getLanguage();\r\n    if (language) {\r\n      element.setAttribute(LANGUAGE_DATA_ATTRIBUTE, language);\r\n    }\r\n    return {\r\n      element\r\n    };\r\n  }\r\n  static importDOM() {\r\n    return {\r\n      // Typically <pre> is used for code blocks, and <code> for inline code styles\r\n      // but if it's a multi line <code> we'll create a block. Pass through to\r\n      // inline format handled by TextNode otherwise.\r\n      code: node => {\r\n        const isMultiLine = node.textContent != null && (/\\r?\\n/.test(node.textContent) || hasChildDOMNodeTag(node, 'BR'));\r\n        return isMultiLine ? {\r\n          conversion: convertPreElement,\r\n          priority: 1\r\n        } : null;\r\n      },\r\n      div: node => ({\r\n        conversion: convertDivElement,\r\n        priority: 1\r\n      }),\r\n      pre: node => ({\r\n        conversion: convertPreElement,\r\n        priority: 0\r\n      }),\r\n      table: node => {\r\n        const table = node;\r\n        // domNode is a <table> since we matched it by nodeName\r\n        if (isGitHubCodeTable(table)) {\r\n          return {\r\n            conversion: convertTableElement,\r\n            priority: 3\r\n          };\r\n        }\r\n        return null;\r\n      },\r\n      td: node => {\r\n        // element is a <td> since we matched it by nodeName\r\n        const td = node;\r\n        const table = td.closest('table');\r\n        if (isGitHubCodeCell(td)) {\r\n          return {\r\n            conversion: convertTableCellElement,\r\n            priority: 3\r\n          };\r\n        }\r\n        if (table && isGitHubCodeTable(table)) {\r\n          // Return a no-op if it's a table cell in a code table, but not a code line.\r\n          // Otherwise it'll fall back to the T\r\n          return {\r\n            conversion: convertCodeNoop,\r\n            priority: 3\r\n          };\r\n        }\r\n        return null;\r\n      },\r\n      tr: node => {\r\n        // element is a <tr> since we matched it by nodeName\r\n        const tr = node;\r\n        const table = tr.closest('table');\r\n        if (table && isGitHubCodeTable(table)) {\r\n          return {\r\n            conversion: convertCodeNoop,\r\n            priority: 3\r\n          };\r\n        }\r\n        return null;\r\n      }\r\n    };\r\n  }\r\n  static importJSON(serializedNode) {\r\n    const node = $createCodeNode(serializedNode.language);\r\n    node.setFormat(serializedNode.format);\r\n    node.setIndent(serializedNode.indent);\r\n    node.setDirection(serializedNode.direction);\r\n    return node;\r\n  }\r\n  exportJSON() {\r\n    return {\r\n      ...super.exportJSON(),\r\n      language: this.getLanguage(),\r\n      type: 'code',\r\n      version: 1\r\n    };\r\n  }\r\n\r\n  // Mutation\r\n  insertNewAfter(selection, restoreSelection = true) {\r\n    const children = this.getChildren();\r\n    const childrenLength = children.length;\r\n    if (childrenLength >= 2 && children[childrenLength - 1].getTextContent() === '\\n' && children[childrenLength - 2].getTextContent() === '\\n' && selection.isCollapsed() && selection.anchor.key === this.__key && selection.anchor.offset === childrenLength) {\r\n      children[childrenLength - 1].remove();\r\n      children[childrenLength - 2].remove();\r\n      const newElement = lexical.$createParagraphNode();\r\n      this.insertAfter(newElement, restoreSelection);\r\n      return newElement;\r\n    }\r\n\r\n    // If the selection is within the codeblock, find all leading tabs and\r\n    // spaces of the current line. Create a new line that has all those\r\n    // tabs and spaces, such that leading indentation is preserved.\r\n    const {\r\n      anchor,\r\n      focus\r\n    } = selection;\r\n    const firstPoint = anchor.isBefore(focus) ? anchor : focus;\r\n    const firstSelectionNode = firstPoint.getNode();\r\n    if (lexical.$isTextNode(firstSelectionNode)) {\r\n      let node = getFirstCodeNodeOfLine(firstSelectionNode);\r\n      const insertNodes = [];\r\n      // eslint-disable-next-line no-constant-condition\r\n      while (true) {\r\n        if (lexical.$isTabNode(node)) {\r\n          insertNodes.push(lexical.$createTabNode());\r\n          node = node.getNextSibling();\r\n        } else if ($isCodeHighlightNode(node)) {\r\n          let spaces = 0;\r\n          const text = node.getTextContent();\r\n          const textSize = node.getTextContentSize();\r\n          for (; spaces < textSize && text[spaces] === ' '; spaces++);\r\n          if (spaces !== 0) {\r\n            insertNodes.push($createCodeHighlightNode(' '.repeat(spaces)));\r\n          }\r\n          if (spaces !== textSize) {\r\n            break;\r\n          }\r\n          node = node.getNextSibling();\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      const split = firstSelectionNode.splitText(anchor.offset)[0];\r\n      const x = anchor.offset === 0 ? 0 : 1;\r\n      const index = split.getIndexWithinParent() + x;\r\n      const codeNode = firstSelectionNode.getParentOrThrow();\r\n      const nodesToInsert = [lexical.$createLineBreakNode(), ...insertNodes];\r\n      codeNode.splice(index, 0, nodesToInsert);\r\n      const last = insertNodes[insertNodes.length - 1];\r\n      if (last) {\r\n        last.select();\r\n      } else if (anchor.offset === 0) {\r\n        split.selectPrevious();\r\n      } else {\r\n        split.getNextSibling().selectNext(0, 0);\r\n      }\r\n    }\r\n    if ($isCodeNode(firstSelectionNode)) {\r\n      const {\r\n        offset\r\n      } = selection.anchor;\r\n      firstSelectionNode.splice(offset, 0, [lexical.$createLineBreakNode()]);\r\n      firstSelectionNode.select(offset + 1, offset + 1);\r\n    }\r\n    return null;\r\n  }\r\n  canIndent() {\r\n    return false;\r\n  }\r\n  collapseAtStart() {\r\n    const paragraph = lexical.$createParagraphNode();\r\n    const children = this.getChildren();\r\n    children.forEach(child => paragraph.append(child));\r\n    this.replace(paragraph);\r\n    return true;\r\n  }\r\n  setLanguage(language) {\r\n    const writable = this.getWritable();\r\n    writable.__language = mapToPrismLanguage(language);\r\n  }\r\n  getLanguage() {\r\n    return this.getLatest().__language;\r\n  }\r\n}\r\nfunction $createCodeNode(language) {\r\n  return lexical.$applyNodeReplacement(new CodeNode(language));\r\n}\r\nfunction $isCodeNode(node) {\r\n  return node instanceof CodeNode;\r\n}\r\nfunction convertPreElement(domNode) {\r\n  let language;\r\n  if (utils.isHTMLElement(domNode)) {\r\n    language = domNode.getAttribute(LANGUAGE_DATA_ATTRIBUTE);\r\n  }\r\n  return {\r\n    node: $createCodeNode(language)\r\n  };\r\n}\r\nfunction convertDivElement(domNode) {\r\n  // domNode is a <div> since we matched it by nodeName\r\n  const div = domNode;\r\n  const isCode = isCodeElement(div);\r\n  if (!isCode && !isCodeChildElement(div)) {\r\n    return {\r\n      node: null\r\n    };\r\n  }\r\n  return {\r\n    after: childLexicalNodes => {\r\n      const domParent = domNode.parentNode;\r\n      if (domParent != null && domNode !== domParent.lastChild) {\r\n        childLexicalNodes.push(lexical.$createLineBreakNode());\r\n      }\r\n      return childLexicalNodes;\r\n    },\r\n    node: isCode ? $createCodeNode() : null\r\n  };\r\n}\r\nfunction convertTableElement() {\r\n  return {\r\n    node: $createCodeNode()\r\n  };\r\n}\r\nfunction convertCodeNoop() {\r\n  return {\r\n    node: null\r\n  };\r\n}\r\nfunction convertTableCellElement(domNode) {\r\n  // domNode is a <td> since we matched it by nodeName\r\n  const cell = domNode;\r\n  return {\r\n    after: childLexicalNodes => {\r\n      if (cell.parentNode && cell.parentNode.nextSibling) {\r\n        // Append newline between code lines\r\n        childLexicalNodes.push(lexical.$createLineBreakNode());\r\n      }\r\n      return childLexicalNodes;\r\n    },\r\n    node: null\r\n  };\r\n}\r\nfunction isCodeElement(div) {\r\n  return div.style.fontFamily.match('monospace') !== null;\r\n}\r\nfunction isCodeChildElement(node) {\r\n  let parent = node.parentElement;\r\n  while (parent !== null) {\r\n    if (isCodeElement(parent)) {\r\n      return true;\r\n    }\r\n    parent = parent.parentElement;\r\n  }\r\n  return false;\r\n}\r\nfunction isGitHubCodeCell(cell) {\r\n  return cell.classList.contains('js-file-line');\r\n}\r\nfunction isGitHubCodeTable(table) {\r\n  return table.classList.contains('js-file-line-container');\r\n}\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nconst DEFAULT_CODE_LANGUAGE = 'javascript';\r\nconst CODE_LANGUAGE_FRIENDLY_NAME_MAP = {\r\n  c: 'C',\r\n  clike: 'C-like',\r\n  cpp: 'C++',\r\n  css: 'CSS',\r\n  html: 'HTML',\r\n  java: 'Java',\r\n  js: 'JavaScript',\r\n  markdown: 'Markdown',\r\n  objc: 'Objective-C',\r\n  plain: 'Plain Text',\r\n  py: 'Python',\r\n  rust: 'Rust',\r\n  sql: 'SQL',\r\n  swift: 'Swift',\r\n  typescript: 'TypeScript',\r\n  xml: 'XML'\r\n};\r\nconst CODE_LANGUAGE_MAP = {\r\n  cpp: 'cpp',\r\n  java: 'java',\r\n  javascript: 'js',\r\n  md: 'markdown',\r\n  plaintext: 'plain',\r\n  python: 'py',\r\n  text: 'plain',\r\n  ts: 'typescript'\r\n};\r\nfunction normalizeCodeLang(lang) {\r\n  return CODE_LANGUAGE_MAP[lang] || lang;\r\n}\r\nfunction getLanguageFriendlyName(lang) {\r\n  const _lang = normalizeCodeLang(lang);\r\n  return CODE_LANGUAGE_FRIENDLY_NAME_MAP[_lang] || _lang;\r\n}\r\nconst getDefaultCodeLanguage = () => DEFAULT_CODE_LANGUAGE;\r\nconst getCodeLanguages = () => Object.keys(Prism.languages).filter(\r\n// Prism has several language helpers mixed into languages object\r\n// so filtering them out here to get langs list\r\nlanguage => typeof Prism.languages[language] !== 'function').sort();\r\n\r\n/** @noInheritDoc */\r\nclass CodeHighlightNode extends lexical.TextNode {\r\n  /** @internal */\r\n\r\n  constructor(text, highlightType, key) {\r\n    super(text, key);\r\n    this.__highlightType = highlightType;\r\n  }\r\n  static getType() {\r\n    return 'code-highlight';\r\n  }\r\n  static clone(node) {\r\n    return new CodeHighlightNode(node.__text, node.__highlightType || undefined, node.__key);\r\n  }\r\n  getHighlightType() {\r\n    const self = this.getLatest();\r\n    return self.__highlightType;\r\n  }\r\n  canHaveFormat() {\r\n    return false;\r\n  }\r\n  createDOM(config) {\r\n    const element = super.createDOM(config);\r\n    const className = getHighlightThemeClass(config.theme, this.__highlightType);\r\n    utils.addClassNamesToElement(element, className);\r\n    return element;\r\n  }\r\n  updateDOM(prevNode, dom, config) {\r\n    const update = super.updateDOM(prevNode, dom, config);\r\n    const prevClassName = getHighlightThemeClass(config.theme, prevNode.__highlightType);\r\n    const nextClassName = getHighlightThemeClass(config.theme, this.__highlightType);\r\n    if (prevClassName !== nextClassName) {\r\n      if (prevClassName) {\r\n        utils.removeClassNamesFromElement(dom, prevClassName);\r\n      }\r\n      if (nextClassName) {\r\n        utils.addClassNamesToElement(dom, nextClassName);\r\n      }\r\n    }\r\n    return update;\r\n  }\r\n  static importJSON(serializedNode) {\r\n    const node = $createCodeHighlightNode(serializedNode.text, serializedNode.highlightType);\r\n    node.setFormat(serializedNode.format);\r\n    node.setDetail(serializedNode.detail);\r\n    node.setMode(serializedNode.mode);\r\n    node.setStyle(serializedNode.style);\r\n    return node;\r\n  }\r\n  exportJSON() {\r\n    return {\r\n      ...super.exportJSON(),\r\n      highlightType: this.getHighlightType(),\r\n      type: 'code-highlight',\r\n      version: 1\r\n    };\r\n  }\r\n\r\n  // Prevent formatting (bold, underline, etc)\r\n  setFormat(format) {\r\n    return this;\r\n  }\r\n  isParentRequired() {\r\n    return true;\r\n  }\r\n  createParentElementNode() {\r\n    return $createCodeNode();\r\n  }\r\n}\r\nfunction getHighlightThemeClass(theme, highlightType) {\r\n  return highlightType && theme && theme.codeHighlight && theme.codeHighlight[highlightType];\r\n}\r\nfunction $createCodeHighlightNode(text, highlightType) {\r\n  return lexical.$applyNodeReplacement(new CodeHighlightNode(text, highlightType));\r\n}\r\nfunction $isCodeHighlightNode(node) {\r\n  return node instanceof CodeHighlightNode;\r\n}\r\nfunction getFirstCodeNodeOfLine(anchor) {\r\n  let previousNode = anchor;\r\n  let node = anchor;\r\n  while ($isCodeHighlightNode(node) || lexical.$isTabNode(node)) {\r\n    previousNode = node;\r\n    node = node.getPreviousSibling();\r\n  }\r\n  return previousNode;\r\n}\r\nfunction getLastCodeNodeOfLine(anchor) {\r\n  let nextNode = anchor;\r\n  let node = anchor;\r\n  while ($isCodeHighlightNode(node) || lexical.$isTabNode(node)) {\r\n    nextNode = node;\r\n    node = node.getNextSibling();\r\n  }\r\n  return nextNode;\r\n}\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nconst PrismTokenizer = {\r\n  defaultLanguage: DEFAULT_CODE_LANGUAGE,\r\n  tokenize(code, language) {\r\n    return Prism.tokenize(code, Prism.languages[language || ''] || Prism.languages[this.defaultLanguage]);\r\n  }\r\n};\r\nfunction getStartOfCodeInLine(anchor, offset) {\r\n  let last = null;\r\n  let lastNonBlank = null;\r\n  let node = anchor;\r\n  let nodeOffset = offset;\r\n  let nodeTextContent = anchor.getTextContent();\r\n  // eslint-disable-next-line no-constant-condition\r\n  while (true) {\r\n    if (nodeOffset === 0) {\r\n      node = node.getPreviousSibling();\r\n      if (node === null) {\r\n        break;\r\n      }\r\n      if (!($isCodeHighlightNode(node) || lexical.$isTabNode(node) || lexical.$isLineBreakNode(node))) {\r\n        throw Error(`Expected a valid Code Node: CodeHighlightNode, TabNode, LineBreakNode`);\r\n      }\r\n      if (lexical.$isLineBreakNode(node)) {\r\n        last = {\r\n          node,\r\n          offset: 1\r\n        };\r\n        break;\r\n      }\r\n      nodeOffset = Math.max(0, node.getTextContentSize() - 1);\r\n      nodeTextContent = node.getTextContent();\r\n    } else {\r\n      nodeOffset--;\r\n    }\r\n    const character = nodeTextContent[nodeOffset];\r\n    if ($isCodeHighlightNode(node) && character !== ' ') {\r\n      lastNonBlank = {\r\n        node,\r\n        offset: nodeOffset\r\n      };\r\n    }\r\n  }\r\n  // lastNonBlank !== null: anchor in the middle of code; move to line beginning\r\n  if (lastNonBlank !== null) {\r\n    return lastNonBlank;\r\n  }\r\n  // Spaces, tabs or nothing ahead of anchor\r\n  let codeCharacterAtAnchorOffset = null;\r\n  if (offset < anchor.getTextContentSize()) {\r\n    if ($isCodeHighlightNode(anchor)) {\r\n      codeCharacterAtAnchorOffset = anchor.getTextContent()[offset];\r\n    }\r\n  } else {\r\n    const nextSibling = anchor.getNextSibling();\r\n    if ($isCodeHighlightNode(nextSibling)) {\r\n      codeCharacterAtAnchorOffset = nextSibling.getTextContent()[0];\r\n    }\r\n  }\r\n  if (codeCharacterAtAnchorOffset !== null && codeCharacterAtAnchorOffset !== ' ') {\r\n    // Borderline whitespace and code, move to line beginning\r\n    return last;\r\n  } else {\r\n    const nextNonBlank = findNextNonBlankInLine(anchor, offset);\r\n    if (nextNonBlank !== null) {\r\n      return nextNonBlank;\r\n    } else {\r\n      return last;\r\n    }\r\n  }\r\n}\r\nfunction findNextNonBlankInLine(anchor, offset) {\r\n  let node = anchor;\r\n  let nodeOffset = offset;\r\n  let nodeTextContent = anchor.getTextContent();\r\n  let nodeTextContentSize = anchor.getTextContentSize();\r\n  // eslint-disable-next-line no-constant-condition\r\n  while (true) {\r\n    if (!$isCodeHighlightNode(node) || nodeOffset === nodeTextContentSize) {\r\n      node = node.getNextSibling();\r\n      if (node === null || lexical.$isLineBreakNode(node)) {\r\n        return null;\r\n      }\r\n      if ($isCodeHighlightNode(node)) {\r\n        nodeOffset = 0;\r\n        nodeTextContent = node.getTextContent();\r\n        nodeTextContentSize = node.getTextContentSize();\r\n      }\r\n    }\r\n    if ($isCodeHighlightNode(node)) {\r\n      if (nodeTextContent[nodeOffset] !== ' ') {\r\n        return {\r\n          node,\r\n          offset: nodeOffset\r\n        };\r\n      }\r\n      nodeOffset++;\r\n    }\r\n  }\r\n}\r\nfunction getEndOfCodeInLine(anchor) {\r\n  const lastNode = getLastCodeNodeOfLine(anchor);\r\n  if (!!lexical.$isLineBreakNode(lastNode)) {\r\n    throw Error(`Unexpected lineBreakNode in getEndOfCodeInLine`);\r\n  }\r\n  return lastNode;\r\n}\r\nfunction textNodeTransform(node, editor, tokenizer) {\r\n  // Since CodeNode has flat children structure we only need to check\r\n  // if node's parent is a code node and run highlighting if so\r\n  const parentNode = node.getParent();\r\n  if ($isCodeNode(parentNode)) {\r\n    codeNodeTransform(parentNode, editor, tokenizer);\r\n  } else if ($isCodeHighlightNode(node)) {\r\n    // When code block converted into paragraph or other element\r\n    // code highlight nodes converted back to normal text\r\n    node.replace(lexical.$createTextNode(node.__text));\r\n  }\r\n}\r\nfunction updateCodeGutter(node, editor) {\r\n  const codeElement = editor.getElementByKey(node.getKey());\r\n  if (codeElement === null) {\r\n    return;\r\n  }\r\n  const children = node.getChildren();\r\n  const childrenLength = children.length;\r\n  // @ts-ignore: internal field\r\n  if (childrenLength === codeElement.__cachedChildrenLength) {\r\n    // Avoid updating the attribute if the children length hasn't changed.\r\n    return;\r\n  }\r\n  // @ts-ignore:: internal field\r\n  codeElement.__cachedChildrenLength = childrenLength;\r\n  let gutter = '1';\r\n  let count = 1;\r\n  for (let i = 0; i < childrenLength; i++) {\r\n    if (lexical.$isLineBreakNode(children[i])) {\r\n      gutter += '\\n' + ++count;\r\n    }\r\n  }\r\n  codeElement.setAttribute('data-gutter', gutter);\r\n}\r\n\r\n// Using `skipTransforms` to prevent extra transforms since reformatting the code\r\n// will not affect code block content itself.\r\n//\r\n// Using extra cache (`nodesCurrentlyHighlighting`) since both CodeNode and CodeHighlightNode\r\n// transforms might be called at the same time (e.g. new CodeHighlight node inserted) and\r\n// in both cases we'll rerun whole reformatting over CodeNode, which is redundant.\r\n// Especially when pasting code into CodeBlock.\r\n\r\nconst nodesCurrentlyHighlighting = new Set();\r\nfunction codeNodeTransform(node, editor, tokenizer) {\r\n  const nodeKey = node.getKey();\r\n  if (nodesCurrentlyHighlighting.has(nodeKey)) {\r\n    return;\r\n  }\r\n  nodesCurrentlyHighlighting.add(nodeKey);\r\n\r\n  // When new code block inserted it might not have language selected\r\n  if (node.getLanguage() === undefined) {\r\n    node.setLanguage(tokenizer.defaultLanguage);\r\n  }\r\n\r\n  // Using nested update call to pass `skipTransforms` since we don't want\r\n  // each individual codehighlight node to be transformed again as it's already\r\n  // in its final state\r\n  editor.update(() => {\r\n    updateAndRetainSelection(nodeKey, () => {\r\n      const currentNode = lexical.$getNodeByKey(nodeKey);\r\n      if (!$isCodeNode(currentNode) || !currentNode.isAttached()) {\r\n        return false;\r\n      }\r\n      const code = currentNode.getTextContent();\r\n      const tokens = tokenizer.tokenize(code, currentNode.getLanguage() || tokenizer.defaultLanguage);\r\n      const highlightNodes = getHighlightNodes(tokens);\r\n      const diffRange = getDiffRange(currentNode.getChildren(), highlightNodes);\r\n      const {\r\n        from,\r\n        to,\r\n        nodesForReplacement\r\n      } = diffRange;\r\n      if (from !== to || nodesForReplacement.length) {\r\n        node.splice(from, to - from, nodesForReplacement);\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n  }, {\r\n    onUpdate: () => {\r\n      nodesCurrentlyHighlighting.delete(nodeKey);\r\n    },\r\n    skipTransforms: true\r\n  });\r\n}\r\nfunction getHighlightNodes(tokens, type) {\r\n  const nodes = [];\r\n  for (const token of tokens) {\r\n    if (typeof token === 'string') {\r\n      const partials = token.split(/(\\n|\\t)/);\r\n      const partialsLength = partials.length;\r\n      for (let i = 0; i < partialsLength; i++) {\r\n        const part = partials[i];\r\n        if (part === '\\n' || part === '\\r\\n') {\r\n          nodes.push(lexical.$createLineBreakNode());\r\n        } else if (part === '\\t') {\r\n          nodes.push(lexical.$createTabNode());\r\n        } else if (part.length > 0) {\r\n          nodes.push($createCodeHighlightNode(part, type));\r\n        }\r\n      }\r\n    } else {\r\n      const {\r\n        content\r\n      } = token;\r\n      if (typeof content === 'string') {\r\n        nodes.push(...getHighlightNodes([content], token.type));\r\n      } else if (Array.isArray(content)) {\r\n        nodes.push(...getHighlightNodes(content, token.type));\r\n      }\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Wrapping update function into selection retainer, that tries to keep cursor at the same\r\n// position as before.\r\nfunction updateAndRetainSelection(nodeKey, updateFn) {\r\n  const node = lexical.$getNodeByKey(nodeKey);\r\n  if (!$isCodeNode(node) || !node.isAttached()) {\r\n    return;\r\n  }\r\n  const selection = lexical.$getSelection();\r\n  // If it's not range selection (or null selection) there's no need to change it,\r\n  // but we can still run highlighting logic\r\n  if (!lexical.$isRangeSelection(selection)) {\r\n    updateFn();\r\n    return;\r\n  }\r\n  const anchor = selection.anchor;\r\n  const anchorOffset = anchor.offset;\r\n  const isNewLineAnchor = anchor.type === 'element' && lexical.$isLineBreakNode(node.getChildAtIndex(anchor.offset - 1));\r\n  let textOffset = 0;\r\n\r\n  // Calculating previous text offset (all text node prior to anchor + anchor own text offset)\r\n  if (!isNewLineAnchor) {\r\n    const anchorNode = anchor.getNode();\r\n    textOffset = anchorOffset + anchorNode.getPreviousSiblings().reduce((offset, _node) => {\r\n      return offset + _node.getTextContentSize();\r\n    }, 0);\r\n  }\r\n  const hasChanges = updateFn();\r\n  if (!hasChanges) {\r\n    return;\r\n  }\r\n\r\n  // Non-text anchors only happen for line breaks, otherwise\r\n  // selection will be within text node (code highlight node)\r\n  if (isNewLineAnchor) {\r\n    anchor.getNode().select(anchorOffset, anchorOffset);\r\n    return;\r\n  }\r\n\r\n  // If it was non-element anchor then we walk through child nodes\r\n  // and looking for a position of original text offset\r\n  node.getChildren().some(_node => {\r\n    const isText = lexical.$isTextNode(_node);\r\n    if (isText || lexical.$isLineBreakNode(_node)) {\r\n      const textContentSize = _node.getTextContentSize();\r\n      if (isText && textContentSize >= textOffset) {\r\n        _node.select(textOffset, textOffset);\r\n        return true;\r\n      }\r\n      textOffset -= textContentSize;\r\n    }\r\n    return false;\r\n  });\r\n}\r\n\r\n// Finds minimal diff range between two nodes lists. It returns from/to range boundaries of prevNodes\r\n// that needs to be replaced with `nodes` (subset of nextNodes) to make prevNodes equal to nextNodes.\r\nfunction getDiffRange(prevNodes, nextNodes) {\r\n  let leadingMatch = 0;\r\n  while (leadingMatch < prevNodes.length) {\r\n    if (!isEqual(prevNodes[leadingMatch], nextNodes[leadingMatch])) {\r\n      break;\r\n    }\r\n    leadingMatch++;\r\n  }\r\n  const prevNodesLength = prevNodes.length;\r\n  const nextNodesLength = nextNodes.length;\r\n  const maxTrailingMatch = Math.min(prevNodesLength, nextNodesLength) - leadingMatch;\r\n  let trailingMatch = 0;\r\n  while (trailingMatch < maxTrailingMatch) {\r\n    trailingMatch++;\r\n    if (!isEqual(prevNodes[prevNodesLength - trailingMatch], nextNodes[nextNodesLength - trailingMatch])) {\r\n      trailingMatch--;\r\n      break;\r\n    }\r\n  }\r\n  const from = leadingMatch;\r\n  const to = prevNodesLength - trailingMatch;\r\n  const nodesForReplacement = nextNodes.slice(leadingMatch, nextNodesLength - trailingMatch);\r\n  return {\r\n    from,\r\n    nodesForReplacement,\r\n    to\r\n  };\r\n}\r\nfunction isEqual(nodeA, nodeB) {\r\n  // Only checking for code higlight nodes, tabs and linebreaks. If it's regular text node\r\n  // returning false so that it's transformed into code highlight node\r\n  return $isCodeHighlightNode(nodeA) && $isCodeHighlightNode(nodeB) && nodeA.__text === nodeB.__text && nodeA.__highlightType === nodeB.__highlightType || lexical.$isTabNode(nodeA) && lexical.$isTabNode(nodeB) || lexical.$isLineBreakNode(nodeA) && lexical.$isLineBreakNode(nodeB);\r\n}\r\nfunction $isSelectionInCode(selection) {\r\n  if (!lexical.$isRangeSelection(selection)) {\r\n    return false;\r\n  }\r\n  const anchorNode = selection.anchor.getNode();\r\n  const focusNode = selection.focus.getNode();\r\n  if (anchorNode.is(focusNode) && $isCodeNode(anchorNode)) {\r\n    return true;\r\n  }\r\n  const anchorParent = anchorNode.getParent();\r\n  return $isCodeNode(anchorParent) && anchorParent.is(focusNode.getParent());\r\n}\r\nfunction $getCodeLines(selection) {\r\n  const nodes = selection.getNodes();\r\n  const lines = [[]];\r\n  if (nodes.length === 1 && $isCodeNode(nodes[0])) {\r\n    return lines;\r\n  }\r\n  let lastLine = lines[0];\r\n  for (let i = 0; i < nodes.length; i++) {\r\n    const node = nodes[i];\r\n    if (!($isCodeHighlightNode(node) || lexical.$isTabNode(node) || lexical.$isLineBreakNode(node))) {\r\n      throw Error(`Expected selection to be inside CodeBlock and consisting of CodeHighlightNode, TabNode and LineBreakNode`);\r\n    }\r\n    if (lexical.$isLineBreakNode(node)) {\r\n      if (i !== 0 && lastLine.length > 0) {\r\n        lastLine = [];\r\n        lines.push(lastLine);\r\n      }\r\n    } else {\r\n      lastLine.push(node);\r\n    }\r\n  }\r\n  return lines;\r\n}\r\nfunction handleTab(shiftKey) {\r\n  const selection = lexical.$getSelection();\r\n  if (!lexical.$isRangeSelection(selection) || !$isSelectionInCode(selection)) {\r\n    return null;\r\n  }\r\n  const indentOrOutdent = !shiftKey ? lexical.INDENT_CONTENT_COMMAND : lexical.OUTDENT_CONTENT_COMMAND;\r\n  const tabOrOutdent = !shiftKey ? lexical.INSERT_TAB_COMMAND : lexical.OUTDENT_CONTENT_COMMAND;\r\n  // 1. If multiple lines selected: indent/outdent\r\n  const codeLines = $getCodeLines(selection);\r\n  if (codeLines.length > 1) {\r\n    return indentOrOutdent;\r\n  }\r\n  // 2. If entire line selected: indent/outdent\r\n  const selectionNodes = selection.getNodes();\r\n  const firstNode = selectionNodes[0];\r\n  if (!($isCodeNode(firstNode) || $isCodeHighlightNode(firstNode) || lexical.$isTabNode(firstNode) || lexical.$isLineBreakNode(firstNode))) {\r\n    throw Error(`Expected selection firstNode to be CodeHighlightNode or TabNode`);\r\n  }\r\n  if ($isCodeNode(firstNode)) {\r\n    return indentOrOutdent;\r\n  }\r\n  const firstOfLine = getFirstCodeNodeOfLine(firstNode);\r\n  const lastOfLine = getLastCodeNodeOfLine(firstNode);\r\n  const anchor = selection.anchor;\r\n  const focus = selection.focus;\r\n  let selectionFirst;\r\n  let selectionLast;\r\n  if (focus.isBefore(anchor)) {\r\n    selectionFirst = focus;\r\n    selectionLast = anchor;\r\n  } else {\r\n    selectionFirst = anchor;\r\n    selectionLast = focus;\r\n  }\r\n  if (firstOfLine !== null && lastOfLine !== null && selectionFirst.key === firstOfLine.getKey() && selectionFirst.offset === 0 && selectionLast.key === lastOfLine.getKey() && selectionLast.offset === lastOfLine.getTextContentSize()) {\r\n    return indentOrOutdent;\r\n  }\r\n  // 3. Else: tab/outdent\r\n  return tabOrOutdent;\r\n}\r\nfunction handleMultilineIndent(type) {\r\n  const selection = lexical.$getSelection();\r\n  if (!lexical.$isRangeSelection(selection) || !$isSelectionInCode(selection)) {\r\n    return false;\r\n  }\r\n  const codeLines = $getCodeLines(selection);\r\n  const codeLinesLength = codeLines.length;\r\n  // Multiple lines selection\r\n  if (codeLines.length > 1) {\r\n    for (let i = 0; i < codeLinesLength; i++) {\r\n      const line = codeLines[i];\r\n      if (line.length > 0) {\r\n        let firstOfLine = line[0];\r\n        // First and last lines might not be complete\r\n        if (i === 0) {\r\n          firstOfLine = getFirstCodeNodeOfLine(firstOfLine);\r\n        }\r\n        if (firstOfLine !== null) {\r\n          if (type === lexical.INDENT_CONTENT_COMMAND) {\r\n            firstOfLine.insertBefore(lexical.$createTabNode());\r\n          } else if (lexical.$isTabNode(firstOfLine)) {\r\n            firstOfLine.remove();\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  // Just one line\r\n  const selectionNodes = selection.getNodes();\r\n  const firstNode = selectionNodes[0];\r\n  if (!($isCodeNode(firstNode) || $isCodeHighlightNode(firstNode) || lexical.$isTabNode(firstNode) || lexical.$isLineBreakNode(firstNode))) {\r\n    throw Error(`Expected selection firstNode to be CodeHighlightNode or CodeTabNode`);\r\n  }\r\n  if ($isCodeNode(firstNode)) {\r\n    // CodeNode is empty\r\n    if (type === lexical.INDENT_CONTENT_COMMAND) {\r\n      selection.insertNodes([lexical.$createTabNode()]);\r\n    }\r\n    return true;\r\n  }\r\n  const firstOfLine = getFirstCodeNodeOfLine(firstNode);\r\n  if (!(firstOfLine !== null)) {\r\n    throw Error(`Expected getFirstCodeNodeOfLine to return a valid Code Node`);\r\n  }\r\n  if (type === lexical.INDENT_CONTENT_COMMAND) {\r\n    if (lexical.$isLineBreakNode(firstOfLine)) {\r\n      firstOfLine.insertAfter(lexical.$createTabNode());\r\n    } else {\r\n      firstOfLine.insertBefore(lexical.$createTabNode());\r\n    }\r\n  } else if (lexical.$isTabNode(firstOfLine)) {\r\n    firstOfLine.remove();\r\n  }\r\n  return true;\r\n}\r\nfunction handleShiftLines(type, event) {\r\n  // We only care about the alt+arrow keys\r\n  const selection = lexical.$getSelection();\r\n  if (!lexical.$isRangeSelection(selection)) {\r\n    return false;\r\n  }\r\n\r\n  // I'm not quite sure why, but it seems like calling anchor.getNode() collapses the selection here\r\n  // So first, get the anchor and the focus, then get their nodes\r\n  const {\r\n    anchor,\r\n    focus\r\n  } = selection;\r\n  const anchorOffset = anchor.offset;\r\n  const focusOffset = focus.offset;\r\n  const anchorNode = anchor.getNode();\r\n  const focusNode = focus.getNode();\r\n  const arrowIsUp = type === lexical.KEY_ARROW_UP_COMMAND;\r\n\r\n  // Ensure the selection is within the codeblock\r\n  if (!$isSelectionInCode(selection) || !($isCodeHighlightNode(anchorNode) || lexical.$isTabNode(anchorNode)) || !($isCodeHighlightNode(focusNode) || lexical.$isTabNode(focusNode))) {\r\n    return false;\r\n  }\r\n  if (!event.altKey) {\r\n    // Handle moving selection out of the code block, given there are no\r\n    // sibling thats can natively take the selection.\r\n    if (selection.isCollapsed()) {\r\n      const codeNode = anchorNode.getParentOrThrow();\r\n      if (arrowIsUp && anchorOffset === 0 && anchorNode.getPreviousSibling() === null) {\r\n        const codeNodeSibling = codeNode.getPreviousSibling();\r\n        if (codeNodeSibling === null) {\r\n          codeNode.selectPrevious();\r\n          event.preventDefault();\r\n          return true;\r\n        }\r\n      } else if (!arrowIsUp && anchorOffset === anchorNode.getTextContentSize() && anchorNode.getNextSibling() === null) {\r\n        const codeNodeSibling = codeNode.getNextSibling();\r\n        if (codeNodeSibling === null) {\r\n          codeNode.selectNext();\r\n          event.preventDefault();\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  let start;\r\n  let end;\r\n  if (anchorNode.isBefore(focusNode)) {\r\n    start = getFirstCodeNodeOfLine(anchorNode);\r\n    end = getLastCodeNodeOfLine(focusNode);\r\n  } else {\r\n    start = getFirstCodeNodeOfLine(focusNode);\r\n    end = getLastCodeNodeOfLine(anchorNode);\r\n  }\r\n  if (start == null || end == null) {\r\n    return false;\r\n  }\r\n  const range = start.getNodesBetween(end);\r\n  for (let i = 0; i < range.length; i++) {\r\n    const node = range[i];\r\n    if (!$isCodeHighlightNode(node) && !lexical.$isTabNode(node) && !lexical.$isLineBreakNode(node)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // After this point, we know the selection is within the codeblock. We may not be able to\r\n  // actually move the lines around, but we want to return true either way to prevent\r\n  // the event's default behavior\r\n  event.preventDefault();\r\n  event.stopPropagation(); // required to stop cursor movement under Firefox\r\n\r\n  const linebreak = arrowIsUp ? start.getPreviousSibling() : end.getNextSibling();\r\n  if (!lexical.$isLineBreakNode(linebreak)) {\r\n    return true;\r\n  }\r\n  const sibling = arrowIsUp ? linebreak.getPreviousSibling() : linebreak.getNextSibling();\r\n  if (sibling == null) {\r\n    return true;\r\n  }\r\n  const maybeInsertionPoint = $isCodeHighlightNode(sibling) || lexical.$isTabNode(sibling) || lexical.$isLineBreakNode(sibling) ? arrowIsUp ? getFirstCodeNodeOfLine(sibling) : getLastCodeNodeOfLine(sibling) : null;\r\n  let insertionPoint = maybeInsertionPoint != null ? maybeInsertionPoint : sibling;\r\n  linebreak.remove();\r\n  range.forEach(node => node.remove());\r\n  if (type === lexical.KEY_ARROW_UP_COMMAND) {\r\n    range.forEach(node => insertionPoint.insertBefore(node));\r\n    insertionPoint.insertBefore(linebreak);\r\n  } else {\r\n    insertionPoint.insertAfter(linebreak);\r\n    insertionPoint = linebreak;\r\n    range.forEach(node => {\r\n      insertionPoint.insertAfter(node);\r\n      insertionPoint = node;\r\n    });\r\n  }\r\n  selection.setTextNodeRange(anchorNode, anchorOffset, focusNode, focusOffset);\r\n  return true;\r\n}\r\nfunction handleMoveTo(type, event) {\r\n  const selection = lexical.$getSelection();\r\n  if (!lexical.$isRangeSelection(selection)) {\r\n    return false;\r\n  }\r\n  const {\r\n    anchor,\r\n    focus\r\n  } = selection;\r\n  const anchorNode = anchor.getNode();\r\n  const focusNode = focus.getNode();\r\n  const isMoveToStart = type === lexical.MOVE_TO_START;\r\n  if (!($isCodeHighlightNode(anchorNode) || lexical.$isTabNode(anchorNode)) || !($isCodeHighlightNode(focusNode) || lexical.$isTabNode(focusNode))) {\r\n    return false;\r\n  }\r\n  if (isMoveToStart) {\r\n    const start = getStartOfCodeInLine(focusNode, focus.offset);\r\n    if (start !== null) {\r\n      const {\r\n        node,\r\n        offset\r\n      } = start;\r\n      if (lexical.$isLineBreakNode(node)) {\r\n        node.selectNext(0, 0);\r\n      } else {\r\n        selection.setTextNodeRange(node, offset, node, offset);\r\n      }\r\n    } else {\r\n      focusNode.getParentOrThrow().selectStart();\r\n    }\r\n  } else {\r\n    const node = getEndOfCodeInLine(focusNode);\r\n    node.select();\r\n  }\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n  return true;\r\n}\r\nfunction registerCodeHighlighting(editor, tokenizer) {\r\n  if (!editor.hasNodes([CodeNode, CodeHighlightNode])) {\r\n    throw new Error('CodeHighlightPlugin: CodeNode or CodeHighlightNode not registered on editor');\r\n  }\r\n  if (tokenizer == null) {\r\n    tokenizer = PrismTokenizer;\r\n  }\r\n  return utils.mergeRegister(editor.registerMutationListener(CodeNode, mutations => {\r\n    editor.update(() => {\r\n      for (const [key, type] of mutations) {\r\n        if (type !== 'destroyed') {\r\n          const node = lexical.$getNodeByKey(key);\r\n          if (node !== null) {\r\n            updateCodeGutter(node, editor);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }), editor.registerNodeTransform(CodeNode, node => codeNodeTransform(node, editor, tokenizer)), editor.registerNodeTransform(lexical.TextNode, node => textNodeTransform(node, editor, tokenizer)), editor.registerNodeTransform(CodeHighlightNode, node => textNodeTransform(node, editor, tokenizer)), editor.registerCommand(lexical.KEY_TAB_COMMAND, event => {\r\n    const command = handleTab(event.shiftKey);\r\n    if (command === null) {\r\n      return false;\r\n    }\r\n    event.preventDefault();\r\n    editor.dispatchCommand(command, undefined);\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.INSERT_TAB_COMMAND, () => {\r\n    const selection = lexical.$getSelection();\r\n    if (!$isSelectionInCode(selection)) {\r\n      return false;\r\n    }\r\n    lexical.$insertNodes([lexical.$createTabNode()]);\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.INDENT_CONTENT_COMMAND, payload => handleMultilineIndent(lexical.INDENT_CONTENT_COMMAND), lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.OUTDENT_CONTENT_COMMAND, payload => handleMultilineIndent(lexical.OUTDENT_CONTENT_COMMAND), lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.KEY_ARROW_UP_COMMAND, payload => handleShiftLines(lexical.KEY_ARROW_UP_COMMAND, payload), lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.KEY_ARROW_DOWN_COMMAND, payload => handleShiftLines(lexical.KEY_ARROW_DOWN_COMMAND, payload), lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.MOVE_TO_END, payload => handleMoveTo(lexical.MOVE_TO_END, payload), lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.MOVE_TO_START, payload => handleMoveTo(lexical.MOVE_TO_START, payload), lexical.COMMAND_PRIORITY_LOW));\r\n}\r\n\r\nexports.$createCodeHighlightNode = $createCodeHighlightNode;\r\nexports.$createCodeNode = $createCodeNode;\r\nexports.$isCodeHighlightNode = $isCodeHighlightNode;\r\nexports.$isCodeNode = $isCodeNode;\r\nexports.CODE_LANGUAGE_FRIENDLY_NAME_MAP = CODE_LANGUAGE_FRIENDLY_NAME_MAP;\r\nexports.CODE_LANGUAGE_MAP = CODE_LANGUAGE_MAP;\r\nexports.CodeHighlightNode = CodeHighlightNode;\r\nexports.CodeNode = CodeNode;\r\nexports.DEFAULT_CODE_LANGUAGE = DEFAULT_CODE_LANGUAGE;\r\nexports.PrismTokenizer = PrismTokenizer;\r\nexports.getCodeLanguages = getCodeLanguages;\r\nexports.getDefaultCodeLanguage = getDefaultCodeLanguage;\r\nexports.getEndOfCodeInLine = getEndOfCodeInLine;\r\nexports.getFirstCodeNodeOfLine = getFirstCodeNodeOfLine;\r\nexports.getLanguageFriendlyName = getLanguageFriendlyName;\r\nexports.getLastCodeNodeOfLine = getLastCodeNodeOfLine;\r\nexports.getStartOfCodeInLine = getStartOfCodeInLine;\r\nexports.normalizeCodeLang = normalizeCodeLang;\r\nexports.registerCodeHighlighting = registerCodeHighlighting;\r\n", "/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n'use strict'\r\nconst LexicalCode = process.env.NODE_ENV === 'development' ? require('./LexicalCode.dev.js') : require('./LexicalCode.prod.js')\r\nmodule.exports = LexicalCode;"],
  "mappings": "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",
  "names": ["Prism", "_self", "lang", "Prism", "Prism", "Prism", "Prism", "Prism", "Prism", "Prism", "self", "firstOfLine"]
}
