import {
  require_LexicalComposerContext
} from "./chunk-U7AICSBZ.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  require_Lexical
} from "./chunk-O75NZ7RX.js";
import {
  __commonJS
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@lexical/react/LexicalComposer.dev.js
var require_LexicalComposer_dev = __commonJS({
  "node_modules/@lexical/react/LexicalComposer.dev.js"(exports) {
    "use strict";
    var LexicalComposerContext = require_LexicalComposerContext();
    var lexical = require_Lexical();
    var React = require_react();
    var CAN_USE_DOM = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
    var useLayoutEffectImpl = CAN_USE_DOM ? React.useLayoutEffect : React.useEffect;
    var useLayoutEffect = useLayoutEffectImpl;
    var HISTORY_MERGE_OPTIONS = {
      tag: "history-merge"
    };
    function LexicalComposer({
      initialConfig,
      children
    }) {
      const composerContext = React.useMemo(
        () => {
          const {
            theme,
            namespace,
            editor__DEPRECATED: initialEditor,
            nodes,
            onError,
            editorState: initialEditorState,
            html
          } = initialConfig;
          const context = LexicalComposerContext.createLexicalComposerContext(null, theme);
          let editor = initialEditor || null;
          if (editor === null) {
            const newEditor = lexical.createEditor({
              editable: initialConfig.editable,
              html,
              namespace,
              nodes,
              onError: (error) => onError(error, newEditor),
              theme
            });
            initializeEditor(newEditor, initialEditorState);
            editor = newEditor;
          }
          return [editor, context];
        },
        // We only do this for init
        // eslint-disable-next-line react-hooks/exhaustive-deps
        []
      );
      useLayoutEffect(() => {
        const isEditable = initialConfig.editable;
        const [editor] = composerContext;
        editor.setEditable(isEditable !== void 0 ? isEditable : true);
      }, []);
      return React.createElement(LexicalComposerContext.LexicalComposerContext.Provider, {
        value: composerContext
      }, children);
    }
    function initializeEditor(editor, initialEditorState) {
      if (initialEditorState === null) {
        return;
      } else if (initialEditorState === void 0) {
        editor.update(() => {
          const root = lexical.$getRoot();
          if (root.isEmpty()) {
            const paragraph = lexical.$createParagraphNode();
            root.append(paragraph);
            const activeElement = CAN_USE_DOM ? document.activeElement : null;
            if (lexical.$getSelection() !== null || activeElement !== null && activeElement === editor.getRootElement()) {
              paragraph.select();
            }
          }
        }, HISTORY_MERGE_OPTIONS);
      } else if (initialEditorState !== null) {
        switch (typeof initialEditorState) {
          case "string": {
            const parsedEditorState = editor.parseEditorState(initialEditorState);
            editor.setEditorState(parsedEditorState, HISTORY_MERGE_OPTIONS);
            break;
          }
          case "object": {
            editor.setEditorState(initialEditorState, HISTORY_MERGE_OPTIONS);
            break;
          }
          case "function": {
            editor.update(() => {
              const root = lexical.$getRoot();
              if (root.isEmpty()) {
                initialEditorState(editor);
              }
            }, HISTORY_MERGE_OPTIONS);
            break;
          }
        }
      }
    }
    exports.LexicalComposer = LexicalComposer;
  }
});

// node_modules/@lexical/react/LexicalComposer.js
var require_LexicalComposer = __commonJS({
  "node_modules/@lexical/react/LexicalComposer.js"(exports, module) {
    var LexicalComposer = true ? require_LexicalComposer_dev() : null;
    module.exports = LexicalComposer;
  }
});
export default require_LexicalComposer();
//# sourceMappingURL=@lexical_react_LexicalComposer.js.map
