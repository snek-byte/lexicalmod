{
  "version": 3,
  "sources": ["../../@lexical/react/LexicalComposer.dev.js", "../../@lexical/react/LexicalComposer.js"],
  "sourcesContent": ["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n'use strict';\r\n\r\nvar LexicalComposerContext = require('@lexical/react/LexicalComposerContext');\r\nvar lexical = require('lexical');\r\nvar React = require('react');\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n\r\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nconst useLayoutEffectImpl = CAN_USE_DOM ? React.useLayoutEffect : React.useEffect;\r\nvar useLayoutEffect = useLayoutEffectImpl;\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nconst HISTORY_MERGE_OPTIONS = {\r\n  tag: 'history-merge'\r\n};\r\nfunction LexicalComposer({\r\n  initialConfig,\r\n  children\r\n}) {\r\n  const composerContext = React.useMemo(() => {\r\n    const {\r\n      theme,\r\n      namespace,\r\n      editor__DEPRECATED: initialEditor,\r\n      nodes,\r\n      onError,\r\n      editorState: initialEditorState,\r\n      html\r\n    } = initialConfig;\r\n    const context = LexicalComposerContext.createLexicalComposerContext(null, theme);\r\n    let editor = initialEditor || null;\r\n    if (editor === null) {\r\n      const newEditor = lexical.createEditor({\r\n        editable: initialConfig.editable,\r\n        html,\r\n        namespace,\r\n        nodes,\r\n        onError: error => onError(error, newEditor),\r\n        theme\r\n      });\r\n      initializeEditor(newEditor, initialEditorState);\r\n      editor = newEditor;\r\n    }\r\n    return [editor, context];\r\n  },\r\n  // We only do this for init\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  []);\r\n  useLayoutEffect(() => {\r\n    const isEditable = initialConfig.editable;\r\n    const [editor] = composerContext;\r\n    editor.setEditable(isEditable !== undefined ? isEditable : true);\r\n\r\n    // We only do this for init\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  return /*#__PURE__*/React.createElement(LexicalComposerContext.LexicalComposerContext.Provider, {\r\n    value: composerContext\r\n  }, children);\r\n}\r\nfunction initializeEditor(editor, initialEditorState) {\r\n  if (initialEditorState === null) {\r\n    return;\r\n  } else if (initialEditorState === undefined) {\r\n    editor.update(() => {\r\n      const root = lexical.$getRoot();\r\n      if (root.isEmpty()) {\r\n        const paragraph = lexical.$createParagraphNode();\r\n        root.append(paragraph);\r\n        const activeElement = CAN_USE_DOM ? document.activeElement : null;\r\n        if (lexical.$getSelection() !== null || activeElement !== null && activeElement === editor.getRootElement()) {\r\n          paragraph.select();\r\n        }\r\n      }\r\n    }, HISTORY_MERGE_OPTIONS);\r\n  } else if (initialEditorState !== null) {\r\n    switch (typeof initialEditorState) {\r\n      case 'string':\r\n        {\r\n          const parsedEditorState = editor.parseEditorState(initialEditorState);\r\n          editor.setEditorState(parsedEditorState, HISTORY_MERGE_OPTIONS);\r\n          break;\r\n        }\r\n      case 'object':\r\n        {\r\n          editor.setEditorState(initialEditorState, HISTORY_MERGE_OPTIONS);\r\n          break;\r\n        }\r\n      case 'function':\r\n        {\r\n          editor.update(() => {\r\n            const root = lexical.$getRoot();\r\n            if (root.isEmpty()) {\r\n              initialEditorState(editor);\r\n            }\r\n          }, HISTORY_MERGE_OPTIONS);\r\n          break;\r\n        }\r\n    }\r\n  }\r\n}\r\n\r\nexports.LexicalComposer = LexicalComposer;\r\n", "/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n'use strict'\r\nconst LexicalComposer = process.env.NODE_ENV === 'development' ? require('./LexicalComposer.dev.js') : require('./LexicalComposer.prod.js')\r\nmodule.exports = LexicalComposer;"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAQA,QAAI,yBAAyB;AAC7B,QAAI,UAAU;AACd,QAAI,QAAQ;AAUZ,QAAM,cAAc,OAAO,WAAW,eAAe,OAAO,OAAO,aAAa,eAAe,OAAO,OAAO,SAAS,kBAAkB;AASxI,QAAM,sBAAsB,cAAc,MAAM,kBAAkB,MAAM;AACxE,QAAI,kBAAkB;AAStB,QAAM,wBAAwB;AAAA,MAC5B,KAAK;AAAA,IACP;AACA,aAAS,gBAAgB;AAAA,MACvB;AAAA,MACA;AAAA,IACF,GAAG;AACD,YAAM,kBAAkB,MAAM;AAAA,QAAQ,MAAM;AAC1C,gBAAM;AAAA,YACJ;AAAA,YACA;AAAA,YACA,oBAAoB;AAAA,YACpB;AAAA,YACA;AAAA,YACA,aAAa;AAAA,YACb;AAAA,UACF,IAAI;AACJ,gBAAM,UAAU,uBAAuB,6BAA6B,MAAM,KAAK;AAC/E,cAAI,SAAS,iBAAiB;AAC9B,cAAI,WAAW,MAAM;AACnB,kBAAM,YAAY,QAAQ,aAAa;AAAA,cACrC,UAAU,cAAc;AAAA,cACxB;AAAA,cACA;AAAA,cACA;AAAA,cACA,SAAS,WAAS,QAAQ,OAAO,SAAS;AAAA,cAC1C;AAAA,YACF,CAAC;AACD,6BAAiB,WAAW,kBAAkB;AAC9C,qBAAS;AAAA,UACX;AACA,iBAAO,CAAC,QAAQ,OAAO;AAAA,QACzB;AAAA;AAAA;AAAA,QAGA,CAAC;AAAA,MAAC;AACF,sBAAgB,MAAM;AACpB,cAAM,aAAa,cAAc;AACjC,cAAM,CAAC,MAAM,IAAI;AACjB,eAAO,YAAY,eAAe,SAAY,aAAa,IAAI;AAAA,MAIjE,GAAG,CAAC,CAAC;AACL,aAAoB,MAAM,cAAc,uBAAuB,uBAAuB,UAAU;AAAA,QAC9F,OAAO;AAAA,MACT,GAAG,QAAQ;AAAA,IACb;AACA,aAAS,iBAAiB,QAAQ,oBAAoB;AACpD,UAAI,uBAAuB,MAAM;AAC/B;AAAA,MACF,WAAW,uBAAuB,QAAW;AAC3C,eAAO,OAAO,MAAM;AAClB,gBAAM,OAAO,QAAQ,SAAS;AAC9B,cAAI,KAAK,QAAQ,GAAG;AAClB,kBAAM,YAAY,QAAQ,qBAAqB;AAC/C,iBAAK,OAAO,SAAS;AACrB,kBAAM,gBAAgB,cAAc,SAAS,gBAAgB;AAC7D,gBAAI,QAAQ,cAAc,MAAM,QAAQ,kBAAkB,QAAQ,kBAAkB,OAAO,eAAe,GAAG;AAC3G,wBAAU,OAAO;AAAA,YACnB;AAAA,UACF;AAAA,QACF,GAAG,qBAAqB;AAAA,MAC1B,WAAW,uBAAuB,MAAM;AACtC,gBAAQ,OAAO,oBAAoB;AAAA,UACjC,KAAK,UACH;AACE,kBAAM,oBAAoB,OAAO,iBAAiB,kBAAkB;AACpE,mBAAO,eAAe,mBAAmB,qBAAqB;AAC9D;AAAA,UACF;AAAA,UACF,KAAK,UACH;AACE,mBAAO,eAAe,oBAAoB,qBAAqB;AAC/D;AAAA,UACF;AAAA,UACF,KAAK,YACH;AACE,mBAAO,OAAO,MAAM;AAClB,oBAAM,OAAO,QAAQ,SAAS;AAC9B,kBAAI,KAAK,QAAQ,GAAG;AAClB,mCAAmB,MAAM;AAAA,cAC3B;AAAA,YACF,GAAG,qBAAqB;AACxB;AAAA,UACF;AAAA,QACJ;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,kBAAkB;AAAA;AAAA;;;ACjI1B;AAAA;AAOA,QAAM,kBAAkB,OAAyC,gCAAsC;AACvG,WAAO,UAAU;AAAA;AAAA;",
  "names": []
}
