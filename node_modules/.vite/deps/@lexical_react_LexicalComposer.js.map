{
  "version": 3,
  "sources": ["../../@lexical/react/LexicalComposer.dev.js", "../../@lexical/react/LexicalComposer.js"],
  "sourcesContent": ["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar LexicalComposerContext = require('@lexical/react/LexicalComposerContext');\nvar lexical = require('lexical');\nvar React = require('react');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst useLayoutEffectImpl = CAN_USE_DOM ? React.useLayoutEffect : React.useEffect;\nvar useLayoutEffect = useLayoutEffectImpl;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst HISTORY_MERGE_OPTIONS = {\n  tag: 'history-merge'\n};\nfunction LexicalComposer({\n  initialConfig,\n  children\n}) {\n  const composerContext = React.useMemo(() => {\n    const {\n      theme,\n      namespace,\n      editor__DEPRECATED: initialEditor,\n      nodes,\n      onError,\n      editorState: initialEditorState,\n      html\n    } = initialConfig;\n    const context = LexicalComposerContext.createLexicalComposerContext(null, theme);\n    let editor = initialEditor || null;\n    if (editor === null) {\n      const newEditor = lexical.createEditor({\n        editable: initialConfig.editable,\n        html,\n        namespace,\n        nodes,\n        onError: error => onError(error, newEditor),\n        theme\n      });\n      initializeEditor(newEditor, initialEditorState);\n      editor = newEditor;\n    }\n    return [editor, context];\n  },\n  // We only do this for init\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  useLayoutEffect(() => {\n    const isEditable = initialConfig.editable;\n    const [editor] = composerContext;\n    editor.setEditable(isEditable !== undefined ? isEditable : true);\n\n    // We only do this for init\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/React.createElement(LexicalComposerContext.LexicalComposerContext.Provider, {\n    value: composerContext\n  }, children);\n}\nfunction initializeEditor(editor, initialEditorState) {\n  if (initialEditorState === null) {\n    return;\n  } else if (initialEditorState === undefined) {\n    editor.update(() => {\n      const root = lexical.$getRoot();\n      if (root.isEmpty()) {\n        const paragraph = lexical.$createParagraphNode();\n        root.append(paragraph);\n        const activeElement = CAN_USE_DOM ? document.activeElement : null;\n        if (lexical.$getSelection() !== null || activeElement !== null && activeElement === editor.getRootElement()) {\n          paragraph.select();\n        }\n      }\n    }, HISTORY_MERGE_OPTIONS);\n  } else if (initialEditorState !== null) {\n    switch (typeof initialEditorState) {\n      case 'string':\n        {\n          const parsedEditorState = editor.parseEditorState(initialEditorState);\n          editor.setEditorState(parsedEditorState, HISTORY_MERGE_OPTIONS);\n          break;\n        }\n      case 'object':\n        {\n          editor.setEditorState(initialEditorState, HISTORY_MERGE_OPTIONS);\n          break;\n        }\n      case 'function':\n        {\n          editor.update(() => {\n            const root = lexical.$getRoot();\n            if (root.isEmpty()) {\n              initialEditorState(editor);\n            }\n          }, HISTORY_MERGE_OPTIONS);\n          break;\n        }\n    }\n  }\n}\n\nexports.LexicalComposer = LexicalComposer;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict'\nconst LexicalComposer = process.env.NODE_ENV === 'development' ? require('./LexicalComposer.dev.js') : require('./LexicalComposer.prod.js')\nmodule.exports = LexicalComposer;"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAQA,QAAI,yBAAyB;AAC7B,QAAI,UAAU;AACd,QAAI,QAAQ;AAUZ,QAAM,cAAc,OAAO,WAAW,eAAe,OAAO,OAAO,aAAa,eAAe,OAAO,OAAO,SAAS,kBAAkB;AASxI,QAAM,sBAAsB,cAAc,MAAM,kBAAkB,MAAM;AACxE,QAAI,kBAAkB;AAStB,QAAM,wBAAwB;AAAA,MAC5B,KAAK;AAAA,IACP;AACA,aAAS,gBAAgB;AAAA,MACvB;AAAA,MACA;AAAA,IACF,GAAG;AACD,YAAM,kBAAkB,MAAM;AAAA,QAAQ,MAAM;AAC1C,gBAAM;AAAA,YACJ;AAAA,YACA;AAAA,YACA,oBAAoB;AAAA,YACpB;AAAA,YACA;AAAA,YACA,aAAa;AAAA,YACb;AAAA,UACF,IAAI;AACJ,gBAAM,UAAU,uBAAuB,6BAA6B,MAAM,KAAK;AAC/E,cAAI,SAAS,iBAAiB;AAC9B,cAAI,WAAW,MAAM;AACnB,kBAAM,YAAY,QAAQ,aAAa;AAAA,cACrC,UAAU,cAAc;AAAA,cACxB;AAAA,cACA;AAAA,cACA;AAAA,cACA,SAAS,WAAS,QAAQ,OAAO,SAAS;AAAA,cAC1C;AAAA,YACF,CAAC;AACD,6BAAiB,WAAW,kBAAkB;AAC9C,qBAAS;AAAA,UACX;AACA,iBAAO,CAAC,QAAQ,OAAO;AAAA,QACzB;AAAA;AAAA;AAAA,QAGA,CAAC;AAAA,MAAC;AACF,sBAAgB,MAAM;AACpB,cAAM,aAAa,cAAc;AACjC,cAAM,CAAC,MAAM,IAAI;AACjB,eAAO,YAAY,eAAe,SAAY,aAAa,IAAI;AAAA,MAIjE,GAAG,CAAC,CAAC;AACL,aAAoB,MAAM,cAAc,uBAAuB,uBAAuB,UAAU;AAAA,QAC9F,OAAO;AAAA,MACT,GAAG,QAAQ;AAAA,IACb;AACA,aAAS,iBAAiB,QAAQ,oBAAoB;AACpD,UAAI,uBAAuB,MAAM;AAC/B;AAAA,MACF,WAAW,uBAAuB,QAAW;AAC3C,eAAO,OAAO,MAAM;AAClB,gBAAM,OAAO,QAAQ,SAAS;AAC9B,cAAI,KAAK,QAAQ,GAAG;AAClB,kBAAM,YAAY,QAAQ,qBAAqB;AAC/C,iBAAK,OAAO,SAAS;AACrB,kBAAM,gBAAgB,cAAc,SAAS,gBAAgB;AAC7D,gBAAI,QAAQ,cAAc,MAAM,QAAQ,kBAAkB,QAAQ,kBAAkB,OAAO,eAAe,GAAG;AAC3G,wBAAU,OAAO;AAAA,YACnB;AAAA,UACF;AAAA,QACF,GAAG,qBAAqB;AAAA,MAC1B,WAAW,uBAAuB,MAAM;AACtC,gBAAQ,OAAO,oBAAoB;AAAA,UACjC,KAAK,UACH;AACE,kBAAM,oBAAoB,OAAO,iBAAiB,kBAAkB;AACpE,mBAAO,eAAe,mBAAmB,qBAAqB;AAC9D;AAAA,UACF;AAAA,UACF,KAAK,UACH;AACE,mBAAO,eAAe,oBAAoB,qBAAqB;AAC/D;AAAA,UACF;AAAA,UACF,KAAK,YACH;AACE,mBAAO,OAAO,MAAM;AAClB,oBAAM,OAAO,QAAQ,SAAS;AAC9B,kBAAI,KAAK,QAAQ,GAAG;AAClB,mCAAmB,MAAM;AAAA,cAC3B;AAAA,YACF,GAAG,qBAAqB;AACxB;AAAA,UACF;AAAA,QACJ;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,kBAAkB;AAAA;AAAA;;;ACjI1B;AAAA;AAOA,QAAM,kBAAkB,OAAyC,gCAAsC;AACvG,WAAO,UAAU;AAAA;AAAA;",
  "names": []
}
