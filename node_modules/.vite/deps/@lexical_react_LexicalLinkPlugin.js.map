{
  "version": 3,
  "sources": ["../../@lexical/react/LexicalLinkPlugin.dev.js", "../../@lexical/react/LexicalLinkPlugin.js"],
  "sourcesContent": ["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n'use strict';\r\n\r\nvar link = require('@lexical/link');\r\nvar LexicalComposerContext = require('@lexical/react/LexicalComposerContext');\r\nvar utils = require('@lexical/utils');\r\nvar lexical = require('lexical');\r\nvar react = require('react');\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nfunction LinkPlugin({\r\n  validateUrl\r\n}) {\r\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\r\n  react.useEffect(() => {\r\n    if (!editor.hasNodes([link.LinkNode])) {\r\n      throw new Error('LinkPlugin: LinkNode not registered on editor');\r\n    }\r\n    return utils.mergeRegister(editor.registerCommand(link.TOGGLE_LINK_COMMAND, payload => {\r\n      if (payload === null) {\r\n        link.toggleLink(payload);\r\n        return true;\r\n      } else if (typeof payload === 'string') {\r\n        if (validateUrl === undefined || validateUrl(payload)) {\r\n          link.toggleLink(payload);\r\n          return true;\r\n        }\r\n        return false;\r\n      } else {\r\n        const {\r\n          url,\r\n          target,\r\n          rel,\r\n          title\r\n        } = payload;\r\n        link.toggleLink(url, {\r\n          rel,\r\n          target,\r\n          title\r\n        });\r\n        return true;\r\n      }\r\n    }, lexical.COMMAND_PRIORITY_LOW), validateUrl !== undefined ? editor.registerCommand(lexical.PASTE_COMMAND, event => {\r\n      const selection = lexical.$getSelection();\r\n      if (!lexical.$isRangeSelection(selection) || selection.isCollapsed() || !(event instanceof ClipboardEvent) || event.clipboardData == null) {\r\n        return false;\r\n      }\r\n      const clipboardText = event.clipboardData.getData('text');\r\n      if (!validateUrl(clipboardText)) {\r\n        return false;\r\n      }\r\n      // If we select nodes that are elements then avoid applying the link.\r\n      if (!selection.getNodes().some(node => lexical.$isElementNode(node))) {\r\n        editor.dispatchCommand(link.TOGGLE_LINK_COMMAND, clipboardText);\r\n        event.preventDefault();\r\n        return true;\r\n      }\r\n      return false;\r\n    }, lexical.COMMAND_PRIORITY_LOW) : () => {\r\n      // Don't paste arbritrary text as a link when there's no validate function\r\n    });\r\n  }, [editor, validateUrl]);\r\n  return null;\r\n}\r\n\r\nexports.LinkPlugin = LinkPlugin;\r\n", "/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n'use strict'\r\nconst LexicalLinkPlugin = process.env.NODE_ENV === 'development' ? require('./LexicalLinkPlugin.dev.js') : require('./LexicalLinkPlugin.prod.js')\r\nmodule.exports = LexicalLinkPlugin;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAQA,QAAI,OAAO;AACX,QAAI,yBAAyB;AAC7B,QAAI,QAAQ;AACZ,QAAI,UAAU;AACd,QAAI,QAAQ;AASZ,aAAS,WAAW;AAAA,MAClB;AAAA,IACF,GAAG;AACD,YAAM,CAAC,MAAM,IAAI,uBAAuB,0BAA0B;AAClE,YAAM,UAAU,MAAM;AACpB,YAAI,CAAC,OAAO,SAAS,CAAC,KAAK,QAAQ,CAAC,GAAG;AACrC,gBAAM,IAAI,MAAM,+CAA+C;AAAA,QACjE;AACA,eAAO,MAAM,cAAc,OAAO,gBAAgB,KAAK,qBAAqB,aAAW;AACrF,cAAI,YAAY,MAAM;AACpB,iBAAK,WAAW,OAAO;AACvB,mBAAO;AAAA,UACT,WAAW,OAAO,YAAY,UAAU;AACtC,gBAAI,gBAAgB,UAAa,YAAY,OAAO,GAAG;AACrD,mBAAK,WAAW,OAAO;AACvB,qBAAO;AAAA,YACT;AACA,mBAAO;AAAA,UACT,OAAO;AACL,kBAAM;AAAA,cACJ;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF,IAAI;AACJ,iBAAK,WAAW,KAAK;AAAA,cACnB;AAAA,cACA;AAAA,cACA;AAAA,YACF,CAAC;AACD,mBAAO;AAAA,UACT;AAAA,QACF,GAAG,QAAQ,oBAAoB,GAAG,gBAAgB,SAAY,OAAO,gBAAgB,QAAQ,eAAe,WAAS;AACnH,gBAAM,YAAY,QAAQ,cAAc;AACxC,cAAI,CAAC,QAAQ,kBAAkB,SAAS,KAAK,UAAU,YAAY,KAAK,EAAE,iBAAiB,mBAAmB,MAAM,iBAAiB,MAAM;AACzI,mBAAO;AAAA,UACT;AACA,gBAAM,gBAAgB,MAAM,cAAc,QAAQ,MAAM;AACxD,cAAI,CAAC,YAAY,aAAa,GAAG;AAC/B,mBAAO;AAAA,UACT;AAEA,cAAI,CAAC,UAAU,SAAS,EAAE,KAAK,UAAQ,QAAQ,eAAe,IAAI,CAAC,GAAG;AACpE,mBAAO,gBAAgB,KAAK,qBAAqB,aAAa;AAC9D,kBAAM,eAAe;AACrB,mBAAO;AAAA,UACT;AACA,iBAAO;AAAA,QACT,GAAG,QAAQ,oBAAoB,IAAI,MAAM;AAAA,QAEzC,CAAC;AAAA,MACH,GAAG,CAAC,QAAQ,WAAW,CAAC;AACxB,aAAO;AAAA,IACT;AAEA,YAAQ,aAAa;AAAA;AAAA;;;AC5ErB;AAAA;AAOA,QAAM,oBAAoB,OAAyC,kCAAwC;AAC3G,WAAO,UAAU;AAAA;AAAA;",
  "names": []
}
