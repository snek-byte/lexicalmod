{
  "version": 3,
  "sources": ["../../@lexical/react/LexicalLinkPlugin.dev.js", "../../@lexical/react/LexicalLinkPlugin.js"],
  "sourcesContent": ["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar link = require('@lexical/link');\nvar LexicalComposerContext = require('@lexical/react/LexicalComposerContext');\nvar utils = require('@lexical/utils');\nvar lexical = require('lexical');\nvar react = require('react');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction LinkPlugin({\n  validateUrl\n}) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  react.useEffect(() => {\n    if (!editor.hasNodes([link.LinkNode])) {\n      throw new Error('LinkPlugin: LinkNode not registered on editor');\n    }\n    return utils.mergeRegister(editor.registerCommand(link.TOGGLE_LINK_COMMAND, payload => {\n      if (payload === null) {\n        link.toggleLink(payload);\n        return true;\n      } else if (typeof payload === 'string') {\n        if (validateUrl === undefined || validateUrl(payload)) {\n          link.toggleLink(payload);\n          return true;\n        }\n        return false;\n      } else {\n        const {\n          url,\n          target,\n          rel,\n          title\n        } = payload;\n        link.toggleLink(url, {\n          rel,\n          target,\n          title\n        });\n        return true;\n      }\n    }, lexical.COMMAND_PRIORITY_LOW), validateUrl !== undefined ? editor.registerCommand(lexical.PASTE_COMMAND, event => {\n      const selection = lexical.$getSelection();\n      if (!lexical.$isRangeSelection(selection) || selection.isCollapsed() || !(event instanceof ClipboardEvent) || event.clipboardData == null) {\n        return false;\n      }\n      const clipboardText = event.clipboardData.getData('text');\n      if (!validateUrl(clipboardText)) {\n        return false;\n      }\n      // If we select nodes that are elements then avoid applying the link.\n      if (!selection.getNodes().some(node => lexical.$isElementNode(node))) {\n        editor.dispatchCommand(link.TOGGLE_LINK_COMMAND, clipboardText);\n        event.preventDefault();\n        return true;\n      }\n      return false;\n    }, lexical.COMMAND_PRIORITY_LOW) : () => {\n      // Don't paste arbritrary text as a link when there's no validate function\n    });\n  }, [editor, validateUrl]);\n  return null;\n}\n\nexports.LinkPlugin = LinkPlugin;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict'\nconst LexicalLinkPlugin = process.env.NODE_ENV === 'development' ? require('./LexicalLinkPlugin.dev.js') : require('./LexicalLinkPlugin.prod.js')\nmodule.exports = LexicalLinkPlugin;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAQA,QAAI,OAAO;AACX,QAAI,yBAAyB;AAC7B,QAAI,QAAQ;AACZ,QAAI,UAAU;AACd,QAAI,QAAQ;AASZ,aAAS,WAAW;AAAA,MAClB;AAAA,IACF,GAAG;AACD,YAAM,CAAC,MAAM,IAAI,uBAAuB,0BAA0B;AAClE,YAAM,UAAU,MAAM;AACpB,YAAI,CAAC,OAAO,SAAS,CAAC,KAAK,QAAQ,CAAC,GAAG;AACrC,gBAAM,IAAI,MAAM,+CAA+C;AAAA,QACjE;AACA,eAAO,MAAM,cAAc,OAAO,gBAAgB,KAAK,qBAAqB,aAAW;AACrF,cAAI,YAAY,MAAM;AACpB,iBAAK,WAAW,OAAO;AACvB,mBAAO;AAAA,UACT,WAAW,OAAO,YAAY,UAAU;AACtC,gBAAI,gBAAgB,UAAa,YAAY,OAAO,GAAG;AACrD,mBAAK,WAAW,OAAO;AACvB,qBAAO;AAAA,YACT;AACA,mBAAO;AAAA,UACT,OAAO;AACL,kBAAM;AAAA,cACJ;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF,IAAI;AACJ,iBAAK,WAAW,KAAK;AAAA,cACnB;AAAA,cACA;AAAA,cACA;AAAA,YACF,CAAC;AACD,mBAAO;AAAA,UACT;AAAA,QACF,GAAG,QAAQ,oBAAoB,GAAG,gBAAgB,SAAY,OAAO,gBAAgB,QAAQ,eAAe,WAAS;AACnH,gBAAM,YAAY,QAAQ,cAAc;AACxC,cAAI,CAAC,QAAQ,kBAAkB,SAAS,KAAK,UAAU,YAAY,KAAK,EAAE,iBAAiB,mBAAmB,MAAM,iBAAiB,MAAM;AACzI,mBAAO;AAAA,UACT;AACA,gBAAM,gBAAgB,MAAM,cAAc,QAAQ,MAAM;AACxD,cAAI,CAAC,YAAY,aAAa,GAAG;AAC/B,mBAAO;AAAA,UACT;AAEA,cAAI,CAAC,UAAU,SAAS,EAAE,KAAK,UAAQ,QAAQ,eAAe,IAAI,CAAC,GAAG;AACpE,mBAAO,gBAAgB,KAAK,qBAAqB,aAAa;AAC9D,kBAAM,eAAe;AACrB,mBAAO;AAAA,UACT;AACA,iBAAO;AAAA,QACT,GAAG,QAAQ,oBAAoB,IAAI,MAAM;AAAA,QAEzC,CAAC;AAAA,MACH,GAAG,CAAC,QAAQ,WAAW,CAAC;AACxB,aAAO;AAAA,IACT;AAEA,YAAQ,aAAa;AAAA;AAAA;;;AC5ErB;AAAA;AAOA,QAAM,oBAAoB,OAAyC,kCAAwC;AAC3G,WAAO,UAAU;AAAA;AAAA;",
  "names": []
}
