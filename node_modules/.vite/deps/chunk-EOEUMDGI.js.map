{
  "version": 3,
  "sources": ["../../@lexical/link/LexicalLink.dev.js", "../../@lexical/link/LexicalLink.js"],
  "sourcesContent": ["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar utils = require('@lexical/utils');\nvar lexical = require('lexical');\n\n/** @module @lexical/link */\nconst SUPPORTED_URL_PROTOCOLS = new Set(['http:', 'https:', 'mailto:', 'sms:', 'tel:']);\n\n/** @noInheritDoc */\nclass LinkNode extends lexical.ElementNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  static getType() {\n    return 'link';\n  }\n  static clone(node) {\n    return new LinkNode(node.__url, {\n      rel: node.__rel,\n      target: node.__target,\n      title: node.__title\n    }, node.__key);\n  }\n  constructor(url, attributes = {}, key) {\n    super(key);\n    const {\n      target = null,\n      rel = null,\n      title = null\n    } = attributes;\n    this.__url = url;\n    this.__target = target;\n    this.__rel = rel;\n    this.__title = title;\n  }\n  createDOM(config) {\n    const element = document.createElement('a');\n    element.href = this.sanitizeUrl(this.__url);\n    if (this.__target !== null) {\n      element.target = this.__target;\n    }\n    if (this.__rel !== null) {\n      element.rel = this.__rel;\n    }\n    if (this.__title !== null) {\n      element.title = this.__title;\n    }\n    utils.addClassNamesToElement(element, config.theme.link);\n    return element;\n  }\n  updateDOM(prevNode, anchor, config) {\n    const url = this.__url;\n    const target = this.__target;\n    const rel = this.__rel;\n    const title = this.__title;\n    if (url !== prevNode.__url) {\n      anchor.href = url;\n    }\n    if (target !== prevNode.__target) {\n      if (target) {\n        anchor.target = target;\n      } else {\n        anchor.removeAttribute('target');\n      }\n    }\n    if (rel !== prevNode.__rel) {\n      if (rel) {\n        anchor.rel = rel;\n      } else {\n        anchor.removeAttribute('rel');\n      }\n    }\n    if (title !== prevNode.__title) {\n      if (title) {\n        anchor.title = title;\n      } else {\n        anchor.removeAttribute('title');\n      }\n    }\n    return false;\n  }\n  static importDOM() {\n    return {\n      a: node => ({\n        conversion: convertAnchorElement,\n        priority: 1\n      })\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createLinkNode(serializedNode.url, {\n      rel: serializedNode.rel,\n      target: serializedNode.target,\n      title: serializedNode.title\n    });\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n  sanitizeUrl(url) {\n    try {\n      const parsedUrl = new URL(url);\n      // eslint-disable-next-line no-script-url\n      if (!SUPPORTED_URL_PROTOCOLS.has(parsedUrl.protocol)) {\n        return 'about:blank';\n      }\n    } catch (_unused) {\n      return url;\n    }\n    return url;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      rel: this.getRel(),\n      target: this.getTarget(),\n      title: this.getTitle(),\n      type: 'link',\n      url: this.getURL(),\n      version: 1\n    };\n  }\n  getURL() {\n    return this.getLatest().__url;\n  }\n  setURL(url) {\n    const writable = this.getWritable();\n    writable.__url = url;\n  }\n  getTarget() {\n    return this.getLatest().__target;\n  }\n  setTarget(target) {\n    const writable = this.getWritable();\n    writable.__target = target;\n  }\n  getRel() {\n    return this.getLatest().__rel;\n  }\n  setRel(rel) {\n    const writable = this.getWritable();\n    writable.__rel = rel;\n  }\n  getTitle() {\n    return this.getLatest().__title;\n  }\n  setTitle(title) {\n    const writable = this.getWritable();\n    writable.__title = title;\n  }\n  insertNewAfter(_, restoreSelection = true) {\n    const linkNode = $createLinkNode(this.__url, {\n      rel: this.__rel,\n      target: this.__target,\n      title: this.__title\n    });\n    this.insertAfter(linkNode, restoreSelection);\n    return linkNode;\n  }\n  canInsertTextBefore() {\n    return false;\n  }\n  canInsertTextAfter() {\n    return false;\n  }\n  canBeEmpty() {\n    return false;\n  }\n  isInline() {\n    return true;\n  }\n  extractWithChild(child, selection, destination) {\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    const anchorNode = selection.anchor.getNode();\n    const focusNode = selection.focus.getNode();\n    return this.isParentOf(anchorNode) && this.isParentOf(focusNode) && selection.getTextContent().length > 0;\n  }\n}\nfunction convertAnchorElement(domNode) {\n  let node = null;\n  if (utils.isHTMLAnchorElement(domNode)) {\n    const content = domNode.textContent;\n    if (content !== null && content !== '' || domNode.children.length > 0) {\n      node = $createLinkNode(domNode.getAttribute('href') || '', {\n        rel: domNode.getAttribute('rel'),\n        target: domNode.getAttribute('target'),\n        title: domNode.getAttribute('title')\n      });\n    }\n  }\n  return {\n    node\n  };\n}\n\n/**\n * Takes a URL and creates a LinkNode.\n * @param url - The URL the LinkNode should direct to.\n * @param attributes - Optional HTML a tag attributes { target, rel, title }\n * @returns The LinkNode.\n */\nfunction $createLinkNode(url, attributes) {\n  return lexical.$applyNodeReplacement(new LinkNode(url, attributes));\n}\n\n/**\n * Determines if node is a LinkNode.\n * @param node - The node to be checked.\n * @returns true if node is a LinkNode, false otherwise.\n */\nfunction $isLinkNode(node) {\n  return node instanceof LinkNode;\n}\n// Custom node type to override `canInsertTextAfter` that will\n// allow typing within the link\nclass AutoLinkNode extends LinkNode {\n  static getType() {\n    return 'autolink';\n  }\n  static clone(node) {\n    return new AutoLinkNode(node.__url, {\n      rel: node.__rel,\n      target: node.__target,\n      title: node.__title\n    }, node.__key);\n  }\n  static importJSON(serializedNode) {\n    const node = $createAutoLinkNode(serializedNode.url, {\n      rel: serializedNode.rel,\n      target: serializedNode.target,\n      title: serializedNode.title\n    });\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n  static importDOM() {\n    // TODO: Should link node should handle the import over autolink?\n    return null;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      type: 'autolink',\n      version: 1\n    };\n  }\n  insertNewAfter(selection, restoreSelection = true) {\n    const element = this.getParentOrThrow().insertNewAfter(selection, restoreSelection);\n    if (lexical.$isElementNode(element)) {\n      const linkNode = $createAutoLinkNode(this.__url, {\n        rel: this.__rel,\n        target: this.__target,\n        title: this.__title\n      });\n      element.append(linkNode);\n      return linkNode;\n    }\n    return null;\n  }\n}\n\n/**\n * Takes a URL and creates an AutoLinkNode. AutoLinkNodes are generally automatically generated\n * during typing, which is especially useful when a button to generate a LinkNode is not practical.\n * @param url - The URL the LinkNode should direct to.\n * @param attributes - Optional HTML a tag attributes. { target, rel, title }\n * @returns The LinkNode.\n */\nfunction $createAutoLinkNode(url, attributes) {\n  return lexical.$applyNodeReplacement(new AutoLinkNode(url, attributes));\n}\n\n/**\n * Determines if node is an AutoLinkNode.\n * @param node - The node to be checked.\n * @returns true if node is an AutoLinkNode, false otherwise.\n */\nfunction $isAutoLinkNode(node) {\n  return node instanceof AutoLinkNode;\n}\nconst TOGGLE_LINK_COMMAND = lexical.createCommand('TOGGLE_LINK_COMMAND');\n\n/**\n * Generates or updates a LinkNode. It can also delete a LinkNode if the URL is null,\n * but saves any children and brings them up to the parent node.\n * @param url - The URL the link directs to.\n * @param attributes - Optional HTML a tag attributes. { target, rel, title }\n */\nfunction toggleLink(url, attributes = {}) {\n  const {\n    target,\n    title\n  } = attributes;\n  const rel = attributes.rel === undefined ? 'noreferrer' : attributes.rel;\n  const selection = lexical.$getSelection();\n  if (!lexical.$isRangeSelection(selection)) {\n    return;\n  }\n  const nodes = selection.extract();\n  if (url === null) {\n    // Remove LinkNodes\n    nodes.forEach(node => {\n      const parent = node.getParent();\n      if ($isLinkNode(parent)) {\n        const children = parent.getChildren();\n        for (let i = 0; i < children.length; i++) {\n          parent.insertBefore(children[i]);\n        }\n        parent.remove();\n      }\n    });\n  } else {\n    // Add or merge LinkNodes\n    if (nodes.length === 1) {\n      const firstNode = nodes[0];\n      // if the first node is a LinkNode or if its\n      // parent is a LinkNode, we update the URL, target and rel.\n      const linkNode = $getAncestor(firstNode, $isLinkNode);\n      if (linkNode !== null) {\n        linkNode.setURL(url);\n        if (target !== undefined) {\n          linkNode.setTarget(target);\n        }\n        if (rel !== null) {\n          linkNode.setRel(rel);\n        }\n        if (title !== undefined) {\n          linkNode.setTitle(title);\n        }\n        return;\n      }\n    }\n    let prevParent = null;\n    let linkNode = null;\n    nodes.forEach(node => {\n      const parent = node.getParent();\n      if (parent === linkNode || parent === null || lexical.$isElementNode(node) && !node.isInline()) {\n        return;\n      }\n      if ($isLinkNode(parent)) {\n        linkNode = parent;\n        parent.setURL(url);\n        if (target !== undefined) {\n          parent.setTarget(target);\n        }\n        if (rel !== null) {\n          linkNode.setRel(rel);\n        }\n        if (title !== undefined) {\n          linkNode.setTitle(title);\n        }\n        return;\n      }\n      if (!parent.is(prevParent)) {\n        prevParent = parent;\n        linkNode = $createLinkNode(url, {\n          rel,\n          target,\n          title\n        });\n        if ($isLinkNode(parent)) {\n          if (node.getPreviousSibling() === null) {\n            parent.insertBefore(linkNode);\n          } else {\n            parent.insertAfter(linkNode);\n          }\n        } else {\n          node.insertBefore(linkNode);\n        }\n      }\n      if ($isLinkNode(node)) {\n        if (node.is(linkNode)) {\n          return;\n        }\n        if (linkNode !== null) {\n          const children = node.getChildren();\n          for (let i = 0; i < children.length; i++) {\n            linkNode.append(children[i]);\n          }\n        }\n        node.remove();\n        return;\n      }\n      if (linkNode !== null) {\n        linkNode.append(node);\n      }\n    });\n  }\n}\nfunction $getAncestor(node, predicate) {\n  let parent = node;\n  while (parent !== null && parent.getParent() !== null && !predicate(parent)) {\n    parent = parent.getParentOrThrow();\n  }\n  return predicate(parent) ? parent : null;\n}\n\nexports.$createAutoLinkNode = $createAutoLinkNode;\nexports.$createLinkNode = $createLinkNode;\nexports.$isAutoLinkNode = $isAutoLinkNode;\nexports.$isLinkNode = $isLinkNode;\nexports.AutoLinkNode = AutoLinkNode;\nexports.LinkNode = LinkNode;\nexports.TOGGLE_LINK_COMMAND = TOGGLE_LINK_COMMAND;\nexports.toggleLink = toggleLink;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict'\nconst LexicalLink = process.env.NODE_ENV === 'development' ? require('./LexicalLink.dev.js') : require('./LexicalLink.prod.js')\nmodule.exports = LexicalLink;"],
  "mappings": "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",
  "names": ["linkNode"]
}
