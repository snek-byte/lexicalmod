{
  "version": 3,
  "sources": ["../../@lexical/table/LexicalTable.dev.js", "../../@lexical/table/LexicalTable.js"],
  "sourcesContent": ["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar utils = require('@lexical/utils');\nvar lexical = require('lexical');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst PIXEL_VALUE_REG_EXP = /^(\\d+(?:\\.\\d+)?)px$/;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst TableCellHeaderStates = {\n  BOTH: 3,\n  COLUMN: 2,\n  NO_STATUS: 0,\n  ROW: 1\n};\n/** @noInheritDoc */\nclass TableCellNode extends lexical.ElementNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  static getType() {\n    return 'tablecell';\n  }\n  static clone(node) {\n    const cellNode = new TableCellNode(node.__headerState, node.__colSpan, node.__width, node.__key);\n    cellNode.__rowSpan = node.__rowSpan;\n    cellNode.__backgroundColor = node.__backgroundColor;\n    return cellNode;\n  }\n  static importDOM() {\n    return {\n      td: node => ({\n        conversion: convertTableCellNodeElement,\n        priority: 0\n      }),\n      th: node => ({\n        conversion: convertTableCellNodeElement,\n        priority: 0\n      })\n    };\n  }\n  static importJSON(serializedNode) {\n    const colSpan = serializedNode.colSpan || 1;\n    const rowSpan = serializedNode.rowSpan || 1;\n    const cellNode = $createTableCellNode(serializedNode.headerState, colSpan, serializedNode.width || undefined);\n    cellNode.__rowSpan = rowSpan;\n    cellNode.__backgroundColor = serializedNode.backgroundColor || null;\n    return cellNode;\n  }\n  constructor(headerState = TableCellHeaderStates.NO_STATUS, colSpan = 1, width, key) {\n    super(key);\n    this.__colSpan = colSpan;\n    this.__rowSpan = 1;\n    this.__headerState = headerState;\n    this.__width = width;\n    this.__backgroundColor = null;\n  }\n  createDOM(config) {\n    const element = document.createElement(this.getTag());\n    if (this.__width) {\n      element.style.width = `${this.__width}px`;\n    }\n    if (this.__colSpan > 1) {\n      element.colSpan = this.__colSpan;\n    }\n    if (this.__rowSpan > 1) {\n      element.rowSpan = this.__rowSpan;\n    }\n    if (this.__backgroundColor !== null) {\n      element.style.backgroundColor = this.__backgroundColor;\n    }\n    utils.addClassNamesToElement(element, config.theme.tableCell, this.hasHeader() && config.theme.tableCellHeader);\n    return element;\n  }\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n    if (element) {\n      const element_ = element;\n      const maxWidth = 700;\n      const colCount = this.getParentOrThrow().getChildrenSize();\n      element_.style.border = '1px solid black';\n      if (this.__colSpan > 1) {\n        element_.colSpan = this.__colSpan;\n      }\n      if (this.__rowSpan > 1) {\n        element_.rowSpan = this.__rowSpan;\n      }\n      element_.style.width = `${this.getWidth() || Math.max(90, maxWidth / colCount)}px`;\n      element_.style.verticalAlign = 'top';\n      element_.style.textAlign = 'start';\n      const backgroundColor = this.getBackgroundColor();\n      if (backgroundColor !== null) {\n        element_.style.backgroundColor = backgroundColor;\n      } else if (this.hasHeader()) {\n        element_.style.backgroundColor = '#f2f3f5';\n      }\n    }\n    return {\n      element\n    };\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      backgroundColor: this.getBackgroundColor(),\n      colSpan: this.__colSpan,\n      headerState: this.__headerState,\n      rowSpan: this.__rowSpan,\n      type: 'tablecell',\n      width: this.getWidth()\n    };\n  }\n  getColSpan() {\n    return this.__colSpan;\n  }\n  setColSpan(colSpan) {\n    this.getWritable().__colSpan = colSpan;\n    return this;\n  }\n  getRowSpan() {\n    return this.__rowSpan;\n  }\n  setRowSpan(rowSpan) {\n    this.getWritable().__rowSpan = rowSpan;\n    return this;\n  }\n  getTag() {\n    return this.hasHeader() ? 'th' : 'td';\n  }\n  setHeaderStyles(headerState) {\n    const self = this.getWritable();\n    self.__headerState = headerState;\n    return this.__headerState;\n  }\n  getHeaderStyles() {\n    return this.getLatest().__headerState;\n  }\n  setWidth(width) {\n    const self = this.getWritable();\n    self.__width = width;\n    return this.__width;\n  }\n  getWidth() {\n    return this.getLatest().__width;\n  }\n  getBackgroundColor() {\n    return this.getLatest().__backgroundColor;\n  }\n  setBackgroundColor(newBackgroundColor) {\n    this.getWritable().__backgroundColor = newBackgroundColor;\n  }\n  toggleHeaderStyle(headerStateToToggle) {\n    const self = this.getWritable();\n    if ((self.__headerState & headerStateToToggle) === headerStateToToggle) {\n      self.__headerState -= headerStateToToggle;\n    } else {\n      self.__headerState += headerStateToToggle;\n    }\n    return self;\n  }\n  hasHeaderState(headerState) {\n    return (this.getHeaderStyles() & headerState) === headerState;\n  }\n  hasHeader() {\n    return this.getLatest().__headerState !== TableCellHeaderStates.NO_STATUS;\n  }\n  updateDOM(prevNode) {\n    return prevNode.__headerState !== this.__headerState || prevNode.__width !== this.__width || prevNode.__colSpan !== this.__colSpan || prevNode.__rowSpan !== this.__rowSpan || prevNode.__backgroundColor !== this.__backgroundColor;\n  }\n  isShadowRoot() {\n    return true;\n  }\n  collapseAtStart() {\n    return true;\n  }\n  canBeEmpty() {\n    return false;\n  }\n  canIndent() {\n    return false;\n  }\n}\nfunction convertTableCellNodeElement(domNode) {\n  const domNode_ = domNode;\n  const nodeName = domNode.nodeName.toLowerCase();\n  let width = undefined;\n  if (PIXEL_VALUE_REG_EXP.test(domNode_.style.width)) {\n    width = parseFloat(domNode_.style.width);\n  }\n  const tableCellNode = $createTableCellNode(nodeName === 'th' ? TableCellHeaderStates.ROW : TableCellHeaderStates.NO_STATUS, domNode_.colSpan, width);\n  tableCellNode.__rowSpan = domNode_.rowSpan;\n  const backgroundColor = domNode_.style.backgroundColor;\n  if (backgroundColor !== '') {\n    tableCellNode.__backgroundColor = backgroundColor;\n  }\n  return {\n    forChild: (lexicalNode, parentLexicalNode) => {\n      if ($isTableCellNode(parentLexicalNode) && !lexical.$isElementNode(lexicalNode)) {\n        const paragraphNode = lexical.$createParagraphNode();\n        if (lexical.$isLineBreakNode(lexicalNode) && lexicalNode.getTextContent() === '\\n') {\n          return null;\n        }\n        paragraphNode.append(lexicalNode);\n        return paragraphNode;\n      }\n      return lexicalNode;\n    },\n    node: tableCellNode\n  };\n}\nfunction $createTableCellNode(headerState, colSpan = 1, width) {\n  return lexical.$applyNodeReplacement(new TableCellNode(headerState, colSpan, width));\n}\nfunction $isTableCellNode(node) {\n  return node instanceof TableCellNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst INSERT_TABLE_COMMAND = lexical.createCommand('INSERT_TABLE_COMMAND');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/** @noInheritDoc */\nclass TableRowNode extends lexical.ElementNode {\n  /** @internal */\n\n  static getType() {\n    return 'tablerow';\n  }\n  static clone(node) {\n    return new TableRowNode(node.__height, node.__key);\n  }\n  static importDOM() {\n    return {\n      tr: node => ({\n        conversion: convertTableRowElement,\n        priority: 0\n      })\n    };\n  }\n  static importJSON(serializedNode) {\n    return $createTableRowNode(serializedNode.height);\n  }\n  constructor(height, key) {\n    super(key);\n    this.__height = height;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      type: 'tablerow',\n      version: 1\n    };\n  }\n  createDOM(config) {\n    const element = document.createElement('tr');\n    if (this.__height) {\n      element.style.height = `${this.__height}px`;\n    }\n    utils.addClassNamesToElement(element, config.theme.tableRow);\n    return element;\n  }\n  isShadowRoot() {\n    return true;\n  }\n  setHeight(height) {\n    const self = this.getWritable();\n    self.__height = height;\n    return this.__height;\n  }\n  getHeight() {\n    return this.getLatest().__height;\n  }\n  updateDOM(prevNode) {\n    return prevNode.__height !== this.__height;\n  }\n  canBeEmpty() {\n    return false;\n  }\n  canIndent() {\n    return false;\n  }\n}\nfunction convertTableRowElement(domNode) {\n  const domNode_ = domNode;\n  let height = undefined;\n  if (PIXEL_VALUE_REG_EXP.test(domNode_.style.height)) {\n    height = parseFloat(domNode_.style.height);\n  }\n  return {\n    node: $createTableRowNode(height)\n  };\n}\nfunction $createTableRowNode(height) {\n  return lexical.$applyNodeReplacement(new TableRowNode(height));\n}\nfunction $isTableRowNode(node) {\n  return node instanceof TableRowNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction $createTableNodeWithDimensions(rowCount, columnCount, includeHeaders = true) {\n  const tableNode = $createTableNode();\n  for (let iRow = 0; iRow < rowCount; iRow++) {\n    const tableRowNode = $createTableRowNode();\n    for (let iColumn = 0; iColumn < columnCount; iColumn++) {\n      let headerState = TableCellHeaderStates.NO_STATUS;\n      if (typeof includeHeaders === 'object') {\n        if (iRow === 0 && includeHeaders.rows) headerState |= TableCellHeaderStates.ROW;\n        if (iColumn === 0 && includeHeaders.columns) headerState |= TableCellHeaderStates.COLUMN;\n      } else if (includeHeaders) {\n        if (iRow === 0) headerState |= TableCellHeaderStates.ROW;\n        if (iColumn === 0) headerState |= TableCellHeaderStates.COLUMN;\n      }\n      const tableCellNode = $createTableCellNode(headerState);\n      const paragraphNode = lexical.$createParagraphNode();\n      paragraphNode.append(lexical.$createTextNode());\n      tableCellNode.append(paragraphNode);\n      tableRowNode.append(tableCellNode);\n    }\n    tableNode.append(tableRowNode);\n  }\n  return tableNode;\n}\nfunction $getTableCellNodeFromLexicalNode(startingNode) {\n  const node = utils.$findMatchingParent(startingNode, n => $isTableCellNode(n));\n  if ($isTableCellNode(node)) {\n    return node;\n  }\n  return null;\n}\nfunction $getTableRowNodeFromTableCellNodeOrThrow(startingNode) {\n  const node = utils.$findMatchingParent(startingNode, n => $isTableRowNode(n));\n  if ($isTableRowNode(node)) {\n    return node;\n  }\n  throw new Error('Expected table cell to be inside of table row.');\n}\nfunction $getTableNodeFromLexicalNodeOrThrow(startingNode) {\n  const node = utils.$findMatchingParent(startingNode, n => $isTableNode(n));\n  if ($isTableNode(node)) {\n    return node;\n  }\n  throw new Error('Expected table cell to be inside of table.');\n}\nfunction $getTableRowIndexFromTableCellNode(tableCellNode) {\n  const tableRowNode = $getTableRowNodeFromTableCellNodeOrThrow(tableCellNode);\n  const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableRowNode);\n  return tableNode.getChildren().findIndex(n => n.is(tableRowNode));\n}\nfunction $getTableColumnIndexFromTableCellNode(tableCellNode) {\n  const tableRowNode = $getTableRowNodeFromTableCellNodeOrThrow(tableCellNode);\n  return tableRowNode.getChildren().findIndex(n => n.is(tableCellNode));\n}\nfunction $getTableCellSiblingsFromTableCellNode(tableCellNode, table) {\n  const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode);\n  const {\n    x,\n    y\n  } = tableNode.getCordsFromCellNode(tableCellNode, table);\n  return {\n    above: tableNode.getCellNodeFromCords(x, y - 1, table),\n    below: tableNode.getCellNodeFromCords(x, y + 1, table),\n    left: tableNode.getCellNodeFromCords(x - 1, y, table),\n    right: tableNode.getCellNodeFromCords(x + 1, y, table)\n  };\n}\nfunction $removeTableRowAtIndex(tableNode, indexToDelete) {\n  const tableRows = tableNode.getChildren();\n  if (indexToDelete >= tableRows.length || indexToDelete < 0) {\n    throw new Error('Expected table cell to be inside of table row.');\n  }\n  const targetRowNode = tableRows[indexToDelete];\n  targetRowNode.remove();\n  return tableNode;\n}\nfunction $insertTableRow(tableNode, targetIndex, shouldInsertAfter = true, rowCount, table) {\n  const tableRows = tableNode.getChildren();\n  if (targetIndex >= tableRows.length || targetIndex < 0) {\n    throw new Error('Table row target index out of range');\n  }\n  const targetRowNode = tableRows[targetIndex];\n  if ($isTableRowNode(targetRowNode)) {\n    for (let r = 0; r < rowCount; r++) {\n      const tableRowCells = targetRowNode.getChildren();\n      const tableColumnCount = tableRowCells.length;\n      const newTableRowNode = $createTableRowNode();\n      for (let c = 0; c < tableColumnCount; c++) {\n        const tableCellFromTargetRow = tableRowCells[c];\n        if (!$isTableCellNode(tableCellFromTargetRow)) {\n          throw Error(`Expected table cell`);\n        }\n        const {\n          above,\n          below\n        } = $getTableCellSiblingsFromTableCellNode(tableCellFromTargetRow, table);\n        let headerState = TableCellHeaderStates.NO_STATUS;\n        const width = above && above.getWidth() || below && below.getWidth() || undefined;\n        if (above && above.hasHeaderState(TableCellHeaderStates.COLUMN) || below && below.hasHeaderState(TableCellHeaderStates.COLUMN)) {\n          headerState |= TableCellHeaderStates.COLUMN;\n        }\n        const tableCellNode = $createTableCellNode(headerState, 1, width);\n        tableCellNode.append(lexical.$createParagraphNode());\n        newTableRowNode.append(tableCellNode);\n      }\n      if (shouldInsertAfter) {\n        targetRowNode.insertAfter(newTableRowNode);\n      } else {\n        targetRowNode.insertBefore(newTableRowNode);\n      }\n    }\n  } else {\n    throw new Error('Row before insertion index does not exist.');\n  }\n  return tableNode;\n}\nconst getHeaderState = (currentState, possibleState) => {\n  if (currentState === TableCellHeaderStates.BOTH || currentState === possibleState) {\n    return possibleState;\n  }\n  return TableCellHeaderStates.NO_STATUS;\n};\nfunction $insertTableRow__EXPERIMENTAL(insertAfter = true) {\n  const selection = lexical.$getSelection();\n  if (!(lexical.$isRangeSelection(selection) || $isTableSelection(selection))) {\n    throw Error(`Expected a RangeSelection or GridSelection`);\n  }\n  const focus = selection.focus.getNode();\n  const [focusCell,, grid] = $getNodeTriplet(focus);\n  const [gridMap, focusCellMap] = $computeTableMap(grid, focusCell, focusCell);\n  const columnCount = gridMap[0].length;\n  const {\n    startRow: focusStartRow\n  } = focusCellMap;\n  if (insertAfter) {\n    const focusEndRow = focusStartRow + focusCell.__rowSpan - 1;\n    const focusEndRowMap = gridMap[focusEndRow];\n    const newRow = $createTableRowNode();\n    for (let i = 0; i < columnCount; i++) {\n      const {\n        cell,\n        startRow\n      } = focusEndRowMap[i];\n      if (startRow + cell.__rowSpan - 1 <= focusEndRow) {\n        const currentCell = focusEndRowMap[i].cell;\n        const currentCellHeaderState = currentCell.__headerState;\n        const headerState = getHeaderState(currentCellHeaderState, TableCellHeaderStates.COLUMN);\n        newRow.append($createTableCellNode(headerState).append(lexical.$createParagraphNode()));\n      } else {\n        cell.setRowSpan(cell.__rowSpan + 1);\n      }\n    }\n    const focusEndRowNode = grid.getChildAtIndex(focusEndRow);\n    if (!$isTableRowNode(focusEndRowNode)) {\n      throw Error(`focusEndRow is not a TableRowNode`);\n    }\n    focusEndRowNode.insertAfter(newRow);\n  } else {\n    const focusStartRowMap = gridMap[focusStartRow];\n    const newRow = $createTableRowNode();\n    for (let i = 0; i < columnCount; i++) {\n      const {\n        cell,\n        startRow\n      } = focusStartRowMap[i];\n      if (startRow === focusStartRow) {\n        const currentCell = focusStartRowMap[i].cell;\n        const currentCellHeaderState = currentCell.__headerState;\n        const headerState = getHeaderState(currentCellHeaderState, TableCellHeaderStates.COLUMN);\n        newRow.append($createTableCellNode(headerState).append(lexical.$createParagraphNode()));\n      } else {\n        cell.setRowSpan(cell.__rowSpan + 1);\n      }\n    }\n    const focusStartRowNode = grid.getChildAtIndex(focusStartRow);\n    if (!$isTableRowNode(focusStartRowNode)) {\n      throw Error(`focusEndRow is not a TableRowNode`);\n    }\n    focusStartRowNode.insertBefore(newRow);\n  }\n}\nfunction $insertTableColumn(tableNode, targetIndex, shouldInsertAfter = true, columnCount, table) {\n  const tableRows = tableNode.getChildren();\n  const tableCellsToBeInserted = [];\n  for (let r = 0; r < tableRows.length; r++) {\n    const currentTableRowNode = tableRows[r];\n    if ($isTableRowNode(currentTableRowNode)) {\n      for (let c = 0; c < columnCount; c++) {\n        const tableRowChildren = currentTableRowNode.getChildren();\n        if (targetIndex >= tableRowChildren.length || targetIndex < 0) {\n          throw new Error('Table column target index out of range');\n        }\n        const targetCell = tableRowChildren[targetIndex];\n        if (!$isTableCellNode(targetCell)) {\n          throw Error(`Expected table cell`);\n        }\n        const {\n          left,\n          right\n        } = $getTableCellSiblingsFromTableCellNode(targetCell, table);\n        let headerState = TableCellHeaderStates.NO_STATUS;\n        if (left && left.hasHeaderState(TableCellHeaderStates.ROW) || right && right.hasHeaderState(TableCellHeaderStates.ROW)) {\n          headerState |= TableCellHeaderStates.ROW;\n        }\n        const newTableCell = $createTableCellNode(headerState);\n        newTableCell.append(lexical.$createParagraphNode());\n        tableCellsToBeInserted.push({\n          newTableCell,\n          targetCell\n        });\n      }\n    }\n  }\n  tableCellsToBeInserted.forEach(({\n    newTableCell,\n    targetCell\n  }) => {\n    if (shouldInsertAfter) {\n      targetCell.insertAfter(newTableCell);\n    } else {\n      targetCell.insertBefore(newTableCell);\n    }\n  });\n  return tableNode;\n}\nfunction $insertTableColumn__EXPERIMENTAL(insertAfter = true) {\n  const selection = lexical.$getSelection();\n  if (!(lexical.$isRangeSelection(selection) || $isTableSelection(selection))) {\n    throw Error(`Expected a RangeSelection or GridSelection`);\n  }\n  const anchor = selection.anchor.getNode();\n  const focus = selection.focus.getNode();\n  const [anchorCell] = $getNodeTriplet(anchor);\n  const [focusCell,, grid] = $getNodeTriplet(focus);\n  const [gridMap, focusCellMap, anchorCellMap] = $computeTableMap(grid, focusCell, anchorCell);\n  const rowCount = gridMap.length;\n  const startColumn = insertAfter ? Math.max(focusCellMap.startColumn, anchorCellMap.startColumn) : Math.min(focusCellMap.startColumn, anchorCellMap.startColumn);\n  const insertAfterColumn = insertAfter ? startColumn + focusCell.__colSpan - 1 : startColumn - 1;\n  const gridFirstChild = grid.getFirstChild();\n  if (!$isTableRowNode(gridFirstChild)) {\n    throw Error(`Expected firstTable child to be a row`);\n  }\n  let firstInsertedCell = null;\n  function $createTableCellNodeForInsertTableColumn(headerState = TableCellHeaderStates.NO_STATUS) {\n    const cell = $createTableCellNode(headerState).append(lexical.$createParagraphNode());\n    if (firstInsertedCell === null) {\n      firstInsertedCell = cell;\n    }\n    return cell;\n  }\n  let loopRow = gridFirstChild;\n  rowLoop: for (let i = 0; i < rowCount; i++) {\n    if (i !== 0) {\n      const currentRow = loopRow.getNextSibling();\n      if (!$isTableRowNode(currentRow)) {\n        throw Error(`Expected row nextSibling to be a row`);\n      }\n      loopRow = currentRow;\n    }\n    const rowMap = gridMap[i];\n    const currentCellHeaderState = rowMap[insertAfterColumn < 0 ? 0 : insertAfterColumn].cell.__headerState;\n    const headerState = getHeaderState(currentCellHeaderState, TableCellHeaderStates.ROW);\n    if (insertAfterColumn < 0) {\n      $insertFirst(loopRow, $createTableCellNodeForInsertTableColumn(headerState));\n      continue;\n    }\n    const {\n      cell: currentCell,\n      startColumn: currentStartColumn,\n      startRow: currentStartRow\n    } = rowMap[insertAfterColumn];\n    if (currentStartColumn + currentCell.__colSpan - 1 <= insertAfterColumn) {\n      let insertAfterCell = currentCell;\n      let insertAfterCellRowStart = currentStartRow;\n      let prevCellIndex = insertAfterColumn;\n      while (insertAfterCellRowStart !== i && insertAfterCell.__rowSpan > 1) {\n        prevCellIndex -= currentCell.__colSpan;\n        if (prevCellIndex >= 0) {\n          const {\n            cell: cell_,\n            startRow: startRow_\n          } = rowMap[prevCellIndex];\n          insertAfterCell = cell_;\n          insertAfterCellRowStart = startRow_;\n        } else {\n          loopRow.append($createTableCellNodeForInsertTableColumn(headerState));\n          continue rowLoop;\n        }\n      }\n      insertAfterCell.insertAfter($createTableCellNodeForInsertTableColumn(headerState));\n    } else {\n      currentCell.setColSpan(currentCell.__colSpan + 1);\n    }\n  }\n  if (firstInsertedCell !== null) {\n    $moveSelectionToCell(firstInsertedCell);\n  }\n}\nfunction $deleteTableColumn(tableNode, targetIndex) {\n  const tableRows = tableNode.getChildren();\n  for (let i = 0; i < tableRows.length; i++) {\n    const currentTableRowNode = tableRows[i];\n    if ($isTableRowNode(currentTableRowNode)) {\n      const tableRowChildren = currentTableRowNode.getChildren();\n      if (targetIndex >= tableRowChildren.length || targetIndex < 0) {\n        throw new Error('Table column target index out of range');\n      }\n      tableRowChildren[targetIndex].remove();\n    }\n  }\n  return tableNode;\n}\nfunction $deleteTableRow__EXPERIMENTAL() {\n  const selection = lexical.$getSelection();\n  if (!(lexical.$isRangeSelection(selection) || $isTableSelection(selection))) {\n    throw Error(`Expected a RangeSelection or GridSelection`);\n  }\n  const anchor = selection.anchor.getNode();\n  const focus = selection.focus.getNode();\n  const [anchorCell,, grid] = $getNodeTriplet(anchor);\n  const [focusCell] = $getNodeTriplet(focus);\n  const [gridMap, anchorCellMap, focusCellMap] = $computeTableMap(grid, anchorCell, focusCell);\n  const {\n    startRow: anchorStartRow\n  } = anchorCellMap;\n  const {\n    startRow: focusStartRow\n  } = focusCellMap;\n  const focusEndRow = focusStartRow + focusCell.__rowSpan - 1;\n  if (gridMap.length === focusEndRow - anchorStartRow + 1) {\n    // Empty grid\n    grid.remove();\n    return;\n  }\n  const columnCount = gridMap[0].length;\n  const nextRow = gridMap[focusEndRow + 1];\n  const nextRowNode = grid.getChildAtIndex(focusEndRow + 1);\n  for (let row = focusEndRow; row >= anchorStartRow; row--) {\n    for (let column = columnCount - 1; column >= 0; column--) {\n      const {\n        cell,\n        startRow: cellStartRow,\n        startColumn: cellStartColumn\n      } = gridMap[row][column];\n      if (cellStartColumn !== column) {\n        // Don't repeat work for the same Cell\n        continue;\n      }\n      // Rows overflowing top have to be trimmed\n      if (row === anchorStartRow && cellStartRow < anchorStartRow) {\n        cell.setRowSpan(cell.__rowSpan - (cellStartRow - anchorStartRow));\n      }\n      // Rows overflowing bottom have to be trimmed and moved to the next row\n      if (cellStartRow >= anchorStartRow && cellStartRow + cell.__rowSpan - 1 > focusEndRow) {\n        cell.setRowSpan(cell.__rowSpan - (focusEndRow - cellStartRow + 1));\n        if (!(nextRowNode !== null)) {\n          throw Error(`Expected nextRowNode not to be null`);\n        }\n        if (column === 0) {\n          $insertFirst(nextRowNode, cell);\n        } else {\n          const {\n            cell: previousCell\n          } = nextRow[column - 1];\n          previousCell.insertAfter(cell);\n        }\n      }\n    }\n    const rowNode = grid.getChildAtIndex(row);\n    if (!$isTableRowNode(rowNode)) {\n      throw Error(`Expected GridNode childAtIndex(${String(row)}) to be RowNode`);\n    }\n    rowNode.remove();\n  }\n  if (nextRow !== undefined) {\n    const {\n      cell\n    } = nextRow[0];\n    $moveSelectionToCell(cell);\n  } else {\n    const previousRow = gridMap[anchorStartRow - 1];\n    const {\n      cell\n    } = previousRow[0];\n    $moveSelectionToCell(cell);\n  }\n}\nfunction $deleteTableColumn__EXPERIMENTAL() {\n  const selection = lexical.$getSelection();\n  if (!(lexical.$isRangeSelection(selection) || $isTableSelection(selection))) {\n    throw Error(`Expected a RangeSelection or GridSelection`);\n  }\n  const anchor = selection.anchor.getNode();\n  const focus = selection.focus.getNode();\n  const [anchorCell,, grid] = $getNodeTriplet(anchor);\n  const [focusCell] = $getNodeTriplet(focus);\n  const [gridMap, anchorCellMap, focusCellMap] = $computeTableMap(grid, anchorCell, focusCell);\n  const {\n    startColumn: anchorStartColumn\n  } = anchorCellMap;\n  const {\n    startRow: focusStartRow,\n    startColumn: focusStartColumn\n  } = focusCellMap;\n  const startColumn = Math.min(anchorStartColumn, focusStartColumn);\n  const endColumn = Math.max(anchorStartColumn + anchorCell.__colSpan - 1, focusStartColumn + focusCell.__colSpan - 1);\n  const selectedColumnCount = endColumn - startColumn + 1;\n  const columnCount = gridMap[0].length;\n  if (columnCount === endColumn - startColumn + 1) {\n    // Empty grid\n    grid.selectPrevious();\n    grid.remove();\n    return;\n  }\n  const rowCount = gridMap.length;\n  for (let row = 0; row < rowCount; row++) {\n    for (let column = startColumn; column <= endColumn; column++) {\n      const {\n        cell,\n        startColumn: cellStartColumn\n      } = gridMap[row][column];\n      if (cellStartColumn < startColumn) {\n        if (column === startColumn) {\n          const overflowLeft = startColumn - cellStartColumn;\n          // Overflowing left\n          cell.setColSpan(cell.__colSpan -\n          // Possible overflow right too\n          Math.min(selectedColumnCount, cell.__colSpan - overflowLeft));\n        }\n      } else if (cellStartColumn + cell.__colSpan - 1 > endColumn) {\n        if (column === endColumn) {\n          // Overflowing right\n          const inSelectedArea = endColumn - cellStartColumn + 1;\n          cell.setColSpan(cell.__colSpan - inSelectedArea);\n        }\n      } else {\n        cell.remove();\n      }\n    }\n  }\n  const focusRowMap = gridMap[focusStartRow];\n  const nextColumn = focusRowMap[focusStartColumn + focusCell.__colSpan];\n  if (nextColumn !== undefined) {\n    const {\n      cell\n    } = nextColumn;\n    $moveSelectionToCell(cell);\n  } else {\n    const previousRow = focusRowMap[focusStartColumn - 1];\n    const {\n      cell\n    } = previousRow;\n    $moveSelectionToCell(cell);\n  }\n}\nfunction $moveSelectionToCell(cell) {\n  const firstDescendant = cell.getFirstDescendant();\n  if (firstDescendant == null) {\n    cell.selectStart();\n  } else {\n    firstDescendant.getParentOrThrow().selectStart();\n  }\n}\nfunction $insertFirst(parent, node) {\n  const firstChild = parent.getFirstChild();\n  if (firstChild !== null) {\n    firstChild.insertBefore(node);\n  } else {\n    parent.append(node);\n  }\n}\nfunction $unmergeCell() {\n  const selection = lexical.$getSelection();\n  if (!(lexical.$isRangeSelection(selection) || $isTableSelection(selection))) {\n    throw Error(`Expected a RangeSelection or GridSelection`);\n  }\n  const anchor = selection.anchor.getNode();\n  const [cell, row, grid] = $getNodeTriplet(anchor);\n  const colSpan = cell.__colSpan;\n  const rowSpan = cell.__rowSpan;\n  if (colSpan > 1) {\n    for (let i = 1; i < colSpan; i++) {\n      cell.insertAfter($createTableCellNode(TableCellHeaderStates.NO_STATUS));\n    }\n    cell.setColSpan(1);\n  }\n  if (rowSpan > 1) {\n    const [map, cellMap] = $computeTableMap(grid, cell, cell);\n    const {\n      startColumn,\n      startRow\n    } = cellMap;\n    let currentRowNode;\n    for (let i = 1; i < rowSpan; i++) {\n      const currentRow = startRow + i;\n      const currentRowMap = map[currentRow];\n      currentRowNode = (currentRowNode || row).getNextSibling();\n      if (!$isTableRowNode(currentRowNode)) {\n        throw Error(`Expected row next sibling to be a row`);\n      }\n      let insertAfterCell = null;\n      for (let column = 0; column < startColumn; column++) {\n        const currentCellMap = currentRowMap[column];\n        const currentCell = currentCellMap.cell;\n        if (currentCellMap.startRow === currentRow) {\n          insertAfterCell = currentCell;\n        }\n        if (currentCell.__colSpan > 1) {\n          column += currentCell.__colSpan - 1;\n        }\n      }\n      if (insertAfterCell === null) {\n        for (let j = 0; j < colSpan; j++) {\n          $insertFirst(currentRowNode, $createTableCellNode(TableCellHeaderStates.NO_STATUS));\n        }\n      } else {\n        for (let j = 0; j < colSpan; j++) {\n          insertAfterCell.insertAfter($createTableCellNode(TableCellHeaderStates.NO_STATUS));\n        }\n      }\n    }\n    cell.setRowSpan(1);\n  }\n}\nfunction $computeTableMap(grid, cellA, cellB) {\n  const tableMap = [];\n  let cellAValue = null;\n  let cellBValue = null;\n  function write(startRow, startColumn, cell) {\n    const value = {\n      cell,\n      startColumn,\n      startRow\n    };\n    const rowSpan = cell.__rowSpan;\n    const colSpan = cell.__colSpan;\n    for (let i = 0; i < rowSpan; i++) {\n      if (tableMap[startRow + i] === undefined) {\n        tableMap[startRow + i] = [];\n      }\n      for (let j = 0; j < colSpan; j++) {\n        tableMap[startRow + i][startColumn + j] = value;\n      }\n    }\n    if (cellA.is(cell)) {\n      cellAValue = value;\n    }\n    if (cellB.is(cell)) {\n      cellBValue = value;\n    }\n  }\n  function isEmpty(row, column) {\n    return tableMap[row] === undefined || tableMap[row][column] === undefined;\n  }\n  const gridChildren = grid.getChildren();\n  for (let i = 0; i < gridChildren.length; i++) {\n    const row = gridChildren[i];\n    if (!$isTableRowNode(row)) {\n      throw Error(`Expected GridNode children to be TableRowNode`);\n    }\n    const rowChildren = row.getChildren();\n    let j = 0;\n    for (const cell of rowChildren) {\n      if (!$isTableCellNode(cell)) {\n        throw Error(`Expected TableRowNode children to be TableCellNode`);\n      }\n      while (!isEmpty(i, j)) {\n        j++;\n      }\n      write(i, j, cell);\n      j += cell.__colSpan;\n    }\n  }\n  if (!(cellAValue !== null)) {\n    throw Error(`Anchor not found in Grid`);\n  }\n  if (!(cellBValue !== null)) {\n    throw Error(`Focus not found in Grid`);\n  }\n  return [tableMap, cellAValue, cellBValue];\n}\nfunction $getNodeTriplet(source) {\n  let cell;\n  if (source instanceof TableCellNode) {\n    cell = source;\n  } else if ('__type' in source) {\n    const cell_ = utils.$findMatchingParent(source, $isTableCellNode);\n    if (!$isTableCellNode(cell_)) {\n      throw Error(`Expected to find a parent TableCellNode`);\n    }\n    cell = cell_;\n  } else {\n    const cell_ = utils.$findMatchingParent(source.getNode(), $isTableCellNode);\n    if (!$isTableCellNode(cell_)) {\n      throw Error(`Expected to find a parent TableCellNode`);\n    }\n    cell = cell_;\n  }\n  const row = cell.getParent();\n  if (!$isTableRowNode(row)) {\n    throw Error(`Expected TableCellNode to have a parent TableRowNode`);\n  }\n  const grid = row.getParent();\n  if (!$isTableNode(grid)) {\n    throw Error(`Expected TableRowNode to have a parent GridNode`);\n  }\n  return [cell, row, grid];\n}\nfunction $getTableCellNodeRect(tableCellNode) {\n  const [cellNode,, gridNode] = $getNodeTriplet(tableCellNode);\n  const rows = gridNode.getChildren();\n  const rowCount = rows.length;\n  const columnCount = rows[0].getChildren().length;\n\n  // Create a matrix of the same size as the table to track the position of each cell\n  const cellMatrix = new Array(rowCount);\n  for (let i = 0; i < rowCount; i++) {\n    cellMatrix[i] = new Array(columnCount);\n  }\n  for (let rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n    const row = rows[rowIndex];\n    const cells = row.getChildren();\n    let columnIndex = 0;\n    for (let cellIndex = 0; cellIndex < cells.length; cellIndex++) {\n      // Find the next available position in the matrix, skip the position of merged cells\n      while (cellMatrix[rowIndex][columnIndex]) {\n        columnIndex++;\n      }\n      const cell = cells[cellIndex];\n      const rowSpan = cell.__rowSpan || 1;\n      const colSpan = cell.__colSpan || 1;\n\n      // Put the cell into the corresponding position in the matrix\n      for (let i = 0; i < rowSpan; i++) {\n        for (let j = 0; j < colSpan; j++) {\n          cellMatrix[rowIndex + i][columnIndex + j] = cell;\n        }\n      }\n\n      // Return to the original index, row span and column span of the cell.\n      if (cellNode === cell) {\n        return {\n          colSpan,\n          columnIndex,\n          rowIndex,\n          rowSpan\n        };\n      }\n      columnIndex += colSpan;\n    }\n  }\n  return null;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nclass TableSelection {\n  constructor(tableKey, anchor, focus) {\n    this.anchor = anchor;\n    this.focus = focus;\n    anchor._selection = this;\n    focus._selection = this;\n    this._cachedNodes = null;\n    this.dirty = false;\n    this.tableKey = tableKey;\n  }\n  getStartEndPoints() {\n    return [this.anchor, this.focus];\n  }\n\n  /**\n   * Returns whether the Selection is \"backwards\", meaning the focus\n   * logically precedes the anchor in the EditorState.\n   * @returns true if the Selection is backwards, false otherwise.\n   */\n  isBackward() {\n    return this.focus.isBefore(this.anchor);\n  }\n  getCachedNodes() {\n    return this._cachedNodes;\n  }\n  setCachedNodes(nodes) {\n    this._cachedNodes = nodes;\n  }\n  is(selection) {\n    if (!$isTableSelection(selection)) {\n      return false;\n    }\n    return this.tableKey === selection.tableKey && this.anchor.is(selection.anchor) && this.focus.is(selection.focus);\n  }\n  set(tableKey, anchorCellKey, focusCellKey) {\n    this.dirty = true;\n    this.tableKey = tableKey;\n    this.anchor.key = anchorCellKey;\n    this.focus.key = focusCellKey;\n    this._cachedNodes = null;\n  }\n  clone() {\n    return new TableSelection(this.tableKey, this.anchor, this.focus);\n  }\n  isCollapsed() {\n    return false;\n  }\n  extract() {\n    return this.getNodes();\n  }\n  insertRawText(text) {\n    // Do nothing?\n  }\n  insertText() {\n    // Do nothing?\n  }\n  insertNodes(nodes) {\n    const focusNode = this.focus.getNode();\n    if (!lexical.$isElementNode(focusNode)) {\n      throw Error(`Expected TableSelection focus to be an ElementNode`);\n    }\n    const selection = lexical.$normalizeSelection__EXPERIMENTAL(focusNode.select(0, focusNode.getChildrenSize()));\n    selection.insertNodes(nodes);\n  }\n\n  // TODO Deprecate this method. It's confusing when used with colspan|rowspan\n  getShape() {\n    const anchorCellNode = lexical.$getNodeByKey(this.anchor.key);\n    if (!$isTableCellNode(anchorCellNode)) {\n      throw Error(`Expected TableSelection anchor to be (or a child of) TableCellNode`);\n    }\n    const anchorCellNodeRect = $getTableCellNodeRect(anchorCellNode);\n    if (!(anchorCellNodeRect !== null)) {\n      throw Error(`getCellRect: expected to find AnchorNode`);\n    }\n    const focusCellNode = lexical.$getNodeByKey(this.focus.key);\n    if (!$isTableCellNode(focusCellNode)) {\n      throw Error(`Expected TableSelection focus to be (or a child of) TableCellNode`);\n    }\n    const focusCellNodeRect = $getTableCellNodeRect(focusCellNode);\n    if (!(focusCellNodeRect !== null)) {\n      throw Error(`getCellRect: expected to find focusCellNode`);\n    }\n    const startX = Math.min(anchorCellNodeRect.columnIndex, focusCellNodeRect.columnIndex);\n    const stopX = Math.max(anchorCellNodeRect.columnIndex, focusCellNodeRect.columnIndex);\n    const startY = Math.min(anchorCellNodeRect.rowIndex, focusCellNodeRect.rowIndex);\n    const stopY = Math.max(anchorCellNodeRect.rowIndex, focusCellNodeRect.rowIndex);\n    return {\n      fromX: Math.min(startX, stopX),\n      fromY: Math.min(startY, stopY),\n      toX: Math.max(startX, stopX),\n      toY: Math.max(startY, stopY)\n    };\n  }\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n    const anchorNode = this.anchor.getNode();\n    const focusNode = this.focus.getNode();\n    const anchorCell = utils.$findMatchingParent(anchorNode, $isTableCellNode);\n    // todo replace with triplet\n    const focusCell = utils.$findMatchingParent(focusNode, $isTableCellNode);\n    if (!$isTableCellNode(anchorCell)) {\n      throw Error(`Expected TableSelection anchor to be (or a child of) TableCellNode`);\n    }\n    if (!$isTableCellNode(focusCell)) {\n      throw Error(`Expected TableSelection focus to be (or a child of) TableCellNode`);\n    }\n    const anchorRow = anchorCell.getParent();\n    if (!$isTableRowNode(anchorRow)) {\n      throw Error(`Expected anchorCell to have a parent TableRowNode`);\n    }\n    const tableNode = anchorRow.getParent();\n    if (!$isTableNode(tableNode)) {\n      throw Error(`Expected tableNode to have a parent TableNode`);\n    }\n    const focusCellGrid = focusCell.getParents()[1];\n    if (focusCellGrid !== tableNode) {\n      if (!tableNode.isParentOf(focusCell)) {\n        // focus is on higher Grid level than anchor\n        const gridParent = tableNode.getParent();\n        if (!(gridParent != null)) {\n          throw Error(`Expected gridParent to have a parent`);\n        }\n        this.set(this.tableKey, gridParent.getKey(), focusCell.getKey());\n      } else {\n        // anchor is on higher Grid level than focus\n        const focusCellParent = focusCellGrid.getParent();\n        if (!(focusCellParent != null)) {\n          throw Error(`Expected focusCellParent to have a parent`);\n        }\n        this.set(this.tableKey, focusCell.getKey(), focusCellParent.getKey());\n      }\n      return this.getNodes();\n    }\n\n    // TODO Mapping the whole Grid every time not efficient. We need to compute the entire state only\n    // once (on load) and iterate on it as updates occur. However, to do this we need to have the\n    // ability to store a state. Killing TableSelection and moving the logic to the plugin would make\n    // this possible.\n    const [map, cellAMap, cellBMap] = $computeTableMap(tableNode, anchorCell, focusCell);\n    let minColumn = Math.min(cellAMap.startColumn, cellBMap.startColumn);\n    let minRow = Math.min(cellAMap.startRow, cellBMap.startRow);\n    let maxColumn = Math.max(cellAMap.startColumn + cellAMap.cell.__colSpan - 1, cellBMap.startColumn + cellBMap.cell.__colSpan - 1);\n    let maxRow = Math.max(cellAMap.startRow + cellAMap.cell.__rowSpan - 1, cellBMap.startRow + cellBMap.cell.__rowSpan - 1);\n    let exploredMinColumn = minColumn;\n    let exploredMinRow = minRow;\n    let exploredMaxColumn = minColumn;\n    let exploredMaxRow = minRow;\n    function expandBoundary(mapValue) {\n      const {\n        cell,\n        startColumn: cellStartColumn,\n        startRow: cellStartRow\n      } = mapValue;\n      minColumn = Math.min(minColumn, cellStartColumn);\n      minRow = Math.min(minRow, cellStartRow);\n      maxColumn = Math.max(maxColumn, cellStartColumn + cell.__colSpan - 1);\n      maxRow = Math.max(maxRow, cellStartRow + cell.__rowSpan - 1);\n    }\n    while (minColumn < exploredMinColumn || minRow < exploredMinRow || maxColumn > exploredMaxColumn || maxRow > exploredMaxRow) {\n      if (minColumn < exploredMinColumn) {\n        // Expand on the left\n        const rowDiff = exploredMaxRow - exploredMinRow;\n        const previousColumn = exploredMinColumn - 1;\n        for (let i = 0; i <= rowDiff; i++) {\n          expandBoundary(map[exploredMinRow + i][previousColumn]);\n        }\n        exploredMinColumn = previousColumn;\n      }\n      if (minRow < exploredMinRow) {\n        // Expand on top\n        const columnDiff = exploredMaxColumn - exploredMinColumn;\n        const previousRow = exploredMinRow - 1;\n        for (let i = 0; i <= columnDiff; i++) {\n          expandBoundary(map[previousRow][exploredMinColumn + i]);\n        }\n        exploredMinRow = previousRow;\n      }\n      if (maxColumn > exploredMaxColumn) {\n        // Expand on the right\n        const rowDiff = exploredMaxRow - exploredMinRow;\n        const nextColumn = exploredMaxColumn + 1;\n        for (let i = 0; i <= rowDiff; i++) {\n          expandBoundary(map[exploredMinRow + i][nextColumn]);\n        }\n        exploredMaxColumn = nextColumn;\n      }\n      if (maxRow > exploredMaxRow) {\n        // Expand on the bottom\n        const columnDiff = exploredMaxColumn - exploredMinColumn;\n        const nextRow = exploredMaxRow + 1;\n        for (let i = 0; i <= columnDiff; i++) {\n          expandBoundary(map[nextRow][exploredMinColumn + i]);\n        }\n        exploredMaxRow = nextRow;\n      }\n    }\n    const nodes = [tableNode];\n    let lastRow = null;\n    for (let i = minRow; i <= maxRow; i++) {\n      for (let j = minColumn; j <= maxColumn; j++) {\n        const {\n          cell\n        } = map[i][j];\n        const currentRow = cell.getParent();\n        if (!$isTableRowNode(currentRow)) {\n          throw Error(`Expected TableCellNode parent to be a TableRowNode`);\n        }\n        if (currentRow !== lastRow) {\n          nodes.push(currentRow);\n        }\n        nodes.push(cell, ...$getChildrenRecursively(cell));\n        lastRow = currentRow;\n      }\n    }\n    if (!lexical.isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n    return nodes;\n  }\n  getTextContent() {\n    const nodes = this.getNodes();\n    let textContent = '';\n    for (let i = 0; i < nodes.length; i++) {\n      textContent += nodes[i].getTextContent();\n    }\n    return textContent;\n  }\n}\nfunction $isTableSelection(x) {\n  return x instanceof TableSelection;\n}\nfunction $createTableSelection() {\n  const anchor = lexical.$createPoint('root', 0, 'element');\n  const focus = lexical.$createPoint('root', 0, 'element');\n  return new TableSelection('root', anchor, focus);\n}\nfunction $getChildrenRecursively(node) {\n  const nodes = [];\n  const stack = [node];\n  while (stack.length > 0) {\n    const currentNode = stack.pop();\n    if (!(currentNode !== undefined)) {\n      throw Error(`Stack.length > 0; can't be undefined`);\n    }\n    if (lexical.$isElementNode(currentNode)) {\n      stack.unshift(...currentNode.getChildren());\n    }\n    if (currentNode !== node) {\n      nodes.push(currentNode);\n    }\n  }\n  return nodes;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst getDOMSelection = targetWindow => CAN_USE_DOM ? (targetWindow || window).getSelection() : null;\nclass TableObserver {\n  constructor(editor, tableNodeKey) {\n    this.isHighlightingCells = false;\n    this.anchorX = -1;\n    this.anchorY = -1;\n    this.focusX = -1;\n    this.focusY = -1;\n    this.listenersToRemove = new Set();\n    this.tableNodeKey = tableNodeKey;\n    this.editor = editor;\n    this.table = {\n      columns: 0,\n      domRows: [],\n      rows: 0\n    };\n    this.tableSelection = null;\n    this.anchorCellNodeKey = null;\n    this.focusCellNodeKey = null;\n    this.anchorCell = null;\n    this.focusCell = null;\n    this.hasHijackedSelectionStyles = false;\n    this.trackTable();\n  }\n  getTable() {\n    return this.table;\n  }\n  removeListeners() {\n    Array.from(this.listenersToRemove).forEach(removeListener => removeListener());\n  }\n  trackTable() {\n    const observer = new MutationObserver(records => {\n      this.editor.update(() => {\n        let gridNeedsRedraw = false;\n        for (let i = 0; i < records.length; i++) {\n          const record = records[i];\n          const target = record.target;\n          const nodeName = target.nodeName;\n          if (nodeName === 'TABLE' || nodeName === 'TR') {\n            gridNeedsRedraw = true;\n            break;\n          }\n        }\n        if (!gridNeedsRedraw) {\n          return;\n        }\n        const tableElement = this.editor.getElementByKey(this.tableNodeKey);\n        if (!tableElement) {\n          throw new Error('Expected to find TableElement in DOM');\n        }\n        this.table = getTable(tableElement);\n      });\n    });\n    this.editor.update(() => {\n      const tableElement = this.editor.getElementByKey(this.tableNodeKey);\n      if (!tableElement) {\n        throw new Error('Expected to find TableElement in DOM');\n      }\n      this.table = getTable(tableElement);\n      observer.observe(tableElement, {\n        childList: true,\n        subtree: true\n      });\n    });\n  }\n  clearHighlight() {\n    const editor = this.editor;\n    this.isHighlightingCells = false;\n    this.anchorX = -1;\n    this.anchorY = -1;\n    this.focusX = -1;\n    this.focusY = -1;\n    this.tableSelection = null;\n    this.anchorCellNodeKey = null;\n    this.focusCellNodeKey = null;\n    this.anchorCell = null;\n    this.focusCell = null;\n    this.hasHijackedSelectionStyles = false;\n    this.enableHighlightStyle();\n    editor.update(() => {\n      const tableNode = lexical.$getNodeByKey(this.tableNodeKey);\n      if (!$isTableNode(tableNode)) {\n        throw new Error('Expected TableNode.');\n      }\n      const tableElement = editor.getElementByKey(this.tableNodeKey);\n      if (!tableElement) {\n        throw new Error('Expected to find TableElement in DOM');\n      }\n      const grid = getTable(tableElement);\n      $updateDOMForSelection(editor, grid, null);\n      lexical.$setSelection(null);\n      editor.dispatchCommand(lexical.SELECTION_CHANGE_COMMAND, undefined);\n    });\n  }\n  enableHighlightStyle() {\n    const editor = this.editor;\n    editor.update(() => {\n      const tableElement = editor.getElementByKey(this.tableNodeKey);\n      if (!tableElement) {\n        throw new Error('Expected to find TableElement in DOM');\n      }\n      utils.removeClassNamesFromElement(tableElement, editor._config.theme.tableSelection);\n      tableElement.classList.remove('disable-selection');\n      this.hasHijackedSelectionStyles = false;\n    });\n  }\n  disableHighlightStyle() {\n    const editor = this.editor;\n    editor.update(() => {\n      const tableElement = editor.getElementByKey(this.tableNodeKey);\n      if (!tableElement) {\n        throw new Error('Expected to find TableElement in DOM');\n      }\n      utils.addClassNamesToElement(tableElement, editor._config.theme.tableSelection);\n      this.hasHijackedSelectionStyles = true;\n    });\n  }\n  updateTableTableSelection(selection) {\n    if (selection !== null && selection.tableKey === this.tableNodeKey) {\n      const editor = this.editor;\n      this.tableSelection = selection;\n      this.isHighlightingCells = true;\n      this.disableHighlightStyle();\n      $updateDOMForSelection(editor, this.table, this.tableSelection);\n    } else if (selection == null) {\n      this.clearHighlight();\n    } else {\n      this.tableNodeKey = selection.tableKey;\n      this.updateTableTableSelection(selection);\n    }\n  }\n  setFocusCellForSelection(cell, ignoreStart = false) {\n    const editor = this.editor;\n    editor.update(() => {\n      const tableNode = lexical.$getNodeByKey(this.tableNodeKey);\n      if (!$isTableNode(tableNode)) {\n        throw new Error('Expected TableNode.');\n      }\n      const tableElement = editor.getElementByKey(this.tableNodeKey);\n      if (!tableElement) {\n        throw new Error('Expected to find TableElement in DOM');\n      }\n      const cellX = cell.x;\n      const cellY = cell.y;\n      this.focusCell = cell;\n      if (this.anchorCell !== null) {\n        const domSelection = getDOMSelection(editor._window);\n        // Collapse the selection\n        if (domSelection) {\n          domSelection.setBaseAndExtent(this.anchorCell.elem, 0, this.focusCell.elem, 0);\n        }\n      }\n      if (!this.isHighlightingCells && (this.anchorX !== cellX || this.anchorY !== cellY || ignoreStart)) {\n        this.isHighlightingCells = true;\n        this.disableHighlightStyle();\n      } else if (cellX === this.focusX && cellY === this.focusY) {\n        return;\n      }\n      this.focusX = cellX;\n      this.focusY = cellY;\n      if (this.isHighlightingCells) {\n        const focusTableCellNode = lexical.$getNearestNodeFromDOMNode(cell.elem);\n        if (this.tableSelection != null && this.anchorCellNodeKey != null && $isTableCellNode(focusTableCellNode)) {\n          const focusNodeKey = focusTableCellNode.getKey();\n          this.tableSelection = this.tableSelection.clone() || $createTableSelection();\n          this.focusCellNodeKey = focusNodeKey;\n          this.tableSelection.set(this.tableNodeKey, this.anchorCellNodeKey, this.focusCellNodeKey);\n          lexical.$setSelection(this.tableSelection);\n          editor.dispatchCommand(lexical.SELECTION_CHANGE_COMMAND, undefined);\n          $updateDOMForSelection(editor, this.table, this.tableSelection);\n        }\n      }\n    });\n  }\n  setAnchorCellForSelection(cell) {\n    this.isHighlightingCells = false;\n    this.anchorCell = cell;\n    this.anchorX = cell.x;\n    this.anchorY = cell.y;\n    this.editor.update(() => {\n      const anchorTableCellNode = lexical.$getNearestNodeFromDOMNode(cell.elem);\n      if ($isTableCellNode(anchorTableCellNode)) {\n        const anchorNodeKey = anchorTableCellNode.getKey();\n        this.tableSelection = this.tableSelection != null ? this.tableSelection.clone() : $createTableSelection();\n        this.anchorCellNodeKey = anchorNodeKey;\n      }\n    });\n  }\n  formatCells(type) {\n    this.editor.update(() => {\n      const selection = lexical.$getSelection();\n      if (!$isTableSelection(selection)) {\n        {\n          throw Error(`Expected grid selection`);\n        }\n      }\n      const formatSelection = lexical.$createRangeSelection();\n      const anchor = formatSelection.anchor;\n      const focus = formatSelection.focus;\n      selection.getNodes().forEach(cellNode => {\n        if ($isTableCellNode(cellNode) && cellNode.getTextContentSize() !== 0) {\n          anchor.set(cellNode.getKey(), 0, 'element');\n          focus.set(cellNode.getKey(), cellNode.getChildrenSize(), 'element');\n          formatSelection.formatText(type);\n        }\n      });\n      lexical.$setSelection(selection);\n      this.editor.dispatchCommand(lexical.SELECTION_CHANGE_COMMAND, undefined);\n    });\n  }\n  clearText() {\n    const editor = this.editor;\n    editor.update(() => {\n      const tableNode = lexical.$getNodeByKey(this.tableNodeKey);\n      if (!$isTableNode(tableNode)) {\n        throw new Error('Expected TableNode.');\n      }\n      const selection = lexical.$getSelection();\n      if (!$isTableSelection(selection)) {\n        {\n          throw Error(`Expected grid selection`);\n        }\n      }\n      const selectedNodes = selection.getNodes().filter($isTableCellNode);\n      if (selectedNodes.length === this.table.columns * this.table.rows) {\n        tableNode.selectPrevious();\n        // Delete entire table\n        tableNode.remove();\n        const rootNode = lexical.$getRoot();\n        rootNode.selectStart();\n        return;\n      }\n      selectedNodes.forEach(cellNode => {\n        if (lexical.$isElementNode(cellNode)) {\n          const paragraphNode = lexical.$createParagraphNode();\n          const textNode = lexical.$createTextNode();\n          paragraphNode.append(textNode);\n          cellNode.append(paragraphNode);\n          cellNode.getChildren().forEach(child => {\n            if (child !== paragraphNode) {\n              child.remove();\n            }\n          });\n        }\n      });\n      $updateDOMForSelection(editor, this.table, null);\n      lexical.$setSelection(null);\n      editor.dispatchCommand(lexical.SELECTION_CHANGE_COMMAND, undefined);\n    });\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst LEXICAL_ELEMENT_KEY = '__lexicalTableSelection';\nfunction applyTableHandlers(tableNode, tableElement, editor, hasTabHandler) {\n  const rootElement = editor.getRootElement();\n  if (rootElement === null) {\n    throw new Error('No root element.');\n  }\n  const tableObserver = new TableObserver(editor, tableNode.getKey());\n  const editorWindow = editor._window || window;\n  attachTableObserverToTableElement(tableElement, tableObserver);\n  tableElement.addEventListener('mousedown', event => {\n    setTimeout(() => {\n      if (event.button !== 0) {\n        return;\n      }\n      if (!editorWindow) {\n        return;\n      }\n      const anchorCell = getDOMCellFromTarget(event.target);\n      if (anchorCell !== null) {\n        stopEvent(event);\n        tableObserver.setAnchorCellForSelection(anchorCell);\n      }\n      const onMouseUp = () => {\n        editorWindow.removeEventListener('mouseup', onMouseUp);\n        editorWindow.removeEventListener('mousemove', onMouseMove);\n      };\n      const onMouseMove = moveEvent => {\n        const focusCell = getDOMCellFromTarget(moveEvent.target);\n        if (focusCell !== null && (tableObserver.anchorX !== focusCell.x || tableObserver.anchorY !== focusCell.y)) {\n          moveEvent.preventDefault();\n          tableObserver.setFocusCellForSelection(focusCell);\n        }\n      };\n      editorWindow.addEventListener('mouseup', onMouseUp);\n      editorWindow.addEventListener('mousemove', onMouseMove);\n    }, 0);\n  });\n\n  // Clear selection when clicking outside of dom.\n  const mouseDownCallback = event => {\n    if (event.button !== 0) {\n      return;\n    }\n    editor.update(() => {\n      const selection = lexical.$getSelection();\n      const target = event.target;\n      if ($isTableSelection(selection) && selection.tableKey === tableObserver.tableNodeKey && rootElement.contains(target)) {\n        tableObserver.clearHighlight();\n      }\n    });\n  };\n  editorWindow.addEventListener('mousedown', mouseDownCallback);\n  tableObserver.listenersToRemove.add(() => editorWindow.removeEventListener('mousedown', mouseDownCallback));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.KEY_ARROW_DOWN_COMMAND, event => $handleArrowKey(editor, event, 'down', tableNode, tableObserver), lexical.COMMAND_PRIORITY_HIGH));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.KEY_ARROW_UP_COMMAND, event => $handleArrowKey(editor, event, 'up', tableNode, tableObserver), lexical.COMMAND_PRIORITY_HIGH));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.KEY_ARROW_LEFT_COMMAND, event => $handleArrowKey(editor, event, 'backward', tableNode, tableObserver), lexical.COMMAND_PRIORITY_HIGH));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.KEY_ARROW_RIGHT_COMMAND, event => $handleArrowKey(editor, event, 'forward', tableNode, tableObserver), lexical.COMMAND_PRIORITY_HIGH));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.KEY_ESCAPE_COMMAND, event => {\n    const selection = lexical.$getSelection();\n    if ($isTableSelection(selection)) {\n      const focusCellNode = utils.$findMatchingParent(selection.focus.getNode(), $isTableCellNode);\n      if ($isTableCellNode(focusCellNode)) {\n        stopEvent(event);\n        focusCellNode.selectEnd();\n        return true;\n      }\n    }\n    return false;\n  }, lexical.COMMAND_PRIORITY_HIGH));\n  const deleteTextHandler = command => () => {\n    const selection = lexical.$getSelection();\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n    if ($isTableSelection(selection)) {\n      tableObserver.clearText();\n      return true;\n    } else if (lexical.$isRangeSelection(selection)) {\n      const tableCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n      const anchorNode = selection.anchor.getNode();\n      const focusNode = selection.focus.getNode();\n      const isAnchorInside = tableNode.isParentOf(anchorNode);\n      const isFocusInside = tableNode.isParentOf(focusNode);\n      const selectionContainsPartialTable = isAnchorInside && !isFocusInside || isFocusInside && !isAnchorInside;\n      if (selectionContainsPartialTable) {\n        tableObserver.clearText();\n        return true;\n      }\n      const nearestElementNode = utils.$findMatchingParent(selection.anchor.getNode(), n => lexical.$isElementNode(n));\n      const topLevelCellElementNode = nearestElementNode && utils.$findMatchingParent(nearestElementNode, n => lexical.$isElementNode(n) && $isTableCellNode(n.getParent()));\n      if (!lexical.$isElementNode(topLevelCellElementNode) || !lexical.$isElementNode(nearestElementNode)) {\n        return false;\n      }\n      if (command === lexical.DELETE_LINE_COMMAND && topLevelCellElementNode.getPreviousSibling() === null) {\n        // TODO: Fix Delete Line in Table Cells.\n        return true;\n      }\n      if (command === lexical.DELETE_CHARACTER_COMMAND || command === lexical.DELETE_WORD_COMMAND) {\n        if (selection.isCollapsed() && selection.anchor.offset === 0) {\n          if (nearestElementNode !== topLevelCellElementNode) {\n            const children = nearestElementNode.getChildren();\n            const newParagraphNode = lexical.$createParagraphNode();\n            children.forEach(child => newParagraphNode.append(child));\n            nearestElementNode.replace(newParagraphNode);\n            nearestElementNode.getWritable().__parent = tableCellNode.getKey();\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n  [lexical.DELETE_WORD_COMMAND, lexical.DELETE_LINE_COMMAND, lexical.DELETE_CHARACTER_COMMAND].forEach(command => {\n    tableObserver.listenersToRemove.add(editor.registerCommand(command, deleteTextHandler(command), lexical.COMMAND_PRIORITY_CRITICAL));\n  });\n  const deleteCellHandler = event => {\n    const selection = lexical.$getSelection();\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n    if ($isTableSelection(selection)) {\n      event.preventDefault();\n      event.stopPropagation();\n      tableObserver.clearText();\n      return true;\n    } else if (lexical.$isRangeSelection(selection)) {\n      const tableCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n    }\n    return false;\n  };\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.KEY_BACKSPACE_COMMAND, deleteCellHandler, lexical.COMMAND_PRIORITY_CRITICAL));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.KEY_DELETE_COMMAND, deleteCellHandler, lexical.COMMAND_PRIORITY_CRITICAL));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.FORMAT_TEXT_COMMAND, payload => {\n    const selection = lexical.$getSelection();\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n    if ($isTableSelection(selection)) {\n      tableObserver.formatCells(payload);\n      return true;\n    } else if (lexical.$isRangeSelection(selection)) {\n      const tableCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n    }\n    return false;\n  }, lexical.COMMAND_PRIORITY_CRITICAL));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.CONTROLLED_TEXT_INSERTION_COMMAND, payload => {\n    const selection = lexical.$getSelection();\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n    if ($isTableSelection(selection)) {\n      tableObserver.clearHighlight();\n      return false;\n    } else if (lexical.$isRangeSelection(selection)) {\n      const tableCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n    }\n    return false;\n  }, lexical.COMMAND_PRIORITY_CRITICAL));\n  if (hasTabHandler) {\n    tableObserver.listenersToRemove.add(editor.registerCommand(lexical.KEY_TAB_COMMAND, event => {\n      const selection = lexical.$getSelection();\n      if (!lexical.$isRangeSelection(selection) || !selection.isCollapsed() || !$isSelectionInTable(selection, tableNode)) {\n        return false;\n      }\n      const tableCellNode = $findCellNode(selection.anchor.getNode());\n      if (tableCellNode === null) {\n        return false;\n      }\n      stopEvent(event);\n      const currentCords = tableNode.getCordsFromCellNode(tableCellNode, tableObserver.table);\n      selectTableNodeInDirection(tableObserver, tableNode, currentCords.x, currentCords.y, !event.shiftKey ? 'forward' : 'backward');\n      return true;\n    }, lexical.COMMAND_PRIORITY_CRITICAL));\n  }\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.FOCUS_COMMAND, payload => {\n    return tableNode.isSelected();\n  }, lexical.COMMAND_PRIORITY_HIGH));\n  function getObserverCellFromCellNode(tableCellNode) {\n    const currentCords = tableNode.getCordsFromCellNode(tableCellNode, tableObserver.table);\n    return tableNode.getDOMCellFromCordsOrThrow(currentCords.x, currentCords.y, tableObserver.table);\n  }\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.SELECTION_INSERT_CLIPBOARD_NODES_COMMAND, selectionPayload => {\n    const {\n      nodes,\n      selection\n    } = selectionPayload;\n    const anchorAndFocus = selection.getStartEndPoints();\n    const isTableSelection = $isTableSelection(selection);\n    const isRangeSelection = lexical.$isRangeSelection(selection);\n    const isSelectionInsideOfGrid = isRangeSelection && utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n)) !== null && utils.$findMatchingParent(selection.focus.getNode(), n => $isTableCellNode(n)) !== null || isTableSelection;\n    if (nodes.length !== 1 || !$isTableNode(nodes[0]) || !isSelectionInsideOfGrid || anchorAndFocus === null) {\n      return false;\n    }\n    const [anchor] = anchorAndFocus;\n    const newGrid = nodes[0];\n    const newGridRows = newGrid.getChildren();\n    const newColumnCount = newGrid.getFirstChildOrThrow().getChildrenSize();\n    const newRowCount = newGrid.getChildrenSize();\n    const gridCellNode = utils.$findMatchingParent(anchor.getNode(), n => $isTableCellNode(n));\n    const gridRowNode = gridCellNode && utils.$findMatchingParent(gridCellNode, n => $isTableRowNode(n));\n    const gridNode = gridRowNode && utils.$findMatchingParent(gridRowNode, n => $isTableNode(n));\n    if (!$isTableCellNode(gridCellNode) || !$isTableRowNode(gridRowNode) || !$isTableNode(gridNode)) {\n      return false;\n    }\n    const startY = gridRowNode.getIndexWithinParent();\n    const stopY = Math.min(gridNode.getChildrenSize() - 1, startY + newRowCount - 1);\n    const startX = gridCellNode.getIndexWithinParent();\n    const stopX = Math.min(gridRowNode.getChildrenSize() - 1, startX + newColumnCount - 1);\n    const fromX = Math.min(startX, stopX);\n    const fromY = Math.min(startY, stopY);\n    const toX = Math.max(startX, stopX);\n    const toY = Math.max(startY, stopY);\n    const gridRowNodes = gridNode.getChildren();\n    let newRowIdx = 0;\n    let newAnchorCellKey;\n    let newFocusCellKey;\n    for (let r = fromY; r <= toY; r++) {\n      const currentGridRowNode = gridRowNodes[r];\n      if (!$isTableRowNode(currentGridRowNode)) {\n        return false;\n      }\n      const newGridRowNode = newGridRows[newRowIdx];\n      if (!$isTableRowNode(newGridRowNode)) {\n        return false;\n      }\n      const gridCellNodes = currentGridRowNode.getChildren();\n      const newGridCellNodes = newGridRowNode.getChildren();\n      let newColumnIdx = 0;\n      for (let c = fromX; c <= toX; c++) {\n        const currentGridCellNode = gridCellNodes[c];\n        if (!$isTableCellNode(currentGridCellNode)) {\n          return false;\n        }\n        const newGridCellNode = newGridCellNodes[newColumnIdx];\n        if (!$isTableCellNode(newGridCellNode)) {\n          return false;\n        }\n        if (r === fromY && c === fromX) {\n          newAnchorCellKey = currentGridCellNode.getKey();\n        } else if (r === toY && c === toX) {\n          newFocusCellKey = currentGridCellNode.getKey();\n        }\n        const originalChildren = currentGridCellNode.getChildren();\n        newGridCellNode.getChildren().forEach(child => {\n          if (lexical.$isTextNode(child)) {\n            const paragraphNode = lexical.$createParagraphNode();\n            paragraphNode.append(child);\n            currentGridCellNode.append(child);\n          } else {\n            currentGridCellNode.append(child);\n          }\n        });\n        originalChildren.forEach(n => n.remove());\n        newColumnIdx++;\n      }\n      newRowIdx++;\n    }\n    if (newAnchorCellKey && newFocusCellKey) {\n      const newTableSelection = $createTableSelection();\n      newTableSelection.set(nodes[0].getKey(), newAnchorCellKey, newFocusCellKey);\n      lexical.$setSelection(newTableSelection);\n    }\n    return true;\n  }, lexical.COMMAND_PRIORITY_CRITICAL));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.SELECTION_CHANGE_COMMAND, () => {\n    const selection = lexical.$getSelection();\n    const prevSelection = lexical.$getPreviousSelection();\n    if (lexical.$isRangeSelection(selection)) {\n      const {\n        anchor,\n        focus\n      } = selection;\n      const anchorNode = anchor.getNode();\n      const focusNode = focus.getNode();\n      // Using explicit comparison with table node to ensure it's not a nested table\n      // as in that case we'll leave selection resolving to that table\n      const anchorCellNode = $findCellNode(anchorNode);\n      const focusCellNode = $findCellNode(focusNode);\n      const isAnchorInside = anchorCellNode && tableNode.is($findTableNode(anchorCellNode));\n      const isFocusInside = focusCellNode && tableNode.is($findTableNode(focusCellNode));\n      const isPartialyWithinTable = isAnchorInside !== isFocusInside;\n      const isWithinTable = isAnchorInside && isFocusInside;\n      const isBackward = selection.isBackward();\n      if (isPartialyWithinTable) {\n        const newSelection = selection.clone();\n        newSelection.focus.set(tableNode.getKey(), isBackward ? 0 : tableNode.getChildrenSize(), 'element');\n        lexical.$setSelection(newSelection);\n        $addHighlightStyleToTable(editor, tableObserver);\n      } else if (isWithinTable) {\n        // Handle case when selection spans across multiple cells but still\n        // has range selection, then we convert it into grid selection\n        if (!anchorCellNode.is(focusCellNode)) {\n          tableObserver.setAnchorCellForSelection(getObserverCellFromCellNode(anchorCellNode));\n          tableObserver.setFocusCellForSelection(getObserverCellFromCellNode(focusCellNode), true);\n        }\n      }\n    }\n    if (selection && !selection.is(prevSelection) && ($isTableSelection(selection) || $isTableSelection(prevSelection)) && tableObserver.tableSelection && !tableObserver.tableSelection.is(prevSelection)) {\n      if ($isTableSelection(selection) && selection.tableKey === tableObserver.tableNodeKey) {\n        tableObserver.updateTableTableSelection(selection);\n      } else if (!$isTableSelection(selection) && $isTableSelection(prevSelection) && prevSelection.tableKey === tableObserver.tableNodeKey) {\n        tableObserver.updateTableTableSelection(null);\n      }\n      return false;\n    }\n    if (tableObserver.hasHijackedSelectionStyles && !tableNode.isSelected()) {\n      $removeHighlightStyleToTable(editor, tableObserver);\n    } else if (!tableObserver.hasHijackedSelectionStyles && tableNode.isSelected()) {\n      $addHighlightStyleToTable(editor, tableObserver);\n    }\n    return false;\n  }, lexical.COMMAND_PRIORITY_CRITICAL));\n  return tableObserver;\n}\nfunction attachTableObserverToTableElement(tableElement, tableObserver) {\n  tableElement[LEXICAL_ELEMENT_KEY] = tableObserver;\n}\nfunction getTableObserverFromTableElement(tableElement) {\n  return tableElement[LEXICAL_ELEMENT_KEY];\n}\nfunction getDOMCellFromTarget(node) {\n  let currentNode = node;\n  while (currentNode != null) {\n    const nodeName = currentNode.nodeName;\n    if (nodeName === 'TD' || nodeName === 'TH') {\n      // @ts-expect-error: internal field\n      const cell = currentNode._cell;\n      if (cell === undefined) {\n        return null;\n      }\n      return cell;\n    }\n    currentNode = currentNode.parentNode;\n  }\n  return null;\n}\nfunction getTable(tableElement) {\n  const domRows = [];\n  const grid = {\n    columns: 0,\n    domRows,\n    rows: 0\n  };\n  let currentNode = tableElement.firstChild;\n  let x = 0;\n  let y = 0;\n  domRows.length = 0;\n  while (currentNode != null) {\n    const nodeMame = currentNode.nodeName;\n    if (nodeMame === 'TD' || nodeMame === 'TH') {\n      const elem = currentNode;\n      const cell = {\n        elem,\n        hasBackgroundColor: elem.style.backgroundColor !== '',\n        highlighted: false,\n        x,\n        y\n      };\n\n      // @ts-expect-error: internal field\n      currentNode._cell = cell;\n      let row = domRows[y];\n      if (row === undefined) {\n        row = domRows[y] = [];\n      }\n      row[x] = cell;\n    } else {\n      const child = currentNode.firstChild;\n      if (child != null) {\n        currentNode = child;\n        continue;\n      }\n    }\n    const sibling = currentNode.nextSibling;\n    if (sibling != null) {\n      x++;\n      currentNode = sibling;\n      continue;\n    }\n    const parent = currentNode.parentNode;\n    if (parent != null) {\n      const parentSibling = parent.nextSibling;\n      if (parentSibling == null) {\n        break;\n      }\n      y++;\n      x = 0;\n      currentNode = parentSibling;\n    }\n  }\n  grid.columns = x + 1;\n  grid.rows = y + 1;\n  return grid;\n}\nfunction $updateDOMForSelection(editor, table, selection) {\n  const selectedCellNodes = new Set(selection ? selection.getNodes() : []);\n  $forEachTableCell(table, (cell, lexicalNode) => {\n    const elem = cell.elem;\n    if (selectedCellNodes.has(lexicalNode)) {\n      cell.highlighted = true;\n      $addHighlightToDOM(editor, cell);\n    } else {\n      cell.highlighted = false;\n      $removeHighlightFromDOM(editor, cell);\n      if (!elem.getAttribute('style')) {\n        elem.removeAttribute('style');\n      }\n    }\n  });\n}\nfunction $forEachTableCell(grid, cb) {\n  const {\n    domRows\n  } = grid;\n  for (let y = 0; y < domRows.length; y++) {\n    const row = domRows[y];\n    if (!row) {\n      continue;\n    }\n    for (let x = 0; x < row.length; x++) {\n      const cell = row[x];\n      if (!cell) {\n        continue;\n      }\n      const lexicalNode = lexical.$getNearestNodeFromDOMNode(cell.elem);\n      if (lexicalNode !== null) {\n        cb(cell, lexicalNode, {\n          x,\n          y\n        });\n      }\n    }\n  }\n}\nfunction $addHighlightStyleToTable(editor, tableSelection) {\n  tableSelection.disableHighlightStyle();\n  $forEachTableCell(tableSelection.table, cell => {\n    cell.highlighted = true;\n    $addHighlightToDOM(editor, cell);\n  });\n}\nfunction $removeHighlightStyleToTable(editor, tableObserver) {\n  tableObserver.enableHighlightStyle();\n  $forEachTableCell(tableObserver.table, cell => {\n    const elem = cell.elem;\n    cell.highlighted = false;\n    $removeHighlightFromDOM(editor, cell);\n    if (!elem.getAttribute('style')) {\n      elem.removeAttribute('style');\n    }\n  });\n}\nconst selectTableNodeInDirection = (tableObserver, tableNode, x, y, direction) => {\n  const isForward = direction === 'forward';\n  switch (direction) {\n    case 'backward':\n    case 'forward':\n      if (x !== (isForward ? tableObserver.table.columns - 1 : 0)) {\n        selectTableCellNode(tableNode.getCellNodeFromCordsOrThrow(x + (isForward ? 1 : -1), y, tableObserver.table), isForward);\n      } else {\n        if (y !== (isForward ? tableObserver.table.rows - 1 : 0)) {\n          selectTableCellNode(tableNode.getCellNodeFromCordsOrThrow(isForward ? 0 : tableObserver.table.columns - 1, y + (isForward ? 1 : -1), tableObserver.table), isForward);\n        } else if (!isForward) {\n          tableNode.selectPrevious();\n        } else {\n          tableNode.selectNext();\n        }\n      }\n      return true;\n    case 'up':\n      if (y !== 0) {\n        selectTableCellNode(tableNode.getCellNodeFromCordsOrThrow(x, y - 1, tableObserver.table), false);\n      } else {\n        tableNode.selectPrevious();\n      }\n      return true;\n    case 'down':\n      if (y !== tableObserver.table.rows - 1) {\n        selectTableCellNode(tableNode.getCellNodeFromCordsOrThrow(x, y + 1, tableObserver.table), true);\n      } else {\n        tableNode.selectNext();\n      }\n      return true;\n    default:\n      return false;\n  }\n};\nconst adjustFocusNodeInDirection = (tableObserver, tableNode, x, y, direction) => {\n  const isForward = direction === 'forward';\n  switch (direction) {\n    case 'backward':\n    case 'forward':\n      if (x !== (isForward ? tableObserver.table.columns - 1 : 0)) {\n        tableObserver.setFocusCellForSelection(tableNode.getDOMCellFromCordsOrThrow(x + (isForward ? 1 : -1), y, tableObserver.table));\n      }\n      return true;\n    case 'up':\n      if (y !== 0) {\n        tableObserver.setFocusCellForSelection(tableNode.getDOMCellFromCordsOrThrow(x, y - 1, tableObserver.table));\n        return true;\n      } else {\n        return false;\n      }\n    case 'down':\n      if (y !== tableObserver.table.rows - 1) {\n        tableObserver.setFocusCellForSelection(tableNode.getDOMCellFromCordsOrThrow(x, y + 1, tableObserver.table));\n        return true;\n      } else {\n        return false;\n      }\n    default:\n      return false;\n  }\n};\nfunction $isSelectionInTable(selection, tableNode) {\n  if (lexical.$isRangeSelection(selection) || $isTableSelection(selection)) {\n    const isAnchorInside = tableNode.isParentOf(selection.anchor.getNode());\n    const isFocusInside = tableNode.isParentOf(selection.focus.getNode());\n    return isAnchorInside && isFocusInside;\n  }\n  return false;\n}\nfunction selectTableCellNode(tableCell, fromStart) {\n  if (fromStart) {\n    tableCell.selectStart();\n  } else {\n    tableCell.selectEnd();\n  }\n}\nconst BROWSER_BLUE_RGB = '172,206,247';\nfunction $addHighlightToDOM(editor, cell) {\n  const element = cell.elem;\n  const node = lexical.$getNearestNodeFromDOMNode(element);\n  if (!$isTableCellNode(node)) {\n    throw Error(`Expected to find LexicalNode from Table Cell DOMNode`);\n  }\n  const backgroundColor = node.getBackgroundColor();\n  if (backgroundColor === null) {\n    element.style.setProperty('background-color', `rgb(${BROWSER_BLUE_RGB})`);\n  } else {\n    element.style.setProperty('background-image', `linear-gradient(to right, rgba(${BROWSER_BLUE_RGB},0.85), rgba(${BROWSER_BLUE_RGB},0.85))`);\n  }\n  element.style.setProperty('caret-color', 'transparent');\n}\nfunction $removeHighlightFromDOM(editor, cell) {\n  const element = cell.elem;\n  const node = lexical.$getNearestNodeFromDOMNode(element);\n  if (!$isTableCellNode(node)) {\n    throw Error(`Expected to find LexicalNode from Table Cell DOMNode`);\n  }\n  const backgroundColor = node.getBackgroundColor();\n  if (backgroundColor === null) {\n    element.style.removeProperty('background-color');\n  }\n  element.style.removeProperty('background-image');\n  element.style.removeProperty('caret-color');\n}\nfunction $findCellNode(node) {\n  const cellNode = utils.$findMatchingParent(node, $isTableCellNode);\n  return $isTableCellNode(cellNode) ? cellNode : null;\n}\nfunction $findTableNode(node) {\n  const tableNode = utils.$findMatchingParent(node, $isTableNode);\n  return $isTableNode(tableNode) ? tableNode : null;\n}\nfunction $handleArrowKey(editor, event, direction, tableNode, tableObserver) {\n  const selection = lexical.$getSelection();\n  if (!$isSelectionInTable(selection, tableNode)) {\n    return false;\n  }\n  if (lexical.$isRangeSelection(selection) && selection.isCollapsed()) {\n    // Horizontal move between cels seem to work well without interruption\n    // so just exit early, and handle vertical moves\n    if (direction === 'backward' || direction === 'forward') {\n      return false;\n    }\n    const {\n      anchor,\n      focus\n    } = selection;\n    const anchorCellNode = utils.$findMatchingParent(anchor.getNode(), $isTableCellNode);\n    const focusCellNode = utils.$findMatchingParent(focus.getNode(), $isTableCellNode);\n    if (!$isTableCellNode(anchorCellNode) || !anchorCellNode.is(focusCellNode)) {\n      return false;\n    }\n    const anchorCellTable = $findTableNode(anchorCellNode);\n    if (anchorCellTable !== tableNode && anchorCellTable != null) {\n      const anchorCellTableElement = editor.getElementByKey(anchorCellTable.getKey());\n      if (anchorCellTableElement != null) {\n        tableObserver.table = getTable(anchorCellTableElement);\n        return $handleArrowKey(editor, event, direction, anchorCellTable, tableObserver);\n      }\n    }\n    const anchorCellDom = editor.getElementByKey(anchorCellNode.__key);\n    const anchorDOM = editor.getElementByKey(anchor.key);\n    if (anchorDOM == null || anchorCellDom == null) {\n      return false;\n    }\n    let edgeSelectionRect;\n    if (anchor.type === 'element') {\n      edgeSelectionRect = anchorDOM.getBoundingClientRect();\n    } else {\n      const domSelection = window.getSelection();\n      if (domSelection === null || domSelection.rangeCount === 0) {\n        return false;\n      }\n      const range = domSelection.getRangeAt(0);\n      edgeSelectionRect = range.getBoundingClientRect();\n    }\n    const edgeChild = direction === 'up' ? anchorCellNode.getFirstChild() : anchorCellNode.getLastChild();\n    if (edgeChild == null) {\n      return false;\n    }\n    const edgeChildDOM = editor.getElementByKey(edgeChild.__key);\n    if (edgeChildDOM == null) {\n      return false;\n    }\n    const edgeRect = edgeChildDOM.getBoundingClientRect();\n    const isExiting = direction === 'up' ? edgeRect.top > edgeSelectionRect.top - edgeSelectionRect.height : edgeSelectionRect.bottom + edgeSelectionRect.height > edgeRect.bottom;\n    if (isExiting) {\n      stopEvent(event);\n      const cords = tableNode.getCordsFromCellNode(anchorCellNode, tableObserver.table);\n      if (event.shiftKey) {\n        const cell = tableNode.getDOMCellFromCordsOrThrow(cords.x, cords.y, tableObserver.table);\n        tableObserver.setAnchorCellForSelection(cell);\n        tableObserver.setFocusCellForSelection(cell, true);\n      } else {\n        return selectTableNodeInDirection(tableObserver, tableNode, cords.x, cords.y, direction);\n      }\n      return true;\n    }\n  } else if ($isTableSelection(selection)) {\n    const {\n      anchor,\n      focus\n    } = selection;\n    const anchorCellNode = utils.$findMatchingParent(anchor.getNode(), $isTableCellNode);\n    const focusCellNode = utils.$findMatchingParent(focus.getNode(), $isTableCellNode);\n    const [tableNodeFromSelection] = selection.getNodes();\n    const tableElement = editor.getElementByKey(tableNodeFromSelection.getKey());\n    if (!$isTableCellNode(anchorCellNode) || !$isTableCellNode(focusCellNode) || !$isTableNode(tableNodeFromSelection) || tableElement == null) {\n      return false;\n    }\n    tableObserver.updateTableTableSelection(selection);\n    const grid = getTable(tableElement);\n    const cordsAnchor = tableNode.getCordsFromCellNode(anchorCellNode, grid);\n    const anchorCell = tableNode.getDOMCellFromCordsOrThrow(cordsAnchor.x, cordsAnchor.y, grid);\n    tableObserver.setAnchorCellForSelection(anchorCell);\n    stopEvent(event);\n    if (event.shiftKey) {\n      const cords = tableNode.getCordsFromCellNode(focusCellNode, grid);\n      return adjustFocusNodeInDirection(tableObserver, tableNodeFromSelection, cords.x, cords.y, direction);\n    } else {\n      focusCellNode.selectEnd();\n    }\n    return true;\n  }\n  return false;\n}\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n  event.stopPropagation();\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/** @noInheritDoc */\nclass TableNode extends lexical.ElementNode {\n  static getType() {\n    return 'table';\n  }\n  static clone(node) {\n    return new TableNode(node.__key);\n  }\n  static importDOM() {\n    return {\n      table: _node => ({\n        conversion: convertTableElement,\n        priority: 1\n      })\n    };\n  }\n  static importJSON(_serializedNode) {\n    return $createTableNode();\n  }\n  constructor(key) {\n    super(key);\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      type: 'table',\n      version: 1\n    };\n  }\n  createDOM(config, editor) {\n    const tableElement = document.createElement('table');\n    utils.addClassNamesToElement(tableElement, config.theme.table);\n    return tableElement;\n  }\n  updateDOM() {\n    return false;\n  }\n  exportDOM(editor) {\n    return {\n      ...super.exportDOM(editor),\n      after: tableElement => {\n        if (tableElement) {\n          const newElement = tableElement.cloneNode();\n          const colGroup = document.createElement('colgroup');\n          const tBody = document.createElement('tbody');\n          if (utils.isHTMLElement(tableElement)) {\n            tBody.append(...tableElement.children);\n          }\n          const firstRow = this.getFirstChildOrThrow();\n          if (!$isTableRowNode(firstRow)) {\n            throw new Error('Expected to find row node.');\n          }\n          const colCount = firstRow.getChildrenSize();\n          for (let i = 0; i < colCount; i++) {\n            const col = document.createElement('col');\n            colGroup.append(col);\n          }\n          newElement.replaceChildren(colGroup, tBody);\n          return newElement;\n        }\n      }\n    };\n  }\n\n  // TODO 0.10 deprecate\n  canExtractContents() {\n    return false;\n  }\n  canBeEmpty() {\n    return false;\n  }\n  isShadowRoot() {\n    return true;\n  }\n  getCordsFromCellNode(tableCellNode, table) {\n    const {\n      rows,\n      domRows\n    } = table;\n    for (let y = 0; y < rows; y++) {\n      const row = domRows[y];\n      if (row == null) {\n        continue;\n      }\n      const x = row.findIndex(cell => {\n        if (!cell) return;\n        const {\n          elem\n        } = cell;\n        const cellNode = lexical.$getNearestNodeFromDOMNode(elem);\n        return cellNode === tableCellNode;\n      });\n      if (x !== -1) {\n        return {\n          x,\n          y\n        };\n      }\n    }\n    throw new Error('Cell not found in table.');\n  }\n  getDOMCellFromCords(x, y, table) {\n    const {\n      domRows\n    } = table;\n    const row = domRows[y];\n    if (row == null) {\n      return null;\n    }\n    const cell = row[x];\n    if (cell == null) {\n      return null;\n    }\n    return cell;\n  }\n  getDOMCellFromCordsOrThrow(x, y, table) {\n    const cell = this.getDOMCellFromCords(x, y, table);\n    if (!cell) {\n      throw new Error('Cell not found at cords.');\n    }\n    return cell;\n  }\n  getCellNodeFromCords(x, y, table) {\n    const cell = this.getDOMCellFromCords(x, y, table);\n    if (cell == null) {\n      return null;\n    }\n    const node = lexical.$getNearestNodeFromDOMNode(cell.elem);\n    if ($isTableCellNode(node)) {\n      return node;\n    }\n    return null;\n  }\n  getCellNodeFromCordsOrThrow(x, y, table) {\n    const node = this.getCellNodeFromCords(x, y, table);\n    if (!node) {\n      throw new Error('Node at cords not TableCellNode.');\n    }\n    return node;\n  }\n  canSelectBefore() {\n    return true;\n  }\n  canIndent() {\n    return false;\n  }\n}\nfunction $getElementForTableNode(editor, tableNode) {\n  const tableElement = editor.getElementByKey(tableNode.getKey());\n  if (tableElement == null) {\n    throw new Error('Table Element Not Found');\n  }\n  return getTable(tableElement);\n}\nfunction convertTableElement(_domNode) {\n  return {\n    node: $createTableNode()\n  };\n}\nfunction $createTableNode() {\n  return lexical.$applyNodeReplacement(new TableNode());\n}\nfunction $isTableNode(node) {\n  return node instanceof TableNode;\n}\n\nexports.$computeTableMap = $computeTableMap;\nexports.$createTableCellNode = $createTableCellNode;\nexports.$createTableNode = $createTableNode;\nexports.$createTableNodeWithDimensions = $createTableNodeWithDimensions;\nexports.$createTableRowNode = $createTableRowNode;\nexports.$createTableSelection = $createTableSelection;\nexports.$deleteTableColumn = $deleteTableColumn;\nexports.$deleteTableColumn__EXPERIMENTAL = $deleteTableColumn__EXPERIMENTAL;\nexports.$deleteTableRow__EXPERIMENTAL = $deleteTableRow__EXPERIMENTAL;\nexports.$getElementForTableNode = $getElementForTableNode;\nexports.$getNodeTriplet = $getNodeTriplet;\nexports.$getTableCellNodeFromLexicalNode = $getTableCellNodeFromLexicalNode;\nexports.$getTableCellNodeRect = $getTableCellNodeRect;\nexports.$getTableColumnIndexFromTableCellNode = $getTableColumnIndexFromTableCellNode;\nexports.$getTableNodeFromLexicalNodeOrThrow = $getTableNodeFromLexicalNodeOrThrow;\nexports.$getTableRowIndexFromTableCellNode = $getTableRowIndexFromTableCellNode;\nexports.$getTableRowNodeFromTableCellNodeOrThrow = $getTableRowNodeFromTableCellNodeOrThrow;\nexports.$insertTableColumn = $insertTableColumn;\nexports.$insertTableColumn__EXPERIMENTAL = $insertTableColumn__EXPERIMENTAL;\nexports.$insertTableRow = $insertTableRow;\nexports.$insertTableRow__EXPERIMENTAL = $insertTableRow__EXPERIMENTAL;\nexports.$isTableCellNode = $isTableCellNode;\nexports.$isTableNode = $isTableNode;\nexports.$isTableRowNode = $isTableRowNode;\nexports.$isTableSelection = $isTableSelection;\nexports.$removeTableRowAtIndex = $removeTableRowAtIndex;\nexports.$unmergeCell = $unmergeCell;\nexports.INSERT_TABLE_COMMAND = INSERT_TABLE_COMMAND;\nexports.TableCellHeaderStates = TableCellHeaderStates;\nexports.TableCellNode = TableCellNode;\nexports.TableNode = TableNode;\nexports.TableObserver = TableObserver;\nexports.TableRowNode = TableRowNode;\nexports.applyTableHandlers = applyTableHandlers;\nexports.getDOMCellFromTarget = getDOMCellFromTarget;\nexports.getTableObserverFromTableElement = getTableObserverFromTableElement;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict'\nconst LexicalTable = process.env.NODE_ENV === 'development' ? require('./LexicalTable.dev.js') : require('./LexicalTable.prod.js')\nmodule.exports = LexicalTable;"],
  "mappings": "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",
  "names": []
}
