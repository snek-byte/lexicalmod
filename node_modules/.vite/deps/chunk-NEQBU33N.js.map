{
  "version": 3,
  "sources": ["../../@lexical/html/LexicalHtml.dev.js", "../../@lexical/html/LexicalHtml.js", "../../@lexical/clipboard/LexicalClipboard.dev.js", "../../@lexical/clipboard/LexicalClipboard.js", "../../@lexical/rich-text/LexicalRichText.dev.js", "../../@lexical/rich-text/LexicalRichText.js"],
  "sourcesContent": ["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n'use strict';\r\n\r\nvar selection = require('@lexical/selection');\r\nvar utils = require('@lexical/utils');\r\nvar lexical = require('lexical');\r\n\r\n/** @module @lexical/html */\r\n\r\n/**\r\n * How you parse your html string to get a document is left up to you. In the browser you can use the native\r\n * DOMParser API to generate a document (see clipboard.ts), but to use in a headless environment you can use JSDom\r\n * or an equivilant library and pass in the document here.\r\n */\r\nfunction $generateNodesFromDOM(editor, dom) {\r\n  const elements = dom.body ? dom.body.childNodes : [];\r\n  let lexicalNodes = [];\r\n  for (let i = 0; i < elements.length; i++) {\r\n    const element = elements[i];\r\n    if (!IGNORE_TAGS.has(element.nodeName)) {\r\n      const lexicalNode = $createNodesFromDOM(element, editor);\r\n      if (lexicalNode !== null) {\r\n        lexicalNodes = lexicalNodes.concat(lexicalNode);\r\n      }\r\n    }\r\n  }\r\n  return lexicalNodes;\r\n}\r\nfunction $generateHtmlFromNodes(editor, selection) {\r\n  if (typeof document === 'undefined' || typeof window === 'undefined' && typeof global.window === 'undefined') {\r\n    throw new Error('To use $generateHtmlFromNodes in headless mode please initialize a headless browser implementation such as JSDom before calling this function.');\r\n  }\r\n  const container = document.createElement('div');\r\n  const root = lexical.$getRoot();\r\n  const topLevelChildren = root.getChildren();\r\n  for (let i = 0; i < topLevelChildren.length; i++) {\r\n    const topLevelNode = topLevelChildren[i];\r\n    $appendNodesToHTML(editor, topLevelNode, container, selection);\r\n  }\r\n  return container.innerHTML;\r\n}\r\nfunction $appendNodesToHTML(editor, currentNode, parentElement, selection$1 = null) {\r\n  let shouldInclude = selection$1 !== null ? currentNode.isSelected(selection$1) : true;\r\n  const shouldExclude = lexical.$isElementNode(currentNode) && currentNode.excludeFromCopy('html');\r\n  let target = currentNode;\r\n  if (selection$1 !== null) {\r\n    let clone = selection.$cloneWithProperties(currentNode);\r\n    clone = lexical.$isTextNode(clone) && selection$1 !== null ? selection.$sliceSelectedTextNodeContent(selection$1, clone) : clone;\r\n    target = clone;\r\n  }\r\n  const children = lexical.$isElementNode(target) ? target.getChildren() : [];\r\n  const registeredNode = editor._nodes.get(target.getType());\r\n  let exportOutput;\r\n\r\n  // Use HTMLConfig overrides, if available.\r\n  if (registeredNode && registeredNode.exportDOM !== undefined) {\r\n    exportOutput = registeredNode.exportDOM(editor, target);\r\n  } else {\r\n    exportOutput = target.exportDOM(editor);\r\n  }\r\n  const {\r\n    element,\r\n    after\r\n  } = exportOutput;\r\n  if (!element) {\r\n    return false;\r\n  }\r\n  const fragment = document.createDocumentFragment();\r\n  for (let i = 0; i < children.length; i++) {\r\n    const childNode = children[i];\r\n    const shouldIncludeChild = $appendNodesToHTML(editor, childNode, fragment, selection$1);\r\n    if (!shouldInclude && lexical.$isElementNode(currentNode) && shouldIncludeChild && currentNode.extractWithChild(childNode, selection$1, 'html')) {\r\n      shouldInclude = true;\r\n    }\r\n  }\r\n  if (shouldInclude && !shouldExclude) {\r\n    if (utils.isHTMLElement(element)) {\r\n      element.append(fragment);\r\n    }\r\n    parentElement.append(element);\r\n    if (after) {\r\n      const newElement = after.call(target, element);\r\n      if (newElement) element.replaceWith(newElement);\r\n    }\r\n  } else {\r\n    parentElement.append(fragment);\r\n  }\r\n  return shouldInclude;\r\n}\r\nfunction getConversionFunction(domNode, editor) {\r\n  const {\r\n    nodeName\r\n  } = domNode;\r\n  const cachedConversions = editor._htmlConversions.get(nodeName.toLowerCase());\r\n  let currentConversion = null;\r\n  if (cachedConversions !== undefined) {\r\n    for (const cachedConversion of cachedConversions) {\r\n      const domConversion = cachedConversion(domNode);\r\n      if (domConversion !== null && (currentConversion === null || (currentConversion.priority || 0) < (domConversion.priority || 0))) {\r\n        currentConversion = domConversion;\r\n      }\r\n    }\r\n  }\r\n  return currentConversion !== null ? currentConversion.conversion : null;\r\n}\r\nconst IGNORE_TAGS = new Set(['STYLE', 'SCRIPT']);\r\nfunction $createNodesFromDOM(node, editor, forChildMap = new Map(), parentLexicalNode) {\r\n  let lexicalNodes = [];\r\n  if (IGNORE_TAGS.has(node.nodeName)) {\r\n    return lexicalNodes;\r\n  }\r\n  let currentLexicalNode = null;\r\n  const transformFunction = getConversionFunction(node, editor);\r\n  const transformOutput = transformFunction ? transformFunction(node) : null;\r\n  let postTransform = null;\r\n  if (transformOutput !== null) {\r\n    postTransform = transformOutput.after;\r\n    const transformNodes = transformOutput.node;\r\n    currentLexicalNode = Array.isArray(transformNodes) ? transformNodes[transformNodes.length - 1] : transformNodes;\r\n    if (currentLexicalNode !== null) {\r\n      for (const [, forChildFunction] of forChildMap) {\r\n        currentLexicalNode = forChildFunction(currentLexicalNode, parentLexicalNode);\r\n        if (!currentLexicalNode) {\r\n          break;\r\n        }\r\n      }\r\n      if (currentLexicalNode) {\r\n        lexicalNodes.push(...(Array.isArray(transformNodes) ? transformNodes : [currentLexicalNode]));\r\n      }\r\n    }\r\n    if (transformOutput.forChild != null) {\r\n      forChildMap.set(node.nodeName, transformOutput.forChild);\r\n    }\r\n  }\r\n\r\n  // If the DOM node doesn't have a transformer, we don't know what\r\n  // to do with it but we still need to process any childNodes.\r\n  const children = node.childNodes;\r\n  let childLexicalNodes = [];\r\n  for (let i = 0; i < children.length; i++) {\r\n    childLexicalNodes.push(...$createNodesFromDOM(children[i], editor, new Map(forChildMap), currentLexicalNode));\r\n  }\r\n  if (postTransform != null) {\r\n    childLexicalNodes = postTransform(childLexicalNodes);\r\n  }\r\n  if (currentLexicalNode == null) {\r\n    // If it hasn't been converted to a LexicalNode, we hoist its children\r\n    // up to the same level as it.\r\n    lexicalNodes = lexicalNodes.concat(childLexicalNodes);\r\n  } else {\r\n    if (lexical.$isElementNode(currentLexicalNode)) {\r\n      // If the current node is a ElementNode after conversion,\r\n      // we can append all the children to it.\r\n      currentLexicalNode.append(...childLexicalNodes);\r\n    }\r\n  }\r\n  return lexicalNodes;\r\n}\r\n\r\nexports.$generateHtmlFromNodes = $generateHtmlFromNodes;\r\nexports.$generateNodesFromDOM = $generateNodesFromDOM;\r\n", "/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n'use strict'\r\nconst LexicalHtml = process.env.NODE_ENV === 'development' ? require('./LexicalHtml.dev.js') : require('./LexicalHtml.prod.js')\r\nmodule.exports = LexicalHtml;", "/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n'use strict';\r\n\r\nvar html = require('@lexical/html');\r\nvar selection = require('@lexical/selection');\r\nvar utils = require('@lexical/utils');\r\nvar lexical = require('lexical');\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n\r\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nconst getDOMSelection = targetWindow => CAN_USE_DOM ? (targetWindow || window).getSelection() : null;\r\n\r\n/**\r\n * Returns the *currently selected* Lexical content as an HTML string, relying on the\r\n * logic defined in the exportDOM methods on the LexicalNode classes. Note that\r\n * this will not return the HTML content of the entire editor (unless all the content is included\r\n * in the current selection).\r\n *\r\n * @param editor - LexicalEditor instance to get HTML content from\r\n * @returns a string of HTML content\r\n */\r\nfunction $getHtmlContent(editor) {\r\n  const selection = lexical.$getSelection();\r\n  if (selection == null) {\r\n    {\r\n      throw Error(`Expected valid LexicalSelection`);\r\n    }\r\n  }\r\n\r\n  // If we haven't selected anything\r\n  if (lexical.$isRangeSelection(selection) && selection.isCollapsed() || selection.getNodes().length === 0) {\r\n    return '';\r\n  }\r\n  return html.$generateHtmlFromNodes(editor, selection);\r\n}\r\n\r\n/**\r\n * Returns the *currently selected* Lexical content as a JSON string, relying on the\r\n * logic defined in the exportJSON methods on the LexicalNode classes. Note that\r\n * this will not return the JSON content of the entire editor (unless all the content is included\r\n * in the current selection).\r\n *\r\n * @param editor  - LexicalEditor instance to get the JSON content from\r\n * @returns\r\n */\r\nfunction $getLexicalContent(editor) {\r\n  const selection = lexical.$getSelection();\r\n  if (selection == null) {\r\n    {\r\n      throw Error(`Expected valid LexicalSelection`);\r\n    }\r\n  }\r\n\r\n  // If we haven't selected anything\r\n  if (lexical.$isRangeSelection(selection) && selection.isCollapsed() || selection.getNodes().length === 0) {\r\n    return null;\r\n  }\r\n  return JSON.stringify($generateJSONFromSelectedNodes(editor, selection));\r\n}\r\n\r\n/**\r\n * Attempts to insert content of the mime-types text/plain or text/uri-list from\r\n * the provided DataTransfer object into the editor at the provided selection.\r\n * text/uri-list is only used if text/plain is not also provided.\r\n *\r\n * @param dataTransfer an object conforming to the [DataTransfer interface] (https://html.spec.whatwg.org/multipage/dnd.html#the-datatransfer-interface)\r\n * @param selection the selection to use as the insertion point for the content in the DataTransfer object\r\n */\r\nfunction $insertDataTransferForPlainText(dataTransfer, selection) {\r\n  const text = dataTransfer.getData('text/plain') || dataTransfer.getData('text/uri-list');\r\n  if (text != null) {\r\n    selection.insertRawText(text);\r\n  }\r\n}\r\n\r\n/**\r\n * Attempts to insert content of the mime-types application/x-lexical-editor, text/html,\r\n * text/plain, or text/uri-list (in descending order of priority) from the provided DataTransfer\r\n * object into the editor at the provided selection.\r\n *\r\n * @param dataTransfer an object conforming to the [DataTransfer interface] (https://html.spec.whatwg.org/multipage/dnd.html#the-datatransfer-interface)\r\n * @param selection the selection to use as the insertion point for the content in the DataTransfer object\r\n * @param editor the LexicalEditor the content is being inserted into.\r\n */\r\nfunction $insertDataTransferForRichText(dataTransfer, selection, editor) {\r\n  const lexicalString = dataTransfer.getData('application/x-lexical-editor');\r\n  if (lexicalString) {\r\n    try {\r\n      const payload = JSON.parse(lexicalString);\r\n      if (payload.namespace === editor._config.namespace && Array.isArray(payload.nodes)) {\r\n        const nodes = $generateNodesFromSerializedNodes(payload.nodes);\r\n        return $insertGeneratedNodes(editor, nodes, selection);\r\n      }\r\n    } catch (_unused) {\r\n      // Fail silently.\r\n    }\r\n  }\r\n  const htmlString = dataTransfer.getData('text/html');\r\n  if (htmlString) {\r\n    try {\r\n      const parser = new DOMParser();\r\n      const dom = parser.parseFromString(htmlString, 'text/html');\r\n      const nodes = html.$generateNodesFromDOM(editor, dom);\r\n      return $insertGeneratedNodes(editor, nodes, selection);\r\n    } catch (_unused2) {\r\n      // Fail silently.\r\n    }\r\n  }\r\n\r\n  // Multi-line plain text in rich text mode pasted as separate paragraphs\r\n  // instead of single paragraph with linebreaks.\r\n  // Webkit-specific: Supports read 'text/uri-list' in clipboard.\r\n  const text = dataTransfer.getData('text/plain') || dataTransfer.getData('text/uri-list');\r\n  if (text != null) {\r\n    if (lexical.$isRangeSelection(selection)) {\r\n      const parts = text.split(/(\\r?\\n|\\t)/);\r\n      if (parts[parts.length - 1] === '') {\r\n        parts.pop();\r\n      }\r\n      for (let i = 0; i < parts.length; i++) {\r\n        const part = parts[i];\r\n        if (part === '\\n' || part === '\\r\\n') {\r\n          selection.insertParagraph();\r\n        } else if (part === '\\t') {\r\n          selection.insertNodes([lexical.$createTabNode()]);\r\n        } else {\r\n          selection.insertText(part);\r\n        }\r\n      }\r\n    } else {\r\n      selection.insertRawText(text);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Inserts Lexical nodes into the editor using different strategies depending on\r\n * some simple selection-based heuristics. If you're looking for a generic way to\r\n * to insert nodes into the editor at a specific selection point, you probably want\r\n * {@link lexical.$insertNodes}\r\n *\r\n * @param editor LexicalEditor instance to insert the nodes into.\r\n * @param nodes The nodes to insert.\r\n * @param selection The selection to insert the nodes into.\r\n */\r\nfunction $insertGeneratedNodes(editor, nodes, selection) {\r\n  if (!editor.dispatchCommand(lexical.SELECTION_INSERT_CLIPBOARD_NODES_COMMAND, {\r\n    nodes,\r\n    selection\r\n  })) {\r\n    selection.insertNodes(nodes);\r\n  }\r\n  return;\r\n}\r\nfunction exportNodeToJSON(node) {\r\n  const serializedNode = node.exportJSON();\r\n  const nodeClass = node.constructor;\r\n  if (serializedNode.type !== nodeClass.getType()) {\r\n    {\r\n      throw Error(`LexicalNode: Node ${nodeClass.name} does not implement .exportJSON().`);\r\n    }\r\n  }\r\n  if (lexical.$isElementNode(node)) {\r\n    const serializedChildren = serializedNode.children;\r\n    if (!Array.isArray(serializedChildren)) {\r\n      {\r\n        throw Error(`LexicalNode: Node ${nodeClass.name} is an element but .exportJSON() does not have a children array.`);\r\n      }\r\n    }\r\n  }\r\n  return serializedNode;\r\n}\r\nfunction $appendNodesToJSON(editor, selection$1, currentNode, targetArray = []) {\r\n  let shouldInclude = selection$1 !== null ? currentNode.isSelected(selection$1) : true;\r\n  const shouldExclude = lexical.$isElementNode(currentNode) && currentNode.excludeFromCopy('html');\r\n  let target = currentNode;\r\n  if (selection$1 !== null) {\r\n    let clone = selection.$cloneWithProperties(currentNode);\r\n    clone = lexical.$isTextNode(clone) && selection$1 !== null ? selection.$sliceSelectedTextNodeContent(selection$1, clone) : clone;\r\n    target = clone;\r\n  }\r\n  const children = lexical.$isElementNode(target) ? target.getChildren() : [];\r\n  const serializedNode = exportNodeToJSON(target);\r\n\r\n  // TODO: TextNode calls getTextContent() (NOT node.__text) within it's exportJSON method\r\n  // which uses getLatest() to get the text from the original node with the same key.\r\n  // This is a deeper issue with the word \"clone\" here, it's still a reference to the\r\n  // same node as far as the LexicalEditor is concerned since it shares a key.\r\n  // We need a way to create a clone of a Node in memory with it's own key, but\r\n  // until then this hack will work for the selected text extract use case.\r\n  if (lexical.$isTextNode(target)) {\r\n    const text = target.__text;\r\n    // If an uncollapsed selection ends or starts at the end of a line of specialized,\r\n    // TextNodes, such as code tokens, we will get a 'blank' TextNode here, i.e., one\r\n    // with text of length 0. We don't want this, it makes a confusing mess. Reset!\r\n    if (text.length > 0) {\r\n      serializedNode.text = text;\r\n    } else {\r\n      shouldInclude = false;\r\n    }\r\n  }\r\n  for (let i = 0; i < children.length; i++) {\r\n    const childNode = children[i];\r\n    const shouldIncludeChild = $appendNodesToJSON(editor, selection$1, childNode, serializedNode.children);\r\n    if (!shouldInclude && lexical.$isElementNode(currentNode) && shouldIncludeChild && currentNode.extractWithChild(childNode, selection$1, 'clone')) {\r\n      shouldInclude = true;\r\n    }\r\n  }\r\n  if (shouldInclude && !shouldExclude) {\r\n    targetArray.push(serializedNode);\r\n  } else if (Array.isArray(serializedNode.children)) {\r\n    for (let i = 0; i < serializedNode.children.length; i++) {\r\n      const serializedChildNode = serializedNode.children[i];\r\n      targetArray.push(serializedChildNode);\r\n    }\r\n  }\r\n  return shouldInclude;\r\n}\r\n\r\n// TODO why $ function with Editor instance?\r\n/**\r\n * Gets the Lexical JSON of the nodes inside the provided Selection.\r\n *\r\n * @param editor LexicalEditor to get the JSON content from.\r\n * @param selection Selection to get the JSON content from.\r\n * @returns an object with the editor namespace and a list of serializable nodes as JavaScript objects.\r\n */\r\nfunction $generateJSONFromSelectedNodes(editor, selection) {\r\n  const nodes = [];\r\n  const root = lexical.$getRoot();\r\n  const topLevelChildren = root.getChildren();\r\n  for (let i = 0; i < topLevelChildren.length; i++) {\r\n    const topLevelNode = topLevelChildren[i];\r\n    $appendNodesToJSON(editor, selection, topLevelNode, nodes);\r\n  }\r\n  return {\r\n    namespace: editor._config.namespace,\r\n    nodes\r\n  };\r\n}\r\n\r\n/**\r\n * This method takes an array of objects conforming to the BaseSeralizedNode interface and returns\r\n * an Array containing instances of the corresponding LexicalNode classes registered on the editor.\r\n * Normally, you'd get an Array of BaseSerialized nodes from {@link $generateJSONFromSelectedNodes}\r\n *\r\n * @param serializedNodes an Array of objects conforming to the BaseSerializedNode interface.\r\n * @returns an Array of Lexical Node objects.\r\n */\r\nfunction $generateNodesFromSerializedNodes(serializedNodes) {\r\n  const nodes = [];\r\n  for (let i = 0; i < serializedNodes.length; i++) {\r\n    const serializedNode = serializedNodes[i];\r\n    const node = lexical.$parseSerializedNode(serializedNode);\r\n    if (lexical.$isTextNode(node)) {\r\n      selection.$addNodeStyle(node);\r\n    }\r\n    nodes.push(node);\r\n  }\r\n  return nodes;\r\n}\r\nconst EVENT_LATENCY = 50;\r\nlet clipboardEventTimeout = null;\r\n\r\n// TODO custom selection\r\n// TODO potentially have a node customizable version for plain text\r\n/**\r\n * Copies the content of the current selection to the clipboard in\r\n * text/plain, text/html, and application/x-lexical-editor (Lexical JSON)\r\n * formats.\r\n *\r\n * @param editor the LexicalEditor instance to copy content from\r\n * @param event the native browser ClipboardEvent to add the content to.\r\n * @returns\r\n */\r\nasync function copyToClipboard(editor, event) {\r\n  if (clipboardEventTimeout !== null) {\r\n    // Prevent weird race conditions that can happen when this function is run multiple times\r\n    // synchronously. In the future, we can do better, we can cancel/override the previously running job.\r\n    return false;\r\n  }\r\n  if (event !== null) {\r\n    return new Promise((resolve, reject) => {\r\n      editor.update(() => {\r\n        resolve($copyToClipboardEvent(editor, event));\r\n      });\r\n    });\r\n  }\r\n  const rootElement = editor.getRootElement();\r\n  const windowDocument = editor._window == null ? window.document : editor._window.document;\r\n  const domSelection = getDOMSelection(editor._window);\r\n  if (rootElement === null || domSelection === null) {\r\n    return false;\r\n  }\r\n  const element = windowDocument.createElement('span');\r\n  element.style.cssText = 'position: fixed; top: -1000px;';\r\n  element.append(windowDocument.createTextNode('#'));\r\n  rootElement.append(element);\r\n  const range = new Range();\r\n  range.setStart(element, 0);\r\n  range.setEnd(element, 1);\r\n  domSelection.removeAllRanges();\r\n  domSelection.addRange(range);\r\n  return new Promise((resolve, reject) => {\r\n    const removeListener = editor.registerCommand(lexical.COPY_COMMAND, secondEvent => {\r\n      if (utils.objectKlassEquals(secondEvent, ClipboardEvent)) {\r\n        removeListener();\r\n        if (clipboardEventTimeout !== null) {\r\n          window.clearTimeout(clipboardEventTimeout);\r\n          clipboardEventTimeout = null;\r\n        }\r\n        resolve($copyToClipboardEvent(editor, secondEvent));\r\n      }\r\n      // Block the entire copy flow while we wait for the next ClipboardEvent\r\n      return true;\r\n    }, lexical.COMMAND_PRIORITY_CRITICAL);\r\n    // If the above hack execCommand hack works, this timeout code should never fire. Otherwise,\r\n    // the listener will be quickly freed so that the user can reuse it again\r\n    clipboardEventTimeout = window.setTimeout(() => {\r\n      removeListener();\r\n      clipboardEventTimeout = null;\r\n      resolve(false);\r\n    }, EVENT_LATENCY);\r\n    windowDocument.execCommand('copy');\r\n    element.remove();\r\n  });\r\n}\r\n\r\n// TODO shouldn't pass editor (pass namespace directly)\r\nfunction $copyToClipboardEvent(editor, event) {\r\n  const domSelection = getDOMSelection(editor._window);\r\n  if (!domSelection) {\r\n    return false;\r\n  }\r\n  const anchorDOM = domSelection.anchorNode;\r\n  const focusDOM = domSelection.focusNode;\r\n  if (anchorDOM !== null && focusDOM !== null && !lexical.isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\r\n    return false;\r\n  }\r\n  event.preventDefault();\r\n  const clipboardData = event.clipboardData;\r\n  const selection = lexical.$getSelection();\r\n  if (clipboardData === null || selection === null) {\r\n    return false;\r\n  }\r\n  const htmlString = $getHtmlContent(editor);\r\n  const lexicalString = $getLexicalContent(editor);\r\n  let plainString = '';\r\n  if (selection !== null) {\r\n    plainString = selection.getTextContent();\r\n  }\r\n  if (htmlString !== null) {\r\n    clipboardData.setData('text/html', htmlString);\r\n  }\r\n  if (lexicalString !== null) {\r\n    clipboardData.setData('application/x-lexical-editor', lexicalString);\r\n  }\r\n  clipboardData.setData('text/plain', plainString);\r\n  return true;\r\n}\r\n\r\nexports.$generateJSONFromSelectedNodes = $generateJSONFromSelectedNodes;\r\nexports.$generateNodesFromSerializedNodes = $generateNodesFromSerializedNodes;\r\nexports.$getHtmlContent = $getHtmlContent;\r\nexports.$getLexicalContent = $getLexicalContent;\r\nexports.$insertDataTransferForPlainText = $insertDataTransferForPlainText;\r\nexports.$insertDataTransferForRichText = $insertDataTransferForRichText;\r\nexports.$insertGeneratedNodes = $insertGeneratedNodes;\r\nexports.copyToClipboard = copyToClipboard;\r\n", "/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n'use strict'\r\nconst LexicalClipboard = process.env.NODE_ENV === 'development' ? require('./LexicalClipboard.dev.js') : require('./LexicalClipboard.prod.js')\r\nmodule.exports = LexicalClipboard;", "/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n'use strict';\r\n\r\nvar clipboard = require('@lexical/clipboard');\r\nvar selection = require('@lexical/selection');\r\nvar utils = require('@lexical/utils');\r\nvar lexical = require('lexical');\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n\r\nfunction caretFromPoint(x, y) {\r\n  if (typeof document.caretRangeFromPoint !== 'undefined') {\r\n    const range = document.caretRangeFromPoint(x, y);\r\n    if (range === null) {\r\n      return null;\r\n    }\r\n    return {\r\n      node: range.startContainer,\r\n      offset: range.startOffset\r\n    };\r\n    // @ts-ignore\r\n  } else if (document.caretPositionFromPoint !== 'undefined') {\r\n    // @ts-ignore FF - no types\r\n    const range = document.caretPositionFromPoint(x, y);\r\n    if (range === null) {\r\n      return null;\r\n    }\r\n    return {\r\n      node: range.offsetNode,\r\n      offset: range.offset\r\n    };\r\n  } else {\r\n    // Gracefully handle IE\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n\r\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nconst documentMode = CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\r\nCAN_USE_DOM && /Mac|iPod|iPhone|iPad/.test(navigator.platform);\r\nCAN_USE_DOM && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\r\nconst CAN_USE_BEFORE_INPUT = CAN_USE_DOM && 'InputEvent' in window && !documentMode ? 'getTargetRanges' in new window.InputEvent('input') : false;\r\nconst IS_SAFARI = CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\r\nconst IS_IOS = CAN_USE_DOM && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\r\nCAN_USE_DOM && /Android/.test(navigator.userAgent);\r\n\r\n// Keep these in case we need to use them in the future.\r\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\r\nconst IS_CHROME = CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent);\r\n// export const canUseTextInputEvent: boolean = CAN_USE_DOM && 'TextEvent' in window && !documentMode;\r\n\r\nconst IS_APPLE_WEBKIT = CAN_USE_DOM && /AppleWebKit\\/[\\d.]+/.test(navigator.userAgent) && !IS_CHROME;\r\n\r\n/** @module @lexical/rich-text */\r\nconst DRAG_DROP_PASTE = lexical.createCommand('DRAG_DROP_PASTE_FILE');\r\n/** @noInheritDoc */\r\nclass QuoteNode extends lexical.ElementNode {\r\n  static getType() {\r\n    return 'quote';\r\n  }\r\n  static clone(node) {\r\n    return new QuoteNode(node.__key);\r\n  }\r\n  constructor(key) {\r\n    super(key);\r\n  }\r\n\r\n  // View\r\n\r\n  createDOM(config) {\r\n    const element = document.createElement('blockquote');\r\n    utils.addClassNamesToElement(element, config.theme.quote);\r\n    return element;\r\n  }\r\n  updateDOM(prevNode, dom) {\r\n    return false;\r\n  }\r\n  static importDOM() {\r\n    return {\r\n      blockquote: node => ({\r\n        conversion: convertBlockquoteElement,\r\n        priority: 0\r\n      })\r\n    };\r\n  }\r\n  exportDOM(editor) {\r\n    const {\r\n      element\r\n    } = super.exportDOM(editor);\r\n    if (element && utils.isHTMLElement(element)) {\r\n      if (this.isEmpty()) element.append(document.createElement('br'));\r\n      const formatType = this.getFormatType();\r\n      element.style.textAlign = formatType;\r\n      const direction = this.getDirection();\r\n      if (direction) {\r\n        element.dir = direction;\r\n      }\r\n    }\r\n    return {\r\n      element\r\n    };\r\n  }\r\n  static importJSON(serializedNode) {\r\n    const node = $createQuoteNode();\r\n    node.setFormat(serializedNode.format);\r\n    node.setIndent(serializedNode.indent);\r\n    node.setDirection(serializedNode.direction);\r\n    return node;\r\n  }\r\n  exportJSON() {\r\n    return {\r\n      ...super.exportJSON(),\r\n      type: 'quote'\r\n    };\r\n  }\r\n\r\n  // Mutation\r\n\r\n  insertNewAfter(_, restoreSelection) {\r\n    const newBlock = lexical.$createParagraphNode();\r\n    const direction = this.getDirection();\r\n    newBlock.setDirection(direction);\r\n    this.insertAfter(newBlock, restoreSelection);\r\n    return newBlock;\r\n  }\r\n  collapseAtStart() {\r\n    const paragraph = lexical.$createParagraphNode();\r\n    const children = this.getChildren();\r\n    children.forEach(child => paragraph.append(child));\r\n    this.replace(paragraph);\r\n    return true;\r\n  }\r\n}\r\nfunction $createQuoteNode() {\r\n  return lexical.$applyNodeReplacement(new QuoteNode());\r\n}\r\nfunction $isQuoteNode(node) {\r\n  return node instanceof QuoteNode;\r\n}\r\n/** @noInheritDoc */\r\nclass HeadingNode extends lexical.ElementNode {\r\n  /** @internal */\r\n\r\n  static getType() {\r\n    return 'heading';\r\n  }\r\n  static clone(node) {\r\n    return new HeadingNode(node.__tag, node.__key);\r\n  }\r\n  constructor(tag, key) {\r\n    super(key);\r\n    this.__tag = tag;\r\n  }\r\n  getTag() {\r\n    return this.__tag;\r\n  }\r\n\r\n  // View\r\n\r\n  createDOM(config) {\r\n    const tag = this.__tag;\r\n    const element = document.createElement(tag);\r\n    const theme = config.theme;\r\n    const classNames = theme.heading;\r\n    if (classNames !== undefined) {\r\n      const className = classNames[tag];\r\n      utils.addClassNamesToElement(element, className);\r\n    }\r\n    return element;\r\n  }\r\n  updateDOM(prevNode, dom) {\r\n    return false;\r\n  }\r\n  static importDOM() {\r\n    return {\r\n      h1: node => ({\r\n        conversion: convertHeadingElement,\r\n        priority: 0\r\n      }),\r\n      h2: node => ({\r\n        conversion: convertHeadingElement,\r\n        priority: 0\r\n      }),\r\n      h3: node => ({\r\n        conversion: convertHeadingElement,\r\n        priority: 0\r\n      }),\r\n      h4: node => ({\r\n        conversion: convertHeadingElement,\r\n        priority: 0\r\n      }),\r\n      h5: node => ({\r\n        conversion: convertHeadingElement,\r\n        priority: 0\r\n      }),\r\n      h6: node => ({\r\n        conversion: convertHeadingElement,\r\n        priority: 0\r\n      }),\r\n      p: node => {\r\n        // domNode is a <p> since we matched it by nodeName\r\n        const paragraph = node;\r\n        const firstChild = paragraph.firstChild;\r\n        if (firstChild !== null && isGoogleDocsTitle(firstChild)) {\r\n          return {\r\n            conversion: () => ({\r\n              node: null\r\n            }),\r\n            priority: 3\r\n          };\r\n        }\r\n        return null;\r\n      },\r\n      span: node => {\r\n        if (isGoogleDocsTitle(node)) {\r\n          return {\r\n            conversion: domNode => {\r\n              return {\r\n                node: $createHeadingNode('h1')\r\n              };\r\n            },\r\n            priority: 3\r\n          };\r\n        }\r\n        return null;\r\n      }\r\n    };\r\n  }\r\n  exportDOM(editor) {\r\n    const {\r\n      element\r\n    } = super.exportDOM(editor);\r\n    if (element && utils.isHTMLElement(element)) {\r\n      if (this.isEmpty()) element.append(document.createElement('br'));\r\n      const formatType = this.getFormatType();\r\n      element.style.textAlign = formatType;\r\n      const direction = this.getDirection();\r\n      if (direction) {\r\n        element.dir = direction;\r\n      }\r\n    }\r\n    return {\r\n      element\r\n    };\r\n  }\r\n  static importJSON(serializedNode) {\r\n    const node = $createHeadingNode(serializedNode.tag);\r\n    node.setFormat(serializedNode.format);\r\n    node.setIndent(serializedNode.indent);\r\n    node.setDirection(serializedNode.direction);\r\n    return node;\r\n  }\r\n  exportJSON() {\r\n    return {\r\n      ...super.exportJSON(),\r\n      tag: this.getTag(),\r\n      type: 'heading',\r\n      version: 1\r\n    };\r\n  }\r\n\r\n  // Mutation\r\n  insertNewAfter(selection, restoreSelection = true) {\r\n    const anchorOffet = selection ? selection.anchor.offset : 0;\r\n    const newElement = anchorOffet === this.getTextContentSize() || !selection ? lexical.$createParagraphNode() : $createHeadingNode(this.getTag());\r\n    const direction = this.getDirection();\r\n    newElement.setDirection(direction);\r\n    this.insertAfter(newElement, restoreSelection);\r\n    if (anchorOffet === 0 && !this.isEmpty() && selection) {\r\n      const paragraph = lexical.$createParagraphNode();\r\n      paragraph.select();\r\n      this.replace(paragraph, true);\r\n    }\r\n    return newElement;\r\n  }\r\n  collapseAtStart() {\r\n    const newElement = !this.isEmpty() ? $createHeadingNode(this.getTag()) : lexical.$createParagraphNode();\r\n    const children = this.getChildren();\r\n    children.forEach(child => newElement.append(child));\r\n    this.replace(newElement);\r\n    return true;\r\n  }\r\n  extractWithChild() {\r\n    return true;\r\n  }\r\n}\r\nfunction isGoogleDocsTitle(domNode) {\r\n  if (domNode.nodeName.toLowerCase() === 'span') {\r\n    return domNode.style.fontSize === '26pt';\r\n  }\r\n  return false;\r\n}\r\nfunction convertHeadingElement(element) {\r\n  const nodeName = element.nodeName.toLowerCase();\r\n  let node = null;\r\n  if (nodeName === 'h1' || nodeName === 'h2' || nodeName === 'h3' || nodeName === 'h4' || nodeName === 'h5' || nodeName === 'h6') {\r\n    node = $createHeadingNode(nodeName);\r\n    if (element.style !== null) {\r\n      node.setFormat(element.style.textAlign);\r\n    }\r\n  }\r\n  return {\r\n    node\r\n  };\r\n}\r\nfunction convertBlockquoteElement(element) {\r\n  const node = $createQuoteNode();\r\n  if (element.style !== null) {\r\n    node.setFormat(element.style.textAlign);\r\n  }\r\n  return {\r\n    node\r\n  };\r\n}\r\nfunction $createHeadingNode(headingTag) {\r\n  return lexical.$applyNodeReplacement(new HeadingNode(headingTag));\r\n}\r\nfunction $isHeadingNode(node) {\r\n  return node instanceof HeadingNode;\r\n}\r\nfunction onPasteForRichText(event, editor) {\r\n  event.preventDefault();\r\n  editor.update(() => {\r\n    const selection = lexical.$getSelection();\r\n    const clipboardData = event instanceof InputEvent || event instanceof KeyboardEvent ? null : event.clipboardData;\r\n    if (clipboardData != null && selection !== null) {\r\n      clipboard.$insertDataTransferForRichText(clipboardData, selection, editor);\r\n    }\r\n  }, {\r\n    tag: 'paste'\r\n  });\r\n}\r\nasync function onCutForRichText(event, editor) {\r\n  await clipboard.copyToClipboard(editor, utils.objectKlassEquals(event, ClipboardEvent) ? event : null);\r\n  editor.update(() => {\r\n    const selection = lexical.$getSelection();\r\n    if (lexical.$isRangeSelection(selection)) {\r\n      selection.removeText();\r\n    } else if (lexical.$isNodeSelection(selection)) {\r\n      selection.getNodes().forEach(node => node.remove());\r\n    }\r\n  });\r\n}\r\n\r\n// Clipboard may contain files that we aren't allowed to read. While the event is arguably useless,\r\n// in certain occasions, we want to know whether it was a file transfer, as opposed to text. We\r\n// control this with the first boolean flag.\r\nfunction eventFiles(event) {\r\n  let dataTransfer = null;\r\n  if (event instanceof DragEvent) {\r\n    dataTransfer = event.dataTransfer;\r\n  } else if (event instanceof ClipboardEvent) {\r\n    dataTransfer = event.clipboardData;\r\n  }\r\n  if (dataTransfer === null) {\r\n    return [false, [], false];\r\n  }\r\n  const types = dataTransfer.types;\r\n  const hasFiles = types.includes('Files');\r\n  const hasContent = types.includes('text/html') || types.includes('text/plain');\r\n  return [hasFiles, Array.from(dataTransfer.files), hasContent];\r\n}\r\nfunction handleIndentAndOutdent(indentOrOutdent) {\r\n  const selection = lexical.$getSelection();\r\n  if (!lexical.$isRangeSelection(selection)) {\r\n    return false;\r\n  }\r\n  const alreadyHandled = new Set();\r\n  const nodes = selection.getNodes();\r\n  for (let i = 0; i < nodes.length; i++) {\r\n    const node = nodes[i];\r\n    const key = node.getKey();\r\n    if (alreadyHandled.has(key)) {\r\n      continue;\r\n    }\r\n    const parentBlock = utils.$getNearestBlockElementAncestorOrThrow(node);\r\n    const parentKey = parentBlock.getKey();\r\n    if (parentBlock.canIndent() && !alreadyHandled.has(parentKey)) {\r\n      alreadyHandled.add(parentKey);\r\n      indentOrOutdent(parentBlock);\r\n    }\r\n  }\r\n  return alreadyHandled.size > 0;\r\n}\r\nfunction $isTargetWithinDecorator(target) {\r\n  const node = lexical.$getNearestNodeFromDOMNode(target);\r\n  return lexical.$isDecoratorNode(node);\r\n}\r\nfunction $isSelectionAtEndOfRoot(selection) {\r\n  const focus = selection.focus;\r\n  return focus.key === 'root' && focus.offset === lexical.$getRoot().getChildrenSize();\r\n}\r\nfunction registerRichText(editor) {\r\n  const removeListener = utils.mergeRegister(editor.registerCommand(lexical.CLICK_COMMAND, payload => {\r\n    const selection = lexical.$getSelection();\r\n    if (lexical.$isNodeSelection(selection)) {\r\n      selection.clear();\r\n      return true;\r\n    }\r\n    return false;\r\n  }, 0), editor.registerCommand(lexical.DELETE_CHARACTER_COMMAND, isBackward => {\r\n    const selection = lexical.$getSelection();\r\n    if (!lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    selection.deleteCharacter(isBackward);\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DELETE_WORD_COMMAND, isBackward => {\r\n    const selection = lexical.$getSelection();\r\n    if (!lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    selection.deleteWord(isBackward);\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DELETE_LINE_COMMAND, isBackward => {\r\n    const selection = lexical.$getSelection();\r\n    if (!lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    selection.deleteLine(isBackward);\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.CONTROLLED_TEXT_INSERTION_COMMAND, eventOrText => {\r\n    const selection = lexical.$getSelection();\r\n    if (typeof eventOrText === 'string') {\r\n      if (selection !== null) {\r\n        selection.insertText(eventOrText);\r\n      }\r\n    } else {\r\n      if (selection === null) {\r\n        return false;\r\n      }\r\n      const dataTransfer = eventOrText.dataTransfer;\r\n      if (dataTransfer != null) {\r\n        clipboard.$insertDataTransferForRichText(dataTransfer, selection, editor);\r\n      } else if (lexical.$isRangeSelection(selection)) {\r\n        const data = eventOrText.data;\r\n        if (data) {\r\n          selection.insertText(data);\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.REMOVE_TEXT_COMMAND, () => {\r\n    const selection = lexical.$getSelection();\r\n    if (!lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    selection.removeText();\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.FORMAT_TEXT_COMMAND, format => {\r\n    const selection = lexical.$getSelection();\r\n    if (!lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    selection.formatText(format);\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.FORMAT_ELEMENT_COMMAND, format => {\r\n    const selection = lexical.$getSelection();\r\n    if (!lexical.$isRangeSelection(selection) && !lexical.$isNodeSelection(selection)) {\r\n      return false;\r\n    }\r\n    const nodes = selection.getNodes();\r\n    for (const node of nodes) {\r\n      const element = utils.$findMatchingParent(node, parentNode => lexical.$isElementNode(parentNode) && !parentNode.isInline());\r\n      if (element !== null) {\r\n        element.setFormat(format);\r\n      }\r\n    }\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.INSERT_LINE_BREAK_COMMAND, selectStart => {\r\n    const selection = lexical.$getSelection();\r\n    if (!lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    selection.insertLineBreak(selectStart);\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.INSERT_PARAGRAPH_COMMAND, () => {\r\n    const selection = lexical.$getSelection();\r\n    if (!lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    selection.insertParagraph();\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.INSERT_TAB_COMMAND, () => {\r\n    lexical.$insertNodes([lexical.$createTabNode()]);\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.INDENT_CONTENT_COMMAND, () => {\r\n    return handleIndentAndOutdent(block => {\r\n      const indent = block.getIndent();\r\n      block.setIndent(indent + 1);\r\n    });\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.OUTDENT_CONTENT_COMMAND, () => {\r\n    return handleIndentAndOutdent(block => {\r\n      const indent = block.getIndent();\r\n      if (indent > 0) {\r\n        block.setIndent(indent - 1);\r\n      }\r\n    });\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ARROW_UP_COMMAND, event => {\r\n    const selection = lexical.$getSelection();\r\n    if (lexical.$isNodeSelection(selection) && !$isTargetWithinDecorator(event.target)) {\r\n      // If selection is on a node, let's try and move selection\r\n      // back to being a range selection.\r\n      const nodes = selection.getNodes();\r\n      if (nodes.length > 0) {\r\n        nodes[0].selectPrevious();\r\n        return true;\r\n      }\r\n    } else if (lexical.$isRangeSelection(selection)) {\r\n      const possibleNode = lexical.$getAdjacentNode(selection.focus, true);\r\n      if (!event.shiftKey && lexical.$isDecoratorNode(possibleNode) && !possibleNode.isIsolated() && !possibleNode.isInline()) {\r\n        possibleNode.selectPrevious();\r\n        event.preventDefault();\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ARROW_DOWN_COMMAND, event => {\r\n    const selection = lexical.$getSelection();\r\n    if (lexical.$isNodeSelection(selection)) {\r\n      // If selection is on a node, let's try and move selection\r\n      // back to being a range selection.\r\n      const nodes = selection.getNodes();\r\n      if (nodes.length > 0) {\r\n        nodes[0].selectNext(0, 0);\r\n        return true;\r\n      }\r\n    } else if (lexical.$isRangeSelection(selection)) {\r\n      if ($isSelectionAtEndOfRoot(selection)) {\r\n        event.preventDefault();\r\n        return true;\r\n      }\r\n      const possibleNode = lexical.$getAdjacentNode(selection.focus, false);\r\n      if (!event.shiftKey && lexical.$isDecoratorNode(possibleNode) && !possibleNode.isIsolated() && !possibleNode.isInline()) {\r\n        possibleNode.selectNext();\r\n        event.preventDefault();\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ARROW_LEFT_COMMAND, event => {\r\n    const selection$1 = lexical.$getSelection();\r\n    if (lexical.$isNodeSelection(selection$1)) {\r\n      // If selection is on a node, let's try and move selection\r\n      // back to being a range selection.\r\n      const nodes = selection$1.getNodes();\r\n      if (nodes.length > 0) {\r\n        event.preventDefault();\r\n        nodes[0].selectPrevious();\r\n        return true;\r\n      }\r\n    }\r\n    if (!lexical.$isRangeSelection(selection$1)) {\r\n      return false;\r\n    }\r\n    if (selection.$shouldOverrideDefaultCharacterSelection(selection$1, true)) {\r\n      const isHoldingShift = event.shiftKey;\r\n      event.preventDefault();\r\n      selection.$moveCharacter(selection$1, isHoldingShift, true);\r\n      return true;\r\n    }\r\n    return false;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ARROW_RIGHT_COMMAND, event => {\r\n    const selection$1 = lexical.$getSelection();\r\n    if (lexical.$isNodeSelection(selection$1) && !$isTargetWithinDecorator(event.target)) {\r\n      // If selection is on a node, let's try and move selection\r\n      // back to being a range selection.\r\n      const nodes = selection$1.getNodes();\r\n      if (nodes.length > 0) {\r\n        event.preventDefault();\r\n        nodes[0].selectNext(0, 0);\r\n        return true;\r\n      }\r\n    }\r\n    if (!lexical.$isRangeSelection(selection$1)) {\r\n      return false;\r\n    }\r\n    const isHoldingShift = event.shiftKey;\r\n    if (selection.$shouldOverrideDefaultCharacterSelection(selection$1, false)) {\r\n      event.preventDefault();\r\n      selection.$moveCharacter(selection$1, isHoldingShift, false);\r\n      return true;\r\n    }\r\n    return false;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_BACKSPACE_COMMAND, event => {\r\n    if ($isTargetWithinDecorator(event.target)) {\r\n      return false;\r\n    }\r\n    const selection = lexical.$getSelection();\r\n    if (!lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    event.preventDefault();\r\n    const {\r\n      anchor\r\n    } = selection;\r\n    const anchorNode = anchor.getNode();\r\n    if (selection.isCollapsed() && anchor.offset === 0 && !lexical.$isRootNode(anchorNode)) {\r\n      const element = utils.$getNearestBlockElementAncestorOrThrow(anchorNode);\r\n      if (element.getIndent() > 0) {\r\n        return editor.dispatchCommand(lexical.OUTDENT_CONTENT_COMMAND, undefined);\r\n      }\r\n    }\r\n    return editor.dispatchCommand(lexical.DELETE_CHARACTER_COMMAND, true);\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_DELETE_COMMAND, event => {\r\n    if ($isTargetWithinDecorator(event.target)) {\r\n      return false;\r\n    }\r\n    const selection = lexical.$getSelection();\r\n    if (!lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    event.preventDefault();\r\n    return editor.dispatchCommand(lexical.DELETE_CHARACTER_COMMAND, false);\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ENTER_COMMAND, event => {\r\n    const selection = lexical.$getSelection();\r\n    if (!lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    if (event !== null) {\r\n      // If we have beforeinput, then we can avoid blocking\r\n      // the default behavior. This ensures that the iOS can\r\n      // intercept that we're actually inserting a paragraph,\r\n      // and autocomplete, autocapitalize etc work as intended.\r\n      // This can also cause a strange performance issue in\r\n      // Safari, where there is a noticeable pause due to\r\n      // preventing the key down of enter.\r\n      if ((IS_IOS || IS_SAFARI || IS_APPLE_WEBKIT) && CAN_USE_BEFORE_INPUT) {\r\n        return false;\r\n      }\r\n      event.preventDefault();\r\n      if (event.shiftKey) {\r\n        return editor.dispatchCommand(lexical.INSERT_LINE_BREAK_COMMAND, false);\r\n      }\r\n    }\r\n    return editor.dispatchCommand(lexical.INSERT_PARAGRAPH_COMMAND, undefined);\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ESCAPE_COMMAND, () => {\r\n    const selection = lexical.$getSelection();\r\n    if (!lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    editor.blur();\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DROP_COMMAND, event => {\r\n    const [, files] = eventFiles(event);\r\n    if (files.length > 0) {\r\n      const x = event.clientX;\r\n      const y = event.clientY;\r\n      const eventRange = caretFromPoint(x, y);\r\n      if (eventRange !== null) {\r\n        const {\r\n          offset: domOffset,\r\n          node: domNode\r\n        } = eventRange;\r\n        const node = lexical.$getNearestNodeFromDOMNode(domNode);\r\n        if (node !== null) {\r\n          const selection = lexical.$createRangeSelection();\r\n          if (lexical.$isTextNode(node)) {\r\n            selection.anchor.set(node.getKey(), domOffset, 'text');\r\n            selection.focus.set(node.getKey(), domOffset, 'text');\r\n          } else {\r\n            const parentKey = node.getParentOrThrow().getKey();\r\n            const offset = node.getIndexWithinParent() + 1;\r\n            selection.anchor.set(parentKey, offset, 'element');\r\n            selection.focus.set(parentKey, offset, 'element');\r\n          }\r\n          const normalizedSelection = lexical.$normalizeSelection__EXPERIMENTAL(selection);\r\n          lexical.$setSelection(normalizedSelection);\r\n        }\r\n        editor.dispatchCommand(DRAG_DROP_PASTE, files);\r\n      }\r\n      event.preventDefault();\r\n      return true;\r\n    }\r\n    const selection = lexical.$getSelection();\r\n    if (lexical.$isRangeSelection(selection)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DRAGSTART_COMMAND, event => {\r\n    const [isFileTransfer] = eventFiles(event);\r\n    const selection = lexical.$getSelection();\r\n    if (isFileTransfer && !lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DRAGOVER_COMMAND, event => {\r\n    const [isFileTransfer] = eventFiles(event);\r\n    const selection = lexical.$getSelection();\r\n    if (isFileTransfer && !lexical.$isRangeSelection(selection)) {\r\n      return false;\r\n    }\r\n    const x = event.clientX;\r\n    const y = event.clientY;\r\n    const eventRange = caretFromPoint(x, y);\r\n    if (eventRange !== null) {\r\n      const node = lexical.$getNearestNodeFromDOMNode(eventRange.node);\r\n      if (lexical.$isDecoratorNode(node)) {\r\n        // Show browser caret as the user is dragging the media across the screen. Won't work\r\n        // for DecoratorNode nor it's relevant.\r\n        event.preventDefault();\r\n      }\r\n    }\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.SELECT_ALL_COMMAND, () => {\r\n    lexical.$selectAll();\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.COPY_COMMAND, event => {\r\n    clipboard.copyToClipboard(editor, utils.objectKlassEquals(event, ClipboardEvent) ? event : null);\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.CUT_COMMAND, event => {\r\n    onCutForRichText(event, editor);\r\n    return true;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.PASTE_COMMAND, event => {\r\n    const [, files, hasTextContent] = eventFiles(event);\r\n    if (files.length > 0 && !hasTextContent) {\r\n      editor.dispatchCommand(DRAG_DROP_PASTE, files);\r\n      return true;\r\n    }\r\n\r\n    // if inputs then paste within the input ignore creating a new node on paste event\r\n    if (lexical.isSelectionCapturedInDecoratorInput(event.target)) {\r\n      return false;\r\n    }\r\n    const selection = lexical.$getSelection();\r\n    if (selection !== null) {\r\n      onPasteForRichText(event, editor);\r\n      return true;\r\n    }\r\n    return false;\r\n  }, lexical.COMMAND_PRIORITY_EDITOR));\r\n  return removeListener;\r\n}\r\n\r\nexports.$createHeadingNode = $createHeadingNode;\r\nexports.$createQuoteNode = $createQuoteNode;\r\nexports.$isHeadingNode = $isHeadingNode;\r\nexports.$isQuoteNode = $isQuoteNode;\r\nexports.DRAG_DROP_PASTE = DRAG_DROP_PASTE;\r\nexports.HeadingNode = HeadingNode;\r\nexports.QuoteNode = QuoteNode;\r\nexports.eventFiles = eventFiles;\r\nexports.registerRichText = registerRichText;\r\n", "/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n'use strict'\r\nconst LexicalRichText = process.env.NODE_ENV === 'development' ? require('./LexicalRichText.dev.js') : require('./LexicalRichText.prod.js')\r\nmodule.exports = LexicalRichText;"],
  "mappings": "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",
  "names": ["selection", "selection", "selection"]
}
