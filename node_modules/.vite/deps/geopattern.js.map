{
  "version": 3,
  "sources": ["../../extend/index.js", "../../geopattern/lib/color.js", "../../geopattern/lib/sha1.js", "../../geopattern/lib/xml.js", "../../geopattern/lib/svg.js", "../../geopattern/lib/pattern.js", "../../geopattern/geopattern.js"],
  "sourcesContent": ["var hasOwn = Object.prototype.hasOwnProperty;\nvar toString = Object.prototype.toString;\n\nfunction isPlainObject(obj) {\n\tif (!obj || toString.call(obj) !== '[object Object]' || obj.nodeType || obj.setInterval)\n\t\treturn false;\n\n\tvar has_own_constructor = hasOwn.call(obj, 'constructor');\n\tvar has_is_property_of_method = hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !has_own_constructor && !has_is_property_of_method)\n\t\treturn false;\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor ( key in obj ) {}\n\n\treturn key === undefined || hasOwn.call( obj, key );\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t    target = arguments[0] || {},\n\t    i = 1,\n\t    length = arguments.length,\n\t    deep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && typeof target !== \"function\") {\n\t\ttarget = {};\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\t\t// Only deal with non-null/undefined values\n\t\tif ( (options = arguments[ i ]) != null ) {\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( isPlainObject(copy) || (copyIsArray = Array.isArray(copy)) ) ) {\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && Array.isArray(src) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n", "/*eslint sort-vars:0, curly:0*/\n\n'use strict';\n\n/**\n * Converts a hex CSS color value to RGB.\n * Adapted from http://stackoverflow.com/a/5624139.\n *\n * @param\tString\thex\t\tThe hexadecimal color value\n * @return\tObject\t\t\tThe RGB representation\n */\nfunction hex2rgb(hex) {\n\t// Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n\tvar shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n\thex = hex.replace(shorthandRegex, function (m, r, g, b) {\n\t\treturn r + r + g + g + b + b;\n\t});\n\n\tvar result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\treturn result ? {\n\t\tr: parseInt(result[1], 16),\n\t\tg: parseInt(result[2], 16),\n\t\tb: parseInt(result[3], 16)\n\t} : null;\n}\n\n/**\n * Converts an RGB color value to a hex string.\n * @param  Object rgb RGB as r, g, and b keys\n * @return String     Hex color string\n */\nfunction rgb2hex(rgb) {\n\treturn '#' + ['r', 'g', 'b'].map(function (key) {\n\t\treturn ('0' + rgb[key].toString(16)).slice(-2);\n\t}).join('');\n}\n\n/**\n * Converts an RGB color value to HSL. Conversion formula adapted from\n * http://en.wikipedia.org/wiki/HSL_color_space. This function adapted\n * from http://stackoverflow.com/a/9493060.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and l in the set [0, 1].\n *\n * @param   Object  rgb     RGB as r, g, and b keys\n * @return  Object          HSL as h, s, and l keys\n */\nfunction rgb2hsl(rgb) {\n\tvar r = rgb.r, g = rgb.g, b = rgb.b;\n\tr /= 255; g /= 255; b /= 255;\n\tvar max = Math.max(r, g, b), min = Math.min(r, g, b);\n\tvar h, s, l = (max + min) / 2;\n\n\tif (max === min) {\n\t\th = s = 0; // achromatic\n\t} else {\n\t\tvar d = max - min;\n\t\ts = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\t\tswitch (max) {\n\t\t\tcase r: h = (g - b) / d + (g < b ? 6 : 0); break;\n\t\t\tcase g: h = (b - r) / d + 2; break;\n\t\t\tcase b: h = (r - g) / d + 4; break;\n\t\t}\n\t\th /= 6;\n\t}\n\n\treturn { h: h, s: s, l: l };\n}\n\n/**\n * Converts an HSL color value to RGB. Conversion formula adapted from\n * http://en.wikipedia.org/wiki/HSL_color_space. This function adapted\n * from http://stackoverflow.com/a/9493060.\n * Assumes h, s, and l are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Object  hsl     HSL as h, s, and l keys\n * @return  Object          RGB as r, g, and b values\n */\nfunction hsl2rgb(hsl) {\n\n\tfunction hue2rgb(p, q, t) {\n\t\tif (t < 0) t += 1;\n\t\tif (t > 1) t -= 1;\n\t\tif (t < 1 / 6) return p + (q - p) * 6 * t;\n\t\tif (t < 1 / 2) return q;\n\t\tif (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n\t\treturn p;\n\t}\n\n\tvar h = hsl.h, s = hsl.s, l = hsl.l;\n\tvar r, g, b;\n\n\tif(s === 0){\n\t\tr = g = b = l; // achromatic\n\t}else{\n\n\t\tvar q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n\t\tvar p = 2 * l - q;\n\t\tr = hue2rgb(p, q, h + 1 / 3);\n\t\tg = hue2rgb(p, q, h);\n\t\tb = hue2rgb(p, q, h - 1 / 3);\n\t}\n\n\treturn {\n\t\tr: Math.round(r * 255),\n\t\tg: Math.round(g * 255),\n\t\tb: Math.round(b * 255)\n\t};\n}\n\nmodule.exports = {\n\thex2rgb: hex2rgb,\n\trgb2hex: rgb2hex,\n\trgb2hsl: rgb2hsl,\n\thsl2rgb: hsl2rgb,\n\trgb2rgbString: function (rgb) {\n\t\treturn 'rgb(' + [rgb.r, rgb.g, rgb.b].join(',') + ')';\n\t}\n};\n", "/*\nhttps://github.com/creationix/git-sha1/blob/master/git-sha1.js\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 Tim Caswell\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n'use strict';\n\n// A streaming interface for when nothing is passed in.\nfunction create() {\n\n\tvar h0 = 0x67452301;\n\tvar h1 = 0xEFCDAB89;\n\tvar h2 = 0x98BADCFE;\n\tvar h3 = 0x10325476;\n\tvar h4 = 0xC3D2E1F0;\n\t// The first 64 bytes (16 words) is the data chunk\n\tvar block = new Uint32Array(80), offset = 0, shift = 24;\n\tvar totalLength = 0;\n\n\t// We have a full block to process.  Let's do it!\n\tfunction processBlock() {\n\t\t// Extend the sixteen 32-bit words into eighty 32-bit words:\n\t\tfor (var i = 16; i < 80; i++) {\n\t\t\tvar w = block[i - 3] ^ block[i - 8] ^ block[i - 14] ^ block[i - 16];\n\t\t\tblock[i] = (w << 1) | (w >>> 31);\n\t\t}\n\n\t\t// log(block);\n\n\t\t// Initialize hash value for this chunk:\n\t\tvar a = h0;\n\t\tvar b = h1;\n\t\tvar c = h2;\n\t\tvar d = h3;\n\t\tvar e = h4;\n\t\tvar f, k;\n\n\t\t// Main loop:\n\t\tfor (i = 0; i < 80; i++) {\n\t\t\tif (i < 20) {\n\t\t\t\tf = d ^ (b & (c ^ d));\n\t\t\t\tk = 0x5A827999;\n\t\t\t}\n\t\t\telse if (i < 40) {\n\t\t\t\tf = b ^ c ^ d;\n\t\t\t\tk = 0x6ED9EBA1;\n\t\t\t}\n\t\t\telse if (i < 60) {\n\t\t\t\tf = (b & c) | (d & (b | c));\n\t\t\t\tk = 0x8F1BBCDC;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tf = b ^ c ^ d;\n\t\t\t\tk = 0xCA62C1D6;\n\t\t\t}\n\t\t\tvar temp = (a << 5 | a >>> 27) + f + e + k + (block[i] | 0);\n\t\t\te = d;\n\t\t\td = c;\n\t\t\tc = (b << 30 | b >>> 2);\n\t\t\tb = a;\n\t\t\ta = temp;\n\t\t}\n\n\t\t// Add this chunk's hash to result so far:\n\t\th0 = (h0 + a) | 0;\n\t\th1 = (h1 + b) | 0;\n\t\th2 = (h2 + c) | 0;\n\t\th3 = (h3 + d) | 0;\n\t\th4 = (h4 + e) | 0;\n\n\t\t// The block is now reusable.\n\t\toffset = 0;\n\t\tfor (i = 0; i < 16; i++) {\n\t\t\tblock[i] = 0;\n\t\t}\n\t}\n\n\tfunction write(byte) {\n\t\tblock[offset] |= (byte & 0xff) << shift;\n\t\tif (shift) {\n\t\t\tshift -= 8;\n\t\t}\n\t\telse {\n\t\t\toffset++;\n\t\t\tshift = 24;\n\t\t}\n\t\tif (offset === 16) {\n\t\t\tprocessBlock();\n\t\t}\n\t}\n\n\tfunction updateString(string) {\n\t\tvar length = string.length;\n\t\ttotalLength += length * 8;\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\twrite(string.charCodeAt(i));\n\t\t}\n\t}\n\n\t// The user gave us more data.  Store it!\n\tfunction update(chunk) {\n\t\tif (typeof chunk === 'string') {\n\t\t\treturn updateString(chunk);\n\t\t}\n\t\tvar length = chunk.length;\n\t\ttotalLength += length * 8;\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\twrite(chunk[i]);\n\t\t}\n\t}\n\n\tfunction toHex(word) {\n\t\tvar hex = '';\n\t\tfor (var i = 28; i >= 0; i -= 4) {\n\t\t\thex += ((word >> i) & 0xf).toString(16);\n\t\t}\n\t\treturn hex;\n\t}\n\n\t// No more data will come, pad the block, process and return the result.\n\tfunction digest() {\n\t\t// Pad\n\t\twrite(0x80);\n\t\tif (offset > 14 || (offset === 14 && shift < 24)) {\n\t\t\tprocessBlock();\n\t\t}\n\t\toffset = 14;\n\t\tshift = 24;\n\n\t\t// 64-bit length big-endian\n\t\twrite(0x00); // numbers this big aren't accurate in javascript anyway\n\t\twrite(0x00); // ..So just hard-code to zero.\n\t\twrite(totalLength > 0xffffffffff ? totalLength / 0x10000000000 : 0x00);\n\t\twrite(totalLength > 0xffffffff ? totalLength / 0x100000000 : 0x00);\n\t\tfor (var s = 24; s >= 0; s -= 8) {\n\t\t\twrite(totalLength >> s);\n\t\t}\n\n\t\t// At this point one last processBlock() should trigger and we can pull out the result.\n\t\treturn toHex(h0) +\n\t\ttoHex(h1) +\n\t\ttoHex(h2) +\n\t\ttoHex(h3) +\n\t\ttoHex(h4);\n\t}\n\n\treturn { update: update, digest: digest };\n}\n\n// Input chunks must be either arrays of bytes or \"raw\" encoded strings\nmodule.exports = function sha1(buffer) {\n\tif (buffer === undefined) {\n\t\treturn create();\n\t}\n\tvar shasum = create();\n\tshasum.update(buffer);\n\treturn shasum.digest();\n};\n", "'use strict';\n\nvar XMLNode = module.exports = function (tagName) {\n\tif (!(this instanceof XMLNode)) {\n\t\treturn new XMLNode(tagName);\n\t}\n\n\tthis.tagName = tagName;\n\tthis.attributes = Object.create(null);\n\tthis.children = [];\n\tthis.lastChild = null;\n\n\treturn this;\n};\n\nXMLNode.prototype.appendChild = function (child) {\n\tthis.children.push(child);\n\tthis.lastChild = child;\n\n\treturn this;\n};\n\nXMLNode.prototype.setAttribute = function (name, value) {\n\tthis.attributes[name] = value;\n\n\treturn this;\n};\n\nXMLNode.prototype.toString = function () {\n\tvar self = this;\n\n\treturn [\n\t\t'<',\n\t\tself.tagName,\n\t\tObject.keys(self.attributes).map(function (attr) {\n\t\t\treturn [\n\t\t\t\t' ',\n\t\t\t\tattr,\n\t\t\t\t'=\"',\n\t\t\t\tself.attributes[attr],\n\t\t\t\t'\"'\n\t\t\t].join('');\n\t\t}).join(''),\n\t\t'>',\n\t\tself.children.map(function (child) {\n\t\t\treturn child.toString();\n\t\t}).join(''),\n\t\t'</',\n\t\tself.tagName,\n\t\t'>'\n\t].join('');\n};\n", "'use strict';\n\nvar extend = require('extend');\nvar XMLNode = require('./xml');\n\nfunction SVG() {\n\tthis.width = 100;\n\tthis.height = 100;\n\tthis.svg = XMLNode('svg');\n\tthis.context = []; // Track nested nodes\n\tthis.setAttributes(this.svg, {\n\t\txmlns: 'http://www.w3.org/2000/svg',\n\t\twidth: this.width,\n\t\theight: this.height\n\t});\n\n\treturn this;\n}\n\nmodule.exports = SVG;\n\n// This is a hack so groups work.\nSVG.prototype.currentContext = function () {\n\treturn this.context[this.context.length - 1] || this.svg;\n};\n\n// This is a hack so groups work.\nSVG.prototype.end = function () {\n\tthis.context.pop();\n\treturn this;\n};\n\nSVG.prototype.currentNode = function () {\n\tvar context = this.currentContext();\n\treturn context.lastChild || context;\n};\n\nSVG.prototype.transform = function (transformations) {\n\tthis.currentNode().setAttribute('transform',\n\t\tObject.keys(transformations).map(function (transformation) {\n\t\t\treturn transformation + '(' + transformations[transformation].join(',') + ')';\n\t\t}).join(' ')\n\t);\n\treturn this;\n};\n\nSVG.prototype.setAttributes = function (el, attrs) {\n\tObject.keys(attrs).forEach(function (attr) {\n\t\tel.setAttribute(attr, attrs[attr]);\n\t});\n};\n\nSVG.prototype.setWidth = function (width) {\n\tthis.svg.setAttribute('width', Math.floor(width));\n};\n\nSVG.prototype.setHeight = function (height) {\n\tthis.svg.setAttribute('height', Math.floor(height));\n};\n\nSVG.prototype.toString = function () {\n\treturn this.svg.toString();\n};\n\nSVG.prototype.rect = function (x, y, width, height, args) {\n\t// Accept array first argument\n\tvar self = this;\n\tif (Array.isArray(x)) {\n\t\tx.forEach(function (a) {\n\t\t\tself.rect.apply(self, a.concat(args));\n\t\t});\n\t\treturn this;\n\t}\n\n\tvar rect = XMLNode('rect');\n\tthis.currentContext().appendChild(rect);\n\tthis.setAttributes(rect, extend({\n\t\tx: x,\n\t\ty: y,\n\t\twidth: width,\n\t\theight: height\n\t}, args));\n\n\treturn this;\n};\n\nSVG.prototype.circle = function (cx, cy, r, args) {\n\tvar circle = XMLNode('circle');\n\tthis.currentContext().appendChild(circle);\n\tthis.setAttributes(circle, extend({\n\t\tcx: cx,\n\t\tcy: cy,\n\t\tr: r\n\t}, args));\n\n\treturn this;\n};\n\nSVG.prototype.path = function (str, args) {\n\tvar path = XMLNode('path');\n\tthis.currentContext().appendChild(path);\n\tthis.setAttributes(path, extend({\n\t\td: str\n\t}, args));\n\n\treturn this;\n};\n\nSVG.prototype.polyline = function (str, args) {\n\t// Accept array first argument\n\tvar self = this;\n\tif (Array.isArray(str)) {\n\t\tstr.forEach(function (s) {\n\t\t\tself.polyline(s, args);\n\t\t});\n\t\treturn this;\n\t}\n\n\tvar polyline = XMLNode('polyline');\n\tthis.currentContext().appendChild(polyline);\n\tthis.setAttributes(polyline, extend({\n\t\tpoints: str\n\t}, args));\n\n\treturn this;\n};\n\n// group and context are hacks\nSVG.prototype.group = function (args) {\n\tvar group = XMLNode('g');\n\tthis.currentContext().appendChild(group);\n\tthis.context.push(group);\n\tthis.setAttributes(group, extend({}, args));\n\treturn this;\n};\n", "'use strict';\n\nvar extend = require('extend');\nvar color  = require('./color');\nvar SHA1   = require('./sha1');\nvar SVG    = require('./svg');\n\n\n\nvar DEFAULTS = {\n\tbaseColor: '#933c3c'\n};\n\nvar PATTERNS = [\n\t'octogons',\n\t'overlappingCircles',\n\t'plusSigns',\n\t'xes',\n\t'sineWaves',\n\t'hexagons',\n\t'overlappingRings',\n\t'plaid',\n\t'triangles',\n\t'squares',\n\t'concentricCircles',\n\t'diamonds',\n\t'tessellation',\n\t'nestedSquares',\n\t'mosaicSquares',\n\t'chevrons'\n];\n\nvar FILL_COLOR_DARK  = '#222';\nvar FILL_COLOR_LIGHT = '#ddd';\nvar STROKE_COLOR     = '#000';\nvar STROKE_OPACITY   = 0.02;\nvar OPACITY_MIN      = 0.02;\nvar OPACITY_MAX      = 0.15;\n\n\n\n// Helpers\n\n/**\n * Extract a substring from a hex string and parse it as an integer\n * @param {string} hash - Source hex string\n * @param {number} index - Start index of substring\n * @param {number} [length] - Length of substring. Defaults to 1.\n */\nfunction hexVal(hash, index, len) {\n\treturn parseInt(hash.substr(index, len || 1), 16);\n}\n\n/*\n * Re-maps a number from one range to another\n * http://processing.org/reference/map_.html\n */\nfunction map(value, vMin, vMax, dMin, dMax) {\n\tvar vValue = parseFloat(value);\n\tvar vRange = vMax - vMin;\n\tvar dRange = dMax - dMin;\n\n\treturn (vValue - vMin) * dRange / vRange + dMin;\n}\n\nfunction fillColor(val) {\n\treturn (val % 2 === 0) ? FILL_COLOR_LIGHT : FILL_COLOR_DARK;\n}\n\nfunction fillOpacity(val) {\n\treturn map(val, 0, 15, OPACITY_MIN, OPACITY_MAX);\n}\n\n\n\nvar Pattern = module.exports = function (string, options) {\n\tthis.opts = extend({}, DEFAULTS, options);\n\tthis.hash = options.hash || SHA1(string);\n\tthis.svg = new SVG();\n\n\tthis.generateBackground();\n\tthis.generatePattern();\n\n\treturn this;\n};\n\nPattern.prototype.toSvg = function () {\n\treturn this.svg.toString();\n};\n\nPattern.prototype.toString = function () {\n\treturn this.toSvg();\n};\n\nPattern.prototype.toBase64 = function () {\n\tvar str = this.toSvg();\n\tvar b64;\n\n\t// Use window.btoa if in the browser; otherwise fallback to node buffers\n\tif (typeof window !== 'undefined' && typeof window.btoa === 'function') {\n\t\tb64 = window.btoa(str);\n\t} else {\n\t\tb64 = new Buffer(str).toString('base64');\n\t}\n\n\treturn b64;\n};\n\nPattern.prototype.toDataUri = function () {\n\treturn 'data:image/svg+xml;base64,' + this.toBase64();\n};\n\nPattern.prototype.toDataUrl = function () {\n\treturn 'url(\"' + this.toDataUri() + '\")';\n};\n\nPattern.prototype.generateBackground = function () {\n\tvar baseColor, hueOffset, rgb, satOffset;\n\n\tif (this.opts.color) {\n\t\trgb = color.hex2rgb(this.opts.color);\n\t} else {\n\t\thueOffset = map(hexVal(this.hash, 14, 3), 0, 4095, 0, 359);\n\t\tsatOffset = hexVal(this.hash, 17);\n\t\tbaseColor = color.rgb2hsl(color.hex2rgb(this.opts.baseColor));\n\n\t\tbaseColor.h = (((baseColor.h * 360 - hueOffset) + 360) % 360) / 360;\n\n\t\tif (satOffset % 2 === 0) {\n\t\t\tbaseColor.s = Math.min(1, ((baseColor.s * 100) + satOffset) / 100);\n\t\t} else {\n\t\t\tbaseColor.s = Math.max(0, ((baseColor.s * 100) - satOffset) / 100);\n\t\t}\n\t\trgb = color.hsl2rgb(baseColor);\n\t}\n\n\tthis.color = color.rgb2hex(rgb);\n\n\tthis.svg.rect(0, 0, '100%', '100%', {\n\t\tfill: color.rgb2rgbString(rgb)\n\t});\n};\n\nPattern.prototype.generatePattern = function () {\n\tvar generator = this.opts.generator;\n\n\tif (generator) {\n\t\tif (PATTERNS.indexOf(generator) < 0) {\n\t\t\tthrow new Error('The generator '\n\t\t\t\t+ generator\n\t\t\t\t+ ' does not exist.');\n\t\t}\n\t} else {\n\t\tgenerator = PATTERNS[hexVal(this.hash, 20)];\n\t}\n\n\treturn this['geo' + generator.slice(0, 1).toUpperCase() + generator.slice(1)]();\n};\n\nfunction buildHexagonShape(sideLength) {\n\tvar c = sideLength;\n\tvar a = c / 2;\n\tvar b = Math.sin(60 * Math.PI / 180) * c;\n\treturn [\n\t\t0, b,\n\t\ta, 0,\n\t\ta + c, 0,\n\t\t2 * c, b,\n\t\ta + c, 2 * b,\n\t\ta, 2 * b,\n\t\t0, b\n\t].join(',');\n}\n\nPattern.prototype.geoHexagons = function () {\n\tvar scale      = hexVal(this.hash, 0);\n\tvar sideLength = map(scale, 0, 15, 8, 60);\n\tvar hexHeight  = sideLength * Math.sqrt(3);\n\tvar hexWidth   = sideLength * 2;\n\tvar hex        = buildHexagonShape(sideLength);\n\tvar dy, fill, i, opacity, styles, val, x, y;\n\n\tthis.svg.setWidth(hexWidth * 3 + sideLength * 3);\n\tthis.svg.setHeight(hexHeight * 6);\n\n\ti = 0;\n\tfor (y = 0; y < 6; y++) {\n\t\tfor (x = 0; x < 6; x++) {\n\t\t\tval     = hexVal(this.hash, i);\n\t\t\tdy      = x % 2 === 0 ? y * hexHeight : y * hexHeight + hexHeight / 2;\n\t\t\topacity = fillOpacity(val);\n\t\t\tfill    = fillColor(val);\n\n\t\t\tstyles = {\n\t\t\t\tfill: fill,\n\t\t\t\t'fill-opacity': opacity,\n\t\t\t\tstroke: STROKE_COLOR,\n\t\t\t\t'stroke-opacity': STROKE_OPACITY\n\t\t\t};\n\n\t\t\tthis.svg.polyline(hex, styles).transform({\n\t\t\t\ttranslate: [\n\t\t\t\t\tx * sideLength * 1.5 - hexWidth / 2,\n\t\t\t\t\tdy - hexHeight / 2\n\t\t\t\t]\n\t\t\t});\n\n\t\t\t// Add an extra one at top-right, for tiling.\n\t\t\tif (x === 0) {\n\t\t\t\tthis.svg.polyline(hex, styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\t6 * sideLength * 1.5 - hexWidth / 2,\n\t\t\t\t\t\tdy - hexHeight / 2\n\t\t\t\t\t]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Add an extra row at the end that matches the first row, for tiling.\n\t\t\tif (y === 0) {\n\t\t\t\tdy = x % 2 === 0 ? 6 * hexHeight : 6 * hexHeight + hexHeight / 2;\n\t\t\t\tthis.svg.polyline(hex, styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\tx * sideLength * 1.5 - hexWidth / 2,\n\t\t\t\t\t\tdy - hexHeight / 2\n\t\t\t\t\t]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Add an extra one at bottom-right, for tiling.\n\t\t\tif (x === 0 && y === 0) {\n\t\t\t\tthis.svg.polyline(hex, styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\t6 * sideLength * 1.5 - hexWidth / 2,\n\t\t\t\t\t\t5 * hexHeight + hexHeight / 2\n\t\t\t\t\t]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\t}\n};\n\nPattern.prototype.geoSineWaves = function () {\n\tvar period    = Math.floor(map(hexVal(this.hash, 0), 0, 15, 100, 400));\n\tvar amplitude = Math.floor(map(hexVal(this.hash, 1), 0, 15, 30, 100));\n\tvar waveWidth = Math.floor(map(hexVal(this.hash, 2), 0, 15, 3, 30));\n\tvar fill, i, opacity, str, styles, val, xOffset;\n\n\tthis.svg.setWidth(period);\n\tthis.svg.setHeight(waveWidth * 36);\n\n\tfor (i = 0; i < 36; i++) {\n\t\tval     = hexVal(this.hash, i);\n\t\topacity = fillOpacity(val);\n\t\tfill    = fillColor(val);\n\t\txOffset = period / 4 * 0.7;\n\n\t\tstyles = {\n\t\t\tfill: 'none',\n\t\t\tstroke: fill,\n\t\t\topacity: opacity,\n\t\t\t'stroke-width': '' + waveWidth + 'px'\n\t\t};\n\n\t\tstr = 'M0 ' + amplitude +\n\t\t\t' C ' + xOffset + ' 0, ' + (period / 2 - xOffset) + ' 0, ' + (period / 2) + ' ' + amplitude +\n\t\t\t' S ' + (period - xOffset) + ' ' + (amplitude * 2) + ', ' + period + ' ' + amplitude +\n\t\t\t' S ' + (period * 1.5 - xOffset) + ' 0, ' + (period * 1.5) + ', ' + amplitude;\n\n\t\tthis.svg.path(str, styles).transform({\n\t\t\ttranslate: [\n\t\t\t\t-period / 4,\n\t\t\t\twaveWidth * i - amplitude * 1.5\n\t\t\t]\n\t\t});\n\t\tthis.svg.path(str, styles).transform({\n\t\t\ttranslate: [\n\t\t\t\t-period / 4,\n\t\t\t\twaveWidth * i - amplitude * 1.5 + waveWidth * 36\n\t\t\t]\n\t\t});\n\t}\n};\n\nfunction buildChevronShape(width, height) {\n\tvar e = height * 0.66;\n\treturn [\n\t\t[\n\t\t\t0, 0,\n\t\t\twidth / 2, height - e,\n\t\t\twidth / 2, height,\n\t\t\t0, e,\n\t\t\t0, 0\n\t\t],\n\t\t[\n\t\t\twidth / 2, height - e,\n\t\t\twidth, 0,\n\t\t\twidth, e,\n\t\t\twidth / 2, height,\n\t\t\twidth / 2, height - e\n\t\t]\n\t].map(function (x) { return x.join(','); });\n}\n\nPattern.prototype.geoChevrons = function () {\n\tvar chevronWidth  = map(hexVal(this.hash, 0), 0, 15, 30, 80);\n\tvar chevronHeight = map(hexVal(this.hash, 0), 0, 15, 30, 80);\n\tvar chevron       = buildChevronShape(chevronWidth, chevronHeight);\n\tvar fill, i, opacity, styles, val, x, y;\n\n\tthis.svg.setWidth(chevronWidth * 6);\n\tthis.svg.setHeight(chevronHeight * 6 * 0.66);\n\n\ti = 0;\n\tfor (y = 0; y < 6; y++) {\n\t\tfor (x = 0; x < 6; x++) {\n\t\t\tval     = hexVal(this.hash, i);\n\t\t\topacity = fillOpacity(val);\n\t\t\tfill    = fillColor(val);\n\n\t\t\tstyles = {\n\t\t\t\tstroke: STROKE_COLOR,\n\t\t\t\t'stroke-opacity': STROKE_OPACITY,\n\t\t\t\tfill: fill,\n\t\t\t\t'fill-opacity': opacity,\n\t\t\t\t'stroke-width': 1\n\t\t\t};\n\n\t\t\tthis.svg.group(styles).transform({\n\t\t\t\ttranslate: [\n\t\t\t\t\tx * chevronWidth,\n\t\t\t\t\ty * chevronHeight * 0.66 - chevronHeight / 2\n\t\t\t\t]\n\t\t\t}).polyline(chevron).end();\n\n\t\t\t// Add an extra row at the end that matches the first row, for tiling.\n\t\t\tif (y === 0) {\n\t\t\t\tthis.svg.group(styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\tx * chevronWidth,\n\t\t\t\t\t\t6 * chevronHeight * 0.66 - chevronHeight / 2\n\t\t\t\t\t]\n\t\t\t\t}).polyline(chevron).end();\n\t\t\t}\n\n\t\t\ti += 1;\n\t\t}\n\t}\n};\n\nfunction buildPlusShape(squareSize) {\n\treturn [\n\t\t[squareSize, 0, squareSize, squareSize * 3],\n\t\t[0, squareSize, squareSize * 3, squareSize]\n\t];\n}\n\nPattern.prototype.geoPlusSigns = function () {\n\tvar squareSize = map(hexVal(this.hash, 0), 0, 15, 10, 25);\n\tvar plusSize   = squareSize * 3;\n\tvar plusShape  = buildPlusShape(squareSize);\n\tvar dx, fill, i, opacity, styles, val, x, y;\n\n\tthis.svg.setWidth(squareSize * 12);\n\tthis.svg.setHeight(squareSize * 12);\n\n\ti = 0;\n\tfor (y = 0; y < 6; y++) {\n\t\tfor (x = 0; x < 6; x++) {\n\t\t\tval     = hexVal(this.hash, i);\n\t\t\topacity = fillOpacity(val);\n\t\t\tfill    = fillColor(val);\n\t\t\tdx      = (y % 2 === 0) ? 0 : 1;\n\n\t\t\tstyles = {\n\t\t\t\tfill: fill,\n\t\t\t\tstroke: STROKE_COLOR,\n\t\t\t\t'stroke-opacity': STROKE_OPACITY,\n\t\t\t\t'fill-opacity': opacity\n\t\t\t};\n\n\t\t\tthis.svg.group(styles).transform({\n\t\t\t\ttranslate: [\n\t\t\t\t\tx * plusSize - x * squareSize + dx * squareSize - squareSize,\n\t\t\t\t\ty * plusSize - y * squareSize - plusSize / 2\n\t\t\t\t]\n\t\t\t}).rect(plusShape).end();\n\n\t\t\t// Add an extra column on the right for tiling.\n\t\t\tif (x === 0) {\n\t\t\t\tthis.svg.group(styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\t4 * plusSize - x * squareSize + dx * squareSize - squareSize,\n\t\t\t\t\t\ty * plusSize - y * squareSize - plusSize / 2\n\t\t\t\t\t]\n\t\t\t\t}).rect(plusShape).end();\n\t\t\t}\n\n\t\t\t// Add an extra row on the bottom that matches the first row, for tiling\n\t\t\tif (y === 0) {\n\t\t\t\tthis.svg.group(styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\tx * plusSize - x * squareSize + dx * squareSize - squareSize,\n\t\t\t\t\t\t4 * plusSize - y * squareSize - plusSize / 2\n\t\t\t\t\t]\n\t\t\t\t}).rect(plusShape).end();\n\t\t\t}\n\n\t\t\t// Add an extra one at top-right and bottom-right, for tiling\n\t\t\tif (x === 0 && y === 0) {\n\t\t\t\tthis.svg.group(styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\t4 * plusSize - x * squareSize + dx * squareSize - squareSize,\n\t\t\t\t\t\t4 * plusSize - y * squareSize - plusSize / 2\n\t\t\t\t\t]\n\t\t\t\t}).rect(plusShape).end();\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\t}\n};\n\nPattern.prototype.geoXes = function () {\n\tvar squareSize = map(hexVal(this.hash, 0), 0, 15, 10, 25);\n\tvar xShape     = buildPlusShape(squareSize);\n\tvar xSize      = squareSize * 3 * 0.943;\n\tvar dy, fill, i, opacity, styles, val, x, y;\n\n\tthis.svg.setWidth(xSize * 3);\n\tthis.svg.setHeight(xSize * 3);\n\n\ti = 0;\n\tfor (y = 0; y < 6; y++) {\n\t\tfor (x = 0; x < 6; x++) {\n\t\t\tval     = hexVal(this.hash, i);\n\t\t\topacity = fillOpacity(val);\n\t\t\tdy      = x % 2 === 0 ? y * xSize - xSize * 0.5 : y * xSize - xSize * 0.5 + xSize / 4;\n\t\t\tfill    = fillColor(val);\n\n\t\t\tstyles = {\n\t\t\t\tfill: fill,\n\t\t\t\topacity: opacity\n\t\t\t};\n\n\t\t\tthis.svg.group(styles).transform({\n\t\t\t\ttranslate: [\n\t\t\t\t\tx * xSize / 2 - xSize / 2,\n\t\t\t\t\tdy - y * xSize / 2\n\t\t\t\t],\n\t\t\t\trotate: [\n\t\t\t\t\t45,\n\t\t\t\t\txSize / 2,\n\t\t\t\t\txSize / 2\n\t\t\t\t]\n\t\t\t}).rect(xShape).end();\n\n\t\t\t// Add an extra column on the right for tiling.\n\t\t\tif (x === 0) {\n\t\t\t\tthis.svg.group(styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\t6 * xSize / 2 - xSize / 2,\n\t\t\t\t\t\tdy - y * xSize / 2\n\t\t\t\t\t],\n\t\t\t\t\trotate: [\n\t\t\t\t\t\t45,\n\t\t\t\t\t\txSize / 2,\n\t\t\t\t\t\txSize / 2\n\t\t\t\t\t]\n\t\t\t\t}).rect(xShape).end();\n\t\t\t}\n\n\t\t\t// // Add an extra row on the bottom that matches the first row, for tiling.\n\t\t\tif (y === 0) {\n\t\t\t\tdy = x % 2 === 0 ? 6 * xSize - xSize / 2 : 6 * xSize - xSize / 2 + xSize / 4;\n\t\t\t\tthis.svg.group(styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\tx * xSize / 2 - xSize / 2,\n\t\t\t\t\t\tdy - 6 * xSize / 2\n\t\t\t\t\t],\n\t\t\t\t\trotate: [\n\t\t\t\t\t\t45,\n\t\t\t\t\t\txSize / 2,\n\t\t\t\t\t\txSize / 2\n\t\t\t\t\t]\n\t\t\t\t}).rect(xShape).end();\n\t\t\t}\n\n\t\t\t// These can hang off the bottom, so put a row at the top for tiling.\n\t\t\tif (y === 5) {\n\t\t\t\tthis.svg.group(styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\tx * xSize / 2 - xSize / 2,\n\t\t\t\t\t\tdy - 11 * xSize / 2\n\t\t\t\t\t],\n\t\t\t\t\trotate: [\n\t\t\t\t\t\t45,\n\t\t\t\t\t\txSize / 2,\n\t\t\t\t\t\txSize / 2\n\t\t\t\t\t]\n\t\t\t\t}).rect(xShape).end();\n\t\t\t}\n\n\t\t\t// Add an extra one at top-right and bottom-right, for tiling\n\t\t\tif (x === 0 && y === 0) {\n\t\t\t\tthis.svg.group(styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\t6 * xSize / 2 - xSize / 2,\n\t\t\t\t\t\tdy - 6 * xSize / 2\n\t\t\t\t\t],\n\t\t\t\t\trotate: [\n\t\t\t\t\t\t45,\n\t\t\t\t\t\txSize / 2,\n\t\t\t\t\t\txSize / 2\n\t\t\t\t\t]\n\t\t\t\t}).rect(xShape).end();\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t}\n};\n\nPattern.prototype.geoOverlappingCircles = function () {\n\tvar scale    = hexVal(this.hash, 0);\n\tvar diameter = map(scale, 0, 15, 25, 200);\n\tvar radius   = diameter / 2;\n\tvar circle, fill, i, opacity, styles, val, x, y;\n\n\tthis.svg.setWidth(radius * 6);\n\tthis.svg.setHeight(radius * 6);\n\n\ti = 0;\n\tfor (y = 0; y < 6; y++) {\n\t\tfor (x = 0; x < 6; x++) {\n\t\t\tval     = hexVal(this.hash, i);\n\t\t\topacity = fillOpacity(val);\n\t\t\tfill    = fillColor(val);\n\n\t\t\tstyles = {\n\t\t\t\tfill: fill,\n\t\t\t\topacity: opacity\n\t\t\t};\n\n\t\t\tthis.svg.circle(x * radius, y * radius, radius, styles);\n\n\t\t\t// Add an extra one at top-right, for tiling.\n\t\t\tif (x === 0) {\n\t\t\t\tthis.svg.circle(6 * radius, y * radius, radius, styles);\n\t\t\t}\n\n\t\t\t// // Add an extra row at the end that matches the first row, for tiling.\n\t\t\tif (y === 0) {\n\t\t\t\tthis.svg.circle(x * radius, 6 * radius, radius, styles);\n\t\t\t}\n\n\t\t\t// // Add an extra one at bottom-right, for tiling.\n\t\t\tif (x === 0 && y === 0) {\n\t\t\t\tthis.svg.circle(6 * radius, 6 * radius, radius, styles);\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\t}\n};\n\nfunction buildOctogonShape(squareSize) {\n\tvar s = squareSize;\n\tvar c = s * 0.33;\n\treturn [\n\t\tc, 0,\n\t\ts - c, 0,\n\t\ts, c,\n\t\ts, s - c,\n\t\ts - c, s,\n\t\tc, s,\n\t\t0, s - c,\n\t\t0, c,\n\t\tc, 0\n\t].join(',');\n}\n\nPattern.prototype.geoOctogons = function () {\n\tvar squareSize = map(hexVal(this.hash, 0), 0, 15, 10, 60);\n\tvar tile       = buildOctogonShape(squareSize);\n\tvar fill, i, opacity, val, x, y;\n\n\tthis.svg.setWidth(squareSize * 6);\n\tthis.svg.setHeight(squareSize * 6);\n\n\ti = 0;\n\tfor (y = 0; y < 6; y++) {\n\t\tfor (x = 0; x < 6; x++) {\n\t\t\tval     = hexVal(this.hash, i);\n\t\t\topacity = fillOpacity(val);\n\t\t\tfill    = fillColor(val);\n\n\t\t\tthis.svg.polyline(tile, {\n\t\t\t\tfill: fill,\n\t\t\t\t'fill-opacity': opacity,\n\t\t\t\tstroke: STROKE_COLOR,\n\t\t\t\t'stroke-opacity': STROKE_OPACITY\n\t\t\t}).transform({\n\t\t\t\ttranslate: [\n\t\t\t\t\tx * squareSize,\n\t\t\t\t\ty * squareSize\n\t\t\t\t]\n\t\t\t});\n\n\t\t\ti += 1;\n\t\t}\n\t}\n};\n\nPattern.prototype.geoSquares = function () {\n\tvar squareSize = map(hexVal(this.hash, 0), 0, 15, 10, 60);\n\tvar fill, i, opacity, val, x, y;\n\n\tthis.svg.setWidth(squareSize * 6);\n\tthis.svg.setHeight(squareSize * 6);\n\n\ti = 0;\n\tfor (y = 0; y < 6; y++) {\n\t\tfor (x = 0; x < 6; x++) {\n\t\t\tval     = hexVal(this.hash, i);\n\t\t\topacity = fillOpacity(val);\n\t\t\tfill    = fillColor(val);\n\n\t\t\tthis.svg.rect(x * squareSize, y * squareSize, squareSize, squareSize, {\n\t\t\t\tfill: fill,\n\t\t\t\t'fill-opacity': opacity,\n\t\t\t\tstroke: STROKE_COLOR,\n\t\t\t\t'stroke-opacity': STROKE_OPACITY\n\t\t\t});\n\n\t\t\ti += 1;\n\t\t}\n\t}\n};\n\nPattern.prototype.geoConcentricCircles = function () {\n\tvar scale       = hexVal(this.hash, 0);\n\tvar ringSize    = map(scale, 0, 15, 10, 60);\n\tvar strokeWidth = ringSize / 5;\n\tvar fill, i, opacity, val, x, y;\n\n\tthis.svg.setWidth((ringSize + strokeWidth) * 6);\n\tthis.svg.setHeight((ringSize + strokeWidth) * 6);\n\n\ti = 0;\n\tfor (y = 0; y < 6; y++) {\n\t\tfor (x = 0; x < 6; x++) {\n\t\t\tval     = hexVal(this.hash, i);\n\t\t\topacity = fillOpacity(val);\n\t\t\tfill    = fillColor(val);\n\n\t\t\tthis.svg.circle(\n\t\t\t\tx * ringSize + x * strokeWidth + (ringSize + strokeWidth) / 2,\n\t\t\t\ty * ringSize + y * strokeWidth + (ringSize + strokeWidth) / 2,\n\t\t\t\tringSize / 2,\n\t\t\t\t{\n\t\t\t\t\tfill: 'none',\n\t\t\t\t\tstroke: fill,\n\t\t\t\t\topacity: opacity,\n\t\t\t\t\t'stroke-width': strokeWidth + 'px'\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tval     = hexVal(this.hash, 39 - i);\n\t\t\topacity = fillOpacity(val);\n\t\t\tfill    = fillColor(val);\n\n\t\t\tthis.svg.circle(\n\t\t\t\tx * ringSize + x * strokeWidth + (ringSize + strokeWidth) / 2,\n\t\t\t\ty * ringSize + y * strokeWidth + (ringSize + strokeWidth) / 2,\n\t\t\t\tringSize / 4,\n\t\t\t\t{\n\t\t\t\t\tfill: fill,\n\t\t\t\t\t'fill-opacity': opacity\n\t\t\t\t}\n\t\t\t);\n\n\t\t\ti += 1;\n\t\t}\n\t}\n};\n\nPattern.prototype.geoOverlappingRings = function () {\n\tvar scale       = hexVal(this.hash, 0);\n\tvar ringSize    = map(scale, 0, 15, 10, 60);\n\tvar strokeWidth = ringSize / 4;\n\tvar fill, i, opacity, styles, val, x, y;\n\n\tthis.svg.setWidth(ringSize * 6);\n\tthis.svg.setHeight(ringSize * 6);\n\n\ti = 0;\n\tfor (y = 0; y < 6; y++) {\n\t\tfor (x = 0; x < 6; x++) {\n\t\t\tval     = hexVal(this.hash, i);\n\t\t\topacity = fillOpacity(val);\n\t\t\tfill    = fillColor(val);\n\n\t\t\tstyles = {\n\t\t\t\tfill: 'none',\n\t\t\t\tstroke: fill,\n\t\t\t\topacity: opacity,\n\t\t\t\t'stroke-width': strokeWidth + 'px'\n\t\t\t};\n\n\t\t\tthis.svg.circle(x * ringSize, y * ringSize, ringSize - strokeWidth / 2, styles);\n\n\t\t\t// Add an extra one at top-right, for tiling.\n\t\t\tif (x === 0) {\n\t\t\t\tthis.svg.circle(6 * ringSize, y * ringSize, ringSize - strokeWidth / 2, styles);\n\t\t\t}\n\n\t\t\tif (y === 0) {\n\t\t\t\tthis.svg.circle(x * ringSize, 6 * ringSize, ringSize - strokeWidth / 2, styles);\n\t\t\t}\n\n\t\t\tif (x === 0 && y === 0) {\n\t\t\t\tthis.svg.circle(6 * ringSize, 6 * ringSize, ringSize - strokeWidth / 2, styles);\n\t\t\t}\n\n\t\t\ti += 1;\n\t\t}\n\t}\n};\n\nfunction buildTriangleShape(sideLength, height) {\n\tvar halfWidth = sideLength / 2;\n\treturn [\n\t\thalfWidth, 0,\n\t\tsideLength, height,\n\t\t0, height,\n\t\thalfWidth, 0\n\t].join(',');\n}\n\nPattern.prototype.geoTriangles = function () {\n\tvar scale          = hexVal(this.hash, 0);\n\tvar sideLength     = map(scale, 0, 15, 15, 80);\n\tvar triangleHeight = sideLength / 2 * Math.sqrt(3);\n\tvar triangle       = buildTriangleShape(sideLength, triangleHeight);\n\tvar fill, i, opacity, rotation, styles, val, x, y;\n\n\tthis.svg.setWidth(sideLength * 3);\n\tthis.svg.setHeight(triangleHeight * 6);\n\n\ti = 0;\n\tfor (y = 0; y < 6; y++) {\n\t\tfor (x = 0; x < 6; x++) {\n\t\t\tval     = hexVal(this.hash, i);\n\t\t\topacity = fillOpacity(val);\n\t\t\tfill    = fillColor(val);\n\n\t\t\tstyles = {\n\t\t\t\tfill: fill,\n\t\t\t\t'fill-opacity': opacity,\n\t\t\t\tstroke: STROKE_COLOR,\n\t\t\t\t'stroke-opacity': STROKE_OPACITY\n\t\t\t};\n\n\t\t\tif (y % 2 === 0) {\n\t\t\t\trotation = x % 2 === 0 ? 180 : 0;\n\t\t\t} else {\n\t\t\t\trotation = x % 2 !== 0 ? 180 : 0;\n\t\t\t}\n\n\t\t\tthis.svg.polyline(triangle, styles).transform({\n\t\t\t\ttranslate: [\n\t\t\t\t\tx * sideLength * 0.5 - sideLength / 2,\n\t\t\t\t\ttriangleHeight * y\n\t\t\t\t],\n\t\t\t\trotate: [\n\t\t\t\t\trotation,\n\t\t\t\t\tsideLength / 2,\n\t\t\t\t\ttriangleHeight / 2\n\t\t\t\t]\n\t\t\t});\n\n\t\t\t// Add an extra one at top-right, for tiling.\n\t\t\tif (x === 0) {\n\t\t\t\tthis.svg.polyline(triangle, styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\t6 * sideLength * 0.5 - sideLength / 2,\n\t\t\t\t\t\ttriangleHeight * y\n\t\t\t\t\t],\n\t\t\t\t\trotate: [\n\t\t\t\t\t\trotation,\n\t\t\t\t\t\tsideLength / 2,\n\t\t\t\t\t\ttriangleHeight / 2\n\t\t\t\t\t]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\ti += 1;\n\t\t}\n\t}\n};\n\nfunction buildDiamondShape(width, height) {\n\treturn [\n\t\twidth / 2, 0,\n\t\twidth, height / 2,\n\t\twidth / 2, height,\n\t\t0, height / 2\n\t].join(',');\n}\n\nPattern.prototype.geoDiamonds = function () {\n\tvar diamondWidth  = map(hexVal(this.hash, 0), 0, 15, 10, 50);\n\tvar diamondHeight = map(hexVal(this.hash, 1), 0, 15, 10, 50);\n\tvar diamond       = buildDiamondShape(diamondWidth, diamondHeight);\n\tvar dx, fill, i, opacity, styles, val, x, y;\n\n\tthis.svg.setWidth(diamondWidth * 6);\n\tthis.svg.setHeight(diamondHeight * 3);\n\n\ti = 0;\n\tfor (y = 0; y < 6; y++) {\n\t\tfor (x = 0; x < 6; x++) {\n\t\t\tval     = hexVal(this.hash, i);\n\t\t\topacity = fillOpacity(val);\n\t\t\tfill    = fillColor(val);\n\n\t\t\tstyles = {\n\t\t\t\tfill: fill,\n\t\t\t\t'fill-opacity': opacity,\n\t\t\t\tstroke: STROKE_COLOR,\n\t\t\t\t'stroke-opacity': STROKE_OPACITY\n\t\t\t};\n\n\t\t\tdx = (y % 2 === 0) ? 0 : diamondWidth / 2;\n\n\t\t\tthis.svg.polyline(diamond, styles).transform({\n\t\t\t\ttranslate: [\n\t\t\t\t\tx * diamondWidth - diamondWidth / 2 + dx,\n\t\t\t\t\tdiamondHeight / 2 * y - diamondHeight / 2\n\t\t\t\t]\n\t\t\t});\n\n\t\t\t// Add an extra one at top-right, for tiling.\n\t\t\tif (x === 0) {\n\t\t\t\tthis.svg.polyline(diamond, styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\t6 * diamondWidth - diamondWidth / 2 + dx,\n\t\t\t\t\t\tdiamondHeight / 2 * y - diamondHeight / 2\n\t\t\t\t\t]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Add an extra row at the end that matches the first row, for tiling.\n\t\t\tif (y === 0) {\n\t\t\t\tthis.svg.polyline(diamond, styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\tx * diamondWidth - diamondWidth / 2 + dx,\n\t\t\t\t\t\tdiamondHeight / 2 * 6 - diamondHeight / 2\n\t\t\t\t\t]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Add an extra one at bottom-right, for tiling.\n\t\t\tif (x === 0 && y === 0) {\n\t\t\t\tthis.svg.polyline(diamond, styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\t6 * diamondWidth - diamondWidth / 2 + dx,\n\t\t\t\t\t\tdiamondHeight / 2 * 6 - diamondHeight / 2\n\t\t\t\t\t]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\ti += 1;\n\t\t}\n\t}\n};\n\nPattern.prototype.geoNestedSquares = function () {\n\tvar blockSize  = map(hexVal(this.hash, 0), 0, 15, 4, 12);\n\tvar squareSize = blockSize * 7;\n\tvar fill, i, opacity, styles, val, x, y;\n\n\tthis.svg.setWidth((squareSize + blockSize) * 6 + blockSize * 6);\n\tthis.svg.setHeight((squareSize + blockSize) * 6 + blockSize * 6);\n\n\ti = 0;\n\tfor (y = 0; y < 6; y++) {\n\t\tfor (x = 0; x < 6; x++) {\n\t\t\tval     = hexVal(this.hash, i);\n\t\t\topacity = fillOpacity(val);\n\t\t\tfill    = fillColor(val);\n\n\t\t\tstyles = {\n\t\t\t\tfill: 'none',\n\t\t\t\tstroke: fill,\n\t\t\t\topacity: opacity,\n\t\t\t\t'stroke-width': blockSize + 'px'\n\t\t\t};\n\n\t\t\tthis.svg.rect(x * squareSize + x * blockSize * 2 + blockSize / 2,\n\t\t\t              y * squareSize + y * blockSize * 2 + blockSize / 2,\n\t\t\t              squareSize, squareSize, styles);\n\n\t\t\tval     = hexVal(this.hash, 39 - i);\n\t\t\topacity = fillOpacity(val);\n\t\t\tfill    = fillColor(val);\n\n\t\t\tstyles = {\n\t\t\t\tfill: 'none',\n\t\t\t\tstroke: fill,\n\t\t\t\topacity: opacity,\n\t\t\t\t'stroke-width': blockSize + 'px'\n\t\t\t};\n\n\t\t\tthis.svg.rect(x * squareSize + x * blockSize * 2 + blockSize / 2 + blockSize * 2,\n\t\t\t              y * squareSize + y * blockSize * 2 + blockSize / 2 + blockSize * 2,\n\t\t\t              blockSize * 3, blockSize * 3, styles);\n\n\t\t\ti += 1;\n\t\t}\n\t}\n};\n\nfunction buildRightTriangleShape(sideLength) {\n\treturn [\n\t\t0, 0,\n\t\tsideLength, sideLength,\n\t\t0, sideLength,\n\t\t0, 0\n\t].join(',');\n}\n\nfunction drawInnerMosaicTile(svg, x, y, triangleSize, vals) {\n\tvar triangle = buildRightTriangleShape(triangleSize);\n\tvar opacity  = fillOpacity(vals[0]);\n\tvar fill     = fillColor(vals[0]);\n\tvar styles   = {\n\t\tstroke: STROKE_COLOR,\n\t\t'stroke-opacity': STROKE_OPACITY,\n\t\t'fill-opacity': opacity,\n\t\tfill: fill\n\t};\n\n\tsvg.polyline(triangle, styles).transform({\n\t\ttranslate: [\n\t\t\tx + triangleSize,\n\t\t\ty\n\t\t],\n\t\tscale: [-1, 1]\n\t});\n\tsvg.polyline(triangle, styles).transform({\n\t\ttranslate: [\n\t\t\tx + triangleSize,\n\t\t\ty + triangleSize * 2\n\t\t],\n\t\tscale: [1, -1]\n\t});\n\n\topacity = fillOpacity(vals[1]);\n\tfill    = fillColor(vals[1]);\n\tstyles  = {\n\t\tstroke: STROKE_COLOR,\n\t\t'stroke-opacity': STROKE_OPACITY,\n\t\t'fill-opacity': opacity,\n\t\tfill: fill\n\t};\n\n\tsvg.polyline(triangle, styles).transform({\n\t\ttranslate: [\n\t\t\tx + triangleSize,\n\t\t\ty + triangleSize * 2\n\t\t],\n\t\tscale: [-1, -1]\n\t});\n\tsvg.polyline(triangle, styles).transform({\n\t\ttranslate: [\n\t\t\tx + triangleSize,\n\t\t\ty\n\t\t],\n\t\tscale: [1, 1]\n\t});\n}\n\nfunction drawOuterMosaicTile(svg, x, y, triangleSize, val) {\n\tvar opacity  = fillOpacity(val);\n\tvar fill     = fillColor(val);\n\tvar triangle = buildRightTriangleShape(triangleSize);\n\tvar styles   = {\n\t\tstroke: STROKE_COLOR,\n\t\t'stroke-opacity': STROKE_OPACITY,\n\t\t'fill-opacity': opacity,\n\t\tfill: fill\n\t};\n\n\tsvg.polyline(triangle, styles).transform({\n\t\ttranslate: [\n\t\t\tx,\n\t\t\ty + triangleSize\n\t\t],\n\t\tscale: [1, -1]\n\t});\n\tsvg.polyline(triangle, styles).transform({\n\t\ttranslate: [\n\t\t\tx + triangleSize * 2,\n\t\t\ty + triangleSize\n\t\t],\n\t\tscale: [-1, -1]\n\t});\n\tsvg.polyline(triangle, styles).transform({\n\t\ttranslate: [\n\t\t\tx,\n\t\t\ty + triangleSize\n\t\t],\n\t\tscale: [1, 1]\n\t});\n\tsvg.polyline(triangle, styles).transform({\n\t\ttranslate: [\n\t\t\tx + triangleSize * 2,\n\t\t\ty + triangleSize\n\t\t],\n\t\tscale: [-1, 1]\n\t});\n}\n\nPattern.prototype.geoMosaicSquares = function () {\n\tvar triangleSize = map(hexVal(this.hash, 0), 0, 15, 15, 50);\n\tvar i, x, y;\n\n\tthis.svg.setWidth(triangleSize * 8);\n\tthis.svg.setHeight(triangleSize * 8);\n\n\ti = 0;\n\tfor (y = 0; y < 4; y++) {\n\t\tfor (x = 0; x < 4; x++) {\n\t\t\tif (x % 2 === 0) {\n\t\t\t\tif (y % 2 === 0) {\n\t\t\t\t\tdrawOuterMosaicTile(this.svg,\n\t\t\t\t\t\tx * triangleSize * 2,\n\t\t\t\t\t\ty * triangleSize * 2,\n\t\t\t\t\t\ttriangleSize,\n\t\t\t\t\t\thexVal(this.hash, i)\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tdrawInnerMosaicTile(this.svg,\n\t\t\t\t\t\tx * triangleSize * 2,\n\t\t\t\t\t\ty * triangleSize * 2,\n\t\t\t\t\t\ttriangleSize,\n\t\t\t\t\t\t[hexVal(this.hash, i), hexVal(this.hash, i + 1)]\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (y % 2 === 0) {\n\t\t\t\t\tdrawInnerMosaicTile(this.svg,\n\t\t\t\t\t\tx * triangleSize * 2,\n\t\t\t\t\t\ty * triangleSize * 2,\n\t\t\t\t\t\ttriangleSize,\n\t\t\t\t\t\t[hexVal(this.hash, i), hexVal(this.hash, i + 1)]\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tdrawOuterMosaicTile(this.svg,\n\t\t\t\t\t\tx * triangleSize * 2,\n\t\t\t\t\t\ty * triangleSize * 2,\n\t\t\t\t\t\ttriangleSize,\n\t\t\t\t\t\thexVal(this.hash, i)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ti += 1;\n\t\t}\n\t}\n};\n\nPattern.prototype.geoPlaid = function () {\n\tvar height = 0;\n\tvar width  = 0;\n\tvar fill, i, opacity, space, stripeHeight, stripeWidth, val;\n\n\t// Horizontal stripes\n\ti = 0;\n\twhile (i < 36) {\n\t\tspace   = hexVal(this.hash, i);\n\t\theight += space + 5;\n\n\t\tval          = hexVal(this.hash, i + 1);\n\t\topacity      = fillOpacity(val);\n\t\tfill         = fillColor(val);\n\t\tstripeHeight = val + 5;\n\n\t\tthis.svg.rect(0, height, '100%', stripeHeight, {\n\t\t\topacity: opacity,\n\t\t\tfill: fill\n\t\t});\n\n\t\theight += stripeHeight;\n\t\ti += 2;\n\t}\n\n\t// Vertical stripes\n\ti = 0;\n\twhile (i < 36) {\n\t\tspace  = hexVal(this.hash, i);\n\t\twidth += space + 5;\n\n\t\tval         = hexVal(this.hash, i + 1);\n\t\topacity     = fillOpacity(val);\n\t\tfill        = fillColor(val);\n\t\tstripeWidth = val + 5;\n\n\t\tthis.svg.rect(width, 0, stripeWidth, '100%', {\n\t\t\topacity: opacity,\n\t\t\tfill: fill\n\t\t});\n\n\t\twidth += stripeWidth;\n\t\ti += 2;\n\t}\n\n\tthis.svg.setWidth(width);\n\tthis.svg.setHeight(height);\n};\n\nfunction buildRotatedTriangleShape(sideLength, triangleWidth) {\n\tvar halfHeight = sideLength / 2;\n\treturn [\n\t\t0, 0,\n\t\ttriangleWidth, halfHeight,\n\t\t0, sideLength,\n\t\t0, 0\n\t].join(',');\n}\n\nPattern.prototype.geoTessellation = function () {\n\t// 3.4.6.4 semi-regular tessellation\n\tvar sideLength     = map(hexVal(this.hash, 0), 0, 15, 5, 40);\n\tvar hexHeight      = sideLength * Math.sqrt(3);\n\tvar hexWidth       = sideLength * 2;\n\tvar triangleHeight = sideLength / 2 * Math.sqrt(3);\n\tvar triangle       = buildRotatedTriangleShape(sideLength, triangleHeight);\n\tvar tileWidth      = sideLength * 3 + triangleHeight * 2;\n\tvar tileHeight     = (hexHeight * 2) + (sideLength * 2);\n\tvar fill, i, opacity, styles, val;\n\n\tthis.svg.setWidth(tileWidth);\n\tthis.svg.setHeight(tileHeight);\n\n\tfor (i = 0; i < 20; i++) {\n\t\tval     = hexVal(this.hash, i);\n\t\topacity = fillOpacity(val);\n\t\tfill    = fillColor(val);\n\n\t\tstyles  = {\n\t\t\tstroke: STROKE_COLOR,\n\t\t\t'stroke-opacity': STROKE_OPACITY,\n\t\t\tfill: fill,\n\t\t\t'fill-opacity': opacity,\n\t\t\t'stroke-width': 1\n\t\t};\n\n\t\tswitch (i) {\n\t\t\tcase 0: // All 4 corners\n\t\t\t\tthis.svg.rect(-sideLength / 2, -sideLength / 2, sideLength, sideLength, styles);\n\t\t\t\tthis.svg.rect(tileWidth - sideLength / 2, -sideLength / 2, sideLength, sideLength, styles);\n\t\t\t\tthis.svg.rect(-sideLength / 2, tileHeight - sideLength / 2, sideLength, sideLength, styles);\n\t\t\t\tthis.svg.rect(tileWidth - sideLength / 2, tileHeight - sideLength / 2, sideLength, sideLength, styles);\n\t\t\t\tbreak;\n\t\t\tcase 1: // Center / top square\n\t\t\t\tthis.svg.rect(hexWidth / 2 + triangleHeight, hexHeight / 2, sideLength, sideLength, styles);\n\t\t\t\tbreak;\n\t\t\tcase 2: // Side squares\n\t\t\t\tthis.svg.rect(-sideLength / 2, tileHeight / 2 - sideLength / 2, sideLength, sideLength, styles);\n\t\t\t\tthis.svg.rect(tileWidth - sideLength / 2, tileHeight / 2 - sideLength / 2, sideLength, sideLength, styles);\n\t\t\t\tbreak;\n\t\t\tcase 3: // Center / bottom square\n\t\t\t\tthis.svg.rect(hexWidth / 2 + triangleHeight, hexHeight * 1.5 + sideLength, sideLength, sideLength, styles);\n\t\t\t\tbreak;\n\t\t\tcase 4: // Left top / bottom triangle\n\t\t\t\tthis.svg.polyline(triangle, styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\tsideLength / 2,\n\t\t\t\t\t\t-sideLength / 2\n\t\t\t\t\t],\n\t\t\t\t\trotate: [\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tsideLength / 2,\n\t\t\t\t\t\ttriangleHeight / 2\n\t\t\t\t\t]\n\t\t\t\t});\n\t\t\t\tthis.svg.polyline(triangle, styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\tsideLength / 2,\n\t\t\t\t\t\ttileHeight - -sideLength / 2\n\t\t\t\t\t],\n\t\t\t\t\trotate: [\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tsideLength / 2,\n\t\t\t\t\t\ttriangleHeight / 2\n\t\t\t\t\t],\n\t\t\t\t\tscale: [1, -1]\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 5: // Right top / bottom triangle\n\t\t\t\tthis.svg.polyline(triangle, styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\ttileWidth - sideLength / 2,\n\t\t\t\t\t\t-sideLength / 2\n\t\t\t\t\t],\n\t\t\t\t\trotate: [\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tsideLength / 2,\n\t\t\t\t\t\ttriangleHeight / 2\n\t\t\t\t\t],\n\t\t\t\t\tscale: [-1, 1]\n\t\t\t\t});\n\t\t\t\tthis.svg.polyline(triangle, styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\ttileWidth - sideLength / 2,\n\t\t\t\t\t\ttileHeight + sideLength / 2\n\t\t\t\t\t],\n\t\t\t\t\trotate: [\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tsideLength / 2,\n\t\t\t\t\t\ttriangleHeight / 2\n\t\t\t\t\t],\n\t\t\t\t\tscale: [-1, -1]\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 6: // Center / top / right triangle\n\t\t\t\tthis.svg.polyline(triangle, styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\ttileWidth / 2 + sideLength / 2,\n\t\t\t\t\t\thexHeight / 2\n\t\t\t\t\t]});\n\t\t\t\tbreak;\n\t\t\tcase 7: // Center / top / left triangle\n\t\t\t\tthis.svg.polyline(triangle, styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\ttileWidth - tileWidth / 2 - sideLength / 2,\n\t\t\t\t\t\thexHeight / 2\n\t\t\t\t\t],\n\t\t\t\t\tscale: [-1, 1]\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 8: // Center / bottom / right triangle\n\t\t\t\tthis.svg.polyline(triangle, styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\ttileWidth / 2 + sideLength / 2,\n\t\t\t\t\t\ttileHeight - hexHeight / 2\n\t\t\t\t\t],\n\t\t\t\t\tscale: [1, -1]\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 9: // Center / bottom / left triangle\n\t\t\t\tthis.svg.polyline(triangle, styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\ttileWidth - tileWidth / 2 - sideLength / 2,\n\t\t\t\t\t\ttileHeight - hexHeight / 2\n\t\t\t\t\t],\n\t\t\t\t\tscale: [-1, -1]\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 10: // Left / middle triangle\n\t\t\t\tthis.svg.polyline(triangle, styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\tsideLength / 2,\n\t\t\t\t\t\ttileHeight / 2 - sideLength / 2\n\t\t\t\t\t]\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 11: // Right // middle triangle\n\t\t\t\tthis.svg.polyline(triangle, styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\ttileWidth - sideLength / 2,\n\t\t\t\t\t\ttileHeight / 2 - sideLength / 2\n\t\t\t\t\t],\n\t\t\t\t\tscale: [-1, 1]\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 12: // Left / top square\n\t\t\t\tthis.svg.rect(0, 0, sideLength, sideLength, styles).transform({\n\t\t\t\t\ttranslate: [sideLength / 2, sideLength / 2],\n\t\t\t\t\trotate: [-30, 0, 0]\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 13: // Right / top square\n\t\t\t\tthis.svg.rect(0, 0, sideLength, sideLength, styles).transform({\n\t\t\t\t\tscale: [-1, 1],\n\t\t\t\t\ttranslate: [-tileWidth + sideLength / 2, sideLength / 2],\n\t\t\t\t\trotate: [-30, 0, 0]\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 14: // Left / center-top square\n\t\t\t\tthis.svg.rect(0, 0, sideLength, sideLength, styles).transform({\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\tsideLength / 2,\n\t\t\t\t\t\ttileHeight / 2 - sideLength / 2 - sideLength\n\t\t\t\t\t],\n\t\t\t\t\trotate: [30, 0, sideLength]\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 15: // Right / center-top square\n\t\t\t\tthis.svg.rect(0, 0, sideLength, sideLength, styles).transform({\n\t\t\t\t\tscale: [-1, 1],\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\t-tileWidth + sideLength / 2,\n\t\t\t\t\t\ttileHeight / 2 - sideLength / 2  - sideLength\n\t\t\t\t\t],\n\t\t\t\t\trotate: [30, 0, sideLength]\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 16: // Left / center-top square\n\t\t\t\tthis.svg.rect(0, 0, sideLength, sideLength, styles).transform({\n\t\t\t\t\tscale: [1, -1],\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\tsideLength / 2,\n\t\t\t\t\t\t-tileHeight + tileHeight / 2 - sideLength / 2 - sideLength\n\t\t\t\t\t],\n\t\t\t\t\trotate: [30, 0, sideLength]\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 17: // Right / center-bottom square\n\t\t\t\tthis.svg.rect(0, 0, sideLength, sideLength, styles).transform({\n\t\t\t\t\tscale: [-1, -1],\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\t-tileWidth + sideLength / 2,\n\t\t\t\t\t\t-tileHeight + tileHeight / 2 - sideLength / 2 - sideLength\n\t\t\t\t\t],\n\t\t\t\t\trotate: [30, 0, sideLength]\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 18: // Left / bottom square\n\t\t\t\tthis.svg.rect(0, 0, sideLength, sideLength, styles).transform({\n\t\t\t\t\tscale: [1, -1],\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\tsideLength / 2,\n\t\t\t\t\t\t-tileHeight + sideLength / 2\n\t\t\t\t\t],\n\t\t\t\t\trotate: [-30, 0, 0]\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 19: // Right / bottom square\n\t\t\t\tthis.svg.rect(0, 0, sideLength, sideLength, styles).transform({\n\t\t\t\t\tscale: [-1, -1],\n\t\t\t\t\ttranslate: [\n\t\t\t\t\t\t-tileWidth + sideLength / 2,\n\t\t\t\t\t\t-tileHeight + sideLength / 2\n\t\t\t\t\t],\n\t\t\t\t\trotate: [-30, 0, 0]\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t}\n\t}\n};\n", "(function ($) {\n\n'use strict';\n\nvar Pattern = require('./lib/pattern');\n\n/*\n * Normalize arguments, if not given, to:\n * string: (new Date()).toString()\n * options: {}\n */\nfunction optArgs(cb) {\n\treturn function (string, options) {\n\t\tif (typeof string === 'object') {\n\t\t\toptions = string;\n\t\t\tstring = null;\n\t\t}\n\t\tif (string === null || string === undefined) {\n\t\t\tstring = (new Date()).toString();\n\t\t}\n\t\tif (!options) {\n\t\t\toptions = {};\n\t\t}\n\n\t\treturn cb.call(this, string, options);\n\t};\n}\n\nvar GeoPattern = module.exports = {\n\tgenerate: optArgs(function (string, options) {\n\t\treturn new Pattern(string, options);\n\t})\n};\n\nif ($) {\n\n\t// If jQuery, add plugin\n\t$.fn.geopattern = optArgs(function (string, options) {\n\t\treturn this.each(function () {\n\t\t\tvar titleSha = $(this).attr('data-title-sha');\n\t\t\tif (titleSha) {\n\t\t\t\toptions = $.extend({\n\t\t\t\t\thash: titleSha\n\t\t\t\t}, options);\n\t\t\t}\n\t\t\tvar pattern = GeoPattern.generate(string, options);\n\t\t\t$(this).css('background-image', pattern.toDataUrl());\n\t\t});\n\t});\n\n}\n\n}(typeof jQuery !== 'undefined' ? jQuery : null));\n"],
  "mappings": "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",
  "names": ["p", "q"]
}
